
main_SDK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00003510  000035a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fd  00800344  00800344  000037e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa0  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000197c6  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fc3  00000000  00000000  0001dabe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000398d  00000000  00000000  00021a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022f8  00000000  00000000  00025410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004676  00000000  00000000  00027708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000babe  00000000  00000000  0002bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b48  00000000  00000000  0003783c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__ctors_end>
       4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      28:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__vector_10>
      2c:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__vector_11>
      30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      3c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      44:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      54:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      58:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      5c:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__vector_23>
      60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      64:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_25>
      68:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_26>
      6c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      70:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      74:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      78:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      7c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      80:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      84:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      8c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      90:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_36>
      94:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      98:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      9c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      ac:	4d 03       	fmul	r20, r21
      ae:	52 03       	mulsu	r21, r18
      b0:	56 03       	mulsu	r21, r22
      b2:	5a 03       	fmul	r21, r18
      b4:	5e 03       	fmul	r21, r22
      b6:	6f 03       	fmul	r22, r23
      b8:	73 03       	mulsu	r23, r19
      ba:	77 03       	mulsu	r23, r23
      bc:	7b 03       	fmul	r23, r19
      be:	7f 03       	fmul	r23, r23
      c0:	89 03       	fmulsu	r16, r17
      c2:	93 03       	fmuls	r17, r19
      c4:	97 03       	fmuls	r17, r23
      c6:	9b 03       	fmulsu	r17, r19
      c8:	9f 03       	fmulsu	r17, r23
      ca:	a3 03       	fmuls	r18, r19
      cc:	a7 03       	fmuls	r18, r23
      ce:	b1 03       	fmuls	r19, r17
      d0:	b5 03       	fmuls	r19, r21
      d2:	b9 03       	fmulsu	r19, r17
      d4:	bd 03       	fmulsu	r19, r21
      d6:	c1 03       	fmuls	r20, r17
      d8:	c8 03       	fmulsu	r20, r16
      da:	cf 03       	fmulsu	r20, r23
      dc:	d3 03       	fmuls	r21, r19
      de:	d7 03       	fmuls	r21, r23
      e0:	db 03       	fmulsu	r21, r19
      e2:	df 03       	fmulsu	r21, r23
      e4:	e3 03       	fmuls	r22, r19
      e6:	e7 03       	fmuls	r22, r23
      e8:	eb 03       	fmulsu	r22, r19
      ea:	ef 03       	fmulsu	r22, r23
      ec:	f3 03       	fmuls	r23, r19
      ee:	fd 03       	fmulsu	r23, r21
      f0:	01 04       	cpc	r0, r1
      f2:	05 04       	cpc	r0, r5
      f4:	09 04       	cpc	r0, r9
      f6:	09 04       	cpc	r0, r9
      f8:	0d 04       	cpc	r0, r13
      fa:	11 04       	cpc	r1, r1
      fc:	15 04       	cpc	r1, r5
      fe:	19 04       	cpc	r1, r9
     100:	1d 04       	cpc	r1, r13
     102:	21 04       	cpc	r2, r1
     104:	25 04       	cpc	r2, r5
     106:	29 04       	cpc	r2, r9
     108:	2d 04       	cpc	r2, r13
     10a:	31 04       	cpc	r3, r1
     10c:	35 04       	cpc	r3, r5
     10e:	3f 04       	cpc	r3, r15
     110:	43 04       	cpc	r4, r3
     112:	47 04       	cpc	r4, r7
     114:	4b 04       	cpc	r4, r11
     116:	4f 04       	cpc	r4, r15
     118:	53 04       	cpc	r5, r3
     11a:	57 04       	cpc	r5, r7
     11c:	5b 04       	cpc	r5, r11
     11e:	5f 04       	cpc	r5, r15
     120:	63 04       	cpc	r6, r3
     122:	67 04       	cpc	r6, r7
     124:	6b 04       	cpc	r6, r11
     126:	6f 04       	cpc	r6, r15
     128:	73 04       	cpc	r7, r3
     12a:	77 04       	cpc	r7, r7
     12c:	7b 04       	cpc	r7, r11
     12e:	88 04       	cpc	r8, r8
     130:	8f 04       	cpc	r8, r15
     132:	96 04       	cpc	r9, r6
     134:	9d 04       	cpc	r9, r13
     136:	a1 04       	cpc	r10, r1
     138:	a5 04       	cpc	r10, r5
     13a:	a9 04       	cpc	r10, r9
     13c:	b0 04       	cpc	r11, r0
     13e:	ba 04       	cpc	r11, r10
     140:	be 04       	cpc	r11, r14
     142:	c2 04       	cpc	r12, r2
     144:	cc 04       	cpc	r12, r12
     146:	d3 04       	cpc	r13, r3
     148:	e0 04       	cpc	r14, r0
     14a:	ed 04       	cpc	r14, r13
     14c:	33 08       	sbc	r3, r3
     14e:	4a 08       	sbc	r4, r10
     150:	4a 08       	sbc	r4, r10
     152:	47 08       	sbc	r4, r7
     154:	4a 08       	sbc	r4, r10
     156:	31 08       	sbc	r3, r1
     158:	4a 08       	sbc	r4, r10
     15a:	4a 08       	sbc	r4, r10
     15c:	4a 08       	sbc	r4, r10
     15e:	25 08       	sbc	r2, r5
     160:	4a 08       	sbc	r4, r10
     162:	4a 08       	sbc	r4, r10
     164:	3a 08       	sbc	r3, r10
     166:	45 08       	sbc	r4, r5
     168:	43 08       	sbc	r4, r3
     16a:	4a 08       	sbc	r4, r10
     16c:	4a 08       	sbc	r4, r10
     16e:	4a 08       	sbc	r4, r10
     170:	41 08       	sbc	r4, r1
     172:	c5 18       	sub	r12, r5
     174:	c8 18       	sub	r12, r8
     176:	b7 18       	sub	r11, r7
     178:	bb 18       	sub	r11, r11
     17a:	c1 18       	sub	r12, r1
     17c:	e9 18       	sub	r14, r9
     17e:	e9 18       	sub	r14, r9
     180:	e9 18       	sub	r14, r9
     182:	cc 18       	sub	r12, r12
     184:	d0 18       	sub	r13, r0
     186:	d4 18       	sub	r13, r4
     188:	da 18       	sub	r13, r10
     18a:	de 18       	sub	r13, r14
     18c:	e9 18       	sub	r14, r9
     18e:	e4 18       	sub	r14, r4

00000190 <__trampolines_end>:
     190:	4a 75       	andi	r20, 0x5A	; 90
     192:	6e 20       	and	r6, r14
     194:	31 38       	cpi	r19, 0x81	; 129
     196:	20 32       	cpi	r18, 0x20	; 32
     198:	30 31       	cpi	r19, 0x10	; 16
     19a:	36 00       	.word	0x0036	; ????

0000019c <_ZZ5setupE3__c_0>:
     19c:	31 37 3a 34 31 3a 32 36 00                          17:41:26.

000001a5 <_ZL11daysInMonth>:
     1a5:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000001b1 <_cdcInterface>:
     1b1:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1c1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1d1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1e1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001f3 <USB_DeviceDescriptorB>:
     1f3:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     203:	03 01                                               ..

00000205 <USB_DeviceDescriptor>:
     205:	12 01 00 02 00 00 00 40 41 23 36 80 00 01 01 02     .......@A#6.....
     215:	03 01                                               ..

00000217 <STRING_MANUFACTURER>:
     217:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000223 <STRING_PRODUCT>:
     223:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000234 <STRING_LANGUAGE>:
     234:	04 03 09 04                                         ....

00000238 <digital_pin_to_timer_PGM>:
     238:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000257 <digital_pin_to_bit_mask_PGM>:
     257:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     267:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000276 <digital_pin_to_port_PGM>:
     276:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     286:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000295 <port_to_input_PGM>:
     295:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000002a3 <port_to_output_PGM>:
     2a3:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000002b1 <port_to_mode_PGM>:
     2b1:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00 00        ....$.'.*.-.0..

000002c0 <__ctors_start>:
     2c0:	91 01       	movw	r18, r2
     2c2:	89 05       	cpc	r24, r9
     2c4:	b0 07       	cpc	r27, r16
     2c6:	2a 0d       	add	r18, r10
     2c8:	91 0f       	add	r25, r17
     2ca:	33 11       	cpse	r19, r3

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	da e0       	ldi	r29, 0x0A	; 10
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	13 e0       	ldi	r17, 0x03	; 3
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e0 e1       	ldi	r30, 0x10	; 16
     2e0:	f5 e3       	ldi	r31, 0x35	; 53
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x10>
     2e4:	05 90       	lpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a4 34       	cpi	r26, 0x44	; 68
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0xc>

000002ee <__do_clear_bss>:
     2ee:	25 e0       	ldi	r18, 0x05	; 5
     2f0:	a4 e4       	ldi	r26, 0x44	; 68
     2f2:	b3 e0       	ldi	r27, 0x03	; 3
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	a1 34       	cpi	r26, 0x41	; 65
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	c6 e6       	ldi	r28, 0x66	; 102
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 47 1a 	call	0x348e	; 0x348e <__tablejump2__>
     30e:	c0 36       	cpi	r28, 0x60	; 96
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 61 11 	call	0x22c2	; 0x22c2 <main>
     318:	0c 94 86 1a 	jmp	0x350c	; 0x350c <_exit>

0000031c <__bad_interrupt>:
     31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000320 <_ZN3BLEC1Ev>:
HBT myHBTstatus;  //HBT object
QTouch capTouch;



BLE::BLE()
     320:	08 95       	ret

00000322 <_GLOBAL__sub_I_myHBTstatus>:
#define OPEN 0
#define SECURED 2



class HBT
     322:	81 e1       	ldi	r24, 0x11	; 17
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	90 93 4c 03 	sts	0x034C, r25
     32a:	80 93 4b 03 	sts	0x034B, r24
#include "QTouch.h"
#include "HBT.h"


HBT myHBTstatus;  //HBT object
QTouch capTouch;
     32e:	84 e4       	ldi	r24, 0x44	; 68
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	0c 94 9b 01 	jmp	0x336	; 0x336 <_ZN6QTouchC1Ev>

00000336 <_ZN6QTouchC1Ev>:

//RTC_DS1307 myRTC;
BLE mystatus;
//HBT myhbt;

QTouch::QTouch()
     336:	08 95       	ret

00000338 <_ZN6QTouch8gpioInitEv>:

	Method: gpioInit()	

==========================================================================================================*/
void QTouch::gpioInit(void)
{
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	60 97       	sbiw	r28, 0x10	; 16
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
  
   uint8_t capsensepins[8] = {Lamp1,Lamp2,Lamp3,Socket,Fan_Control,Up,Down};
     35e:	88 e0       	ldi	r24, 0x08	; 8
     360:	8e 01       	movw	r16, r28
     362:	07 5f       	subi	r16, 0xF7	; 247
     364:	1f 4f       	sbci	r17, 0xFF	; 255
     366:	f8 01       	movw	r30, r16
     368:	98 2f       	mov	r25, r24
     36a:	11 92       	st	Z+, r1
     36c:	9a 95       	dec	r25
     36e:	e9 f7       	brne	.-6      	; 0x36a <_ZN6QTouch8gpioInitEv+0x32>
     370:	97 e0       	ldi	r25, 0x07	; 7
     372:	99 87       	std	Y+9, r25	; 0x09
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	9a 87       	std	Y+10, r25	; 0x0a
     378:	9c e0       	ldi	r25, 0x0C	; 12
     37a:	9b 87       	std	Y+11, r25	; 0x0b
     37c:	96 e0       	ldi	r25, 0x06	; 6
     37e:	9c 87       	std	Y+12, r25	; 0x0c
     380:	9a e0       	ldi	r25, 0x0A	; 10
     382:	9d 87       	std	Y+13, r25	; 0x0d
     384:	8e 87       	std	Y+14, r24	; 0x0e
     386:	99 e0       	ldi	r25, 0x09	; 9
     388:	9f 87       	std	Y+15, r25	; 0x0f
   uint8_t loadoutpins[8] = {Load1,Load2,Load3,Load4,Level1,Level2,Level3,Level4};//Load6=NC
     38a:	e3 e1       	ldi	r30, 0x13	; 19
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	de 01       	movw	r26, r28
     390:	11 96       	adiw	r26, 0x01	; 1
     392:	01 90       	ld	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	8a 95       	dec	r24
     398:	e1 f7       	brne	.-8      	; 0x392 <_ZN6QTouch8gpioInitEv+0x5a>
     39a:	fe 01       	movw	r30, r28
     39c:	31 96       	adiw	r30, 0x01	; 1
     39e:	7f 01       	movw	r14, r30
     3a0:	4f 01       	movw	r8, r30
     3a2:	68 01       	movw	r12, r16
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	b8 2e       	mov	r11, r24
     3a8:	b0 0e       	add	r11, r16

  //Set Pinmodes of I/O pins

  for(uint8_t i=0;i<8;i++)
  {
    pinMode(capsensepins[i],INPUT);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	f6 01       	movw	r30, r12
     3ae:	81 91       	ld	r24, Z+
     3b0:	6f 01       	movw	r12, r30
     3b2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <pinMode>
    pinMode(loadoutpins[i],OUTPUT);
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	f4 01       	movw	r30, r8
     3ba:	81 91       	ld	r24, Z+
     3bc:	4f 01       	movw	r8, r30
     3be:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <pinMode>
   uint8_t capsensepins[8] = {Lamp1,Lamp2,Lamp3,Socket,Fan_Control,Up,Down};
   uint8_t loadoutpins[8] = {Load1,Load2,Load3,Load4,Level1,Level2,Level3,Level4};//Load6=NC

  //Set Pinmodes of I/O pins

  for(uint8_t i=0;i<8;i++)
     3c2:	bc 10       	cpse	r11, r12
     3c4:	f2 cf       	rjmp	.-28     	; 0x3aa <_ZN6QTouch8gpioInitEv+0x72>
  digitalWrite(Fan_Control,LOW);
  digitalWrite(Up,LOW);
  digitalWrite(Down,LOW);    */
  for(uint8_t i=0;i<8;i++)
  {
    digitalWrite(capsensepins[i],LOW);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	f8 01       	movw	r30, r16
     3ca:	81 91       	ld	r24, Z+
     3cc:	8f 01       	movw	r16, r30
     3ce:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
    digitalWrite(loadoutpins[i],LOW);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	f7 01       	movw	r30, r14
     3d6:	81 91       	ld	r24, Z+
     3d8:	7f 01       	movw	r14, r30
     3da:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Lamp3,LOW);
  digitalWrite(Socket,LOW);
  digitalWrite(Fan_Control,LOW);
  digitalWrite(Up,LOW);
  digitalWrite(Down,LOW);    */
  for(uint8_t i=0;i<8;i++)
     3de:	b0 12       	cpse	r11, r16
     3e0:	f2 cf       	rjmp	.-28     	; 0x3c6 <_ZN6QTouch8gpioInitEv+0x8e>
  {
    digitalWrite(capsensepins[i],LOW);
    digitalWrite(loadoutpins[i],LOW);
  }
    
}
     3e2:	60 96       	adiw	r28, 0x10	; 16
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	bf 90       	pop	r11
     400:	9f 90       	pop	r9
     402:	8f 90       	pop	r8
     404:	08 95       	ret

00000406 <_ZN6QTouch5L1_ONEv>:
==========================================================================================================*/

void QTouch::L1_ON(void)  
{	
     	
  digitalWrite(Load1,HIGH);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8e e0       	ldi	r24, 0x0E	; 14
     40a:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

0000040e <_ZN6QTouch5L2_ONEv>:
}

void QTouch::L2_ON(void)
{
  digitalWrite(Load2,HIGH);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	8f e0       	ldi	r24, 0x0F	; 15
     412:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000416 <_ZN6QTouch5L3_ONEv>:
}

void QTouch::L3_ON(void)
{
  digitalWrite(Load3,HIGH);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

0000041e <_ZN6QTouch9Socket_ONEv>:
}

void QTouch::Socket_ON(void)      //Socket Control SW
{
  digitalWrite(Load4,HIGH);
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	81 e1       	ldi	r24, 0x11	; 17
     422:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000426 <_ZN6QTouch6L1_OFFEv>:

==========================================================================================================*/

void QTouch::L1_OFF(void)
{
  digitalWrite(Load1,LOW);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	8e e0       	ldi	r24, 0x0E	; 14
     42a:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

0000042e <_ZN6QTouch6L2_OFFEv>:
}

void QTouch::L2_OFF(void)
{
  digitalWrite(Load2,LOW);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000436 <_ZN6QTouch6L3_OFFEv>:
  
}

void QTouch::L3_OFF(void)
{
  digitalWrite(Load3,LOW);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

0000043e <_ZN6QTouch10Socket_OFFEv>:

}

void QTouch::Socket_OFF(void)
{
  digitalWrite(Load4,LOW);      //Socket OFF
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	81 e1       	ldi	r24, 0x11	; 17
     442:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000446 <_ZN6QTouch7FAN_OFFEv>:

}

void QTouch::FAN_OFF(void)
{
  digitalWrite(Level1,LOW);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level2,LOW);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	8d e0       	ldi	r24, 0x0D	; 13
     452:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level3,LOW);
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	82 e1       	ldi	r24, 0x12	; 18
     45a:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level4,LOW);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	83 e1       	ldi	r24, 0x13	; 19
     462:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000466 <_ZN6QTouch10Level2_OFFEv>:
  
}

void QTouch::Level2_OFF(void)
{
  digitalWrite(Level2,LOW);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	8d e0       	ldi	r24, 0x0D	; 13
     46a:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

0000046e <_ZN6QTouch10Level3_OFFEv>:
}

void QTouch::Level3_OFF(void)
{
  digitalWrite(Level3,LOW);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	82 e1       	ldi	r24, 0x12	; 18
     472:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

00000476 <_ZN6QTouch9Level4_ONEv>:
  digitalWrite(Level3,HIGH);
  digitalWrite(Level1,LOW);Level2_OFF();Level4_OFF();
}

void QTouch::Level4_ON(void)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
  digitalWrite(Level4,HIGH);
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	83 e1       	ldi	r24, 0x13	; 19
     480:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level1,LOW);Level2_OFF();Level3_OFF();
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
     48c:	ce 01       	movw	r24, r28
     48e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN6QTouch10Level2_OFFEv>
     492:	ce 01       	movw	r24, r28
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
}

void QTouch::Level4_ON(void)
{
  digitalWrite(Level4,HIGH);
  digitalWrite(Level1,LOW);Level2_OFF();Level3_OFF();
     498:	0c 94 37 02 	jmp	0x46e	; 0x46e <_ZN6QTouch10Level3_OFFEv>

0000049c <_ZN6QTouch10Level4_OFFEv>:
  digitalWrite(Level3,LOW);
}

void QTouch::Level4_OFF(void)
{
  digitalWrite(Level4,LOW);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	83 e1       	ldi	r24, 0x13	; 19
     4a0:	0c 94 26 19 	jmp	0x324c	; 0x324c <digitalWrite>

000004a4 <_ZN6QTouch6FAN_ONEv>:
{
  digitalWrite(Load4,HIGH);
}

void QTouch::FAN_ON(void)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
  //Fan switch on and Level set to Default i.e Level-1
  digitalWrite(Level1,HIGH);    //set to Level-1
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  Level2_OFF();Level3_OFF();Level4_OFF();
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 33 02 	call	0x466	; 0x466 <_ZN6QTouch10Level2_OFFEv>
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN6QTouch10Level3_OFFEv>
     4be:	ce 01       	movw	r24, r28
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28

void QTouch::FAN_ON(void)
{
  //Fan switch on and Level set to Default i.e Level-1
  digitalWrite(Level1,HIGH);    //set to Level-1
  Level2_OFF();Level3_OFF();Level4_OFF();
     4c4:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN6QTouch10Level4_OFFEv>

000004c8 <_ZN6QTouch9Master_ONEv>:
  digitalWrite(Level1,LOW);Level2_OFF();Level3_OFF();
}

  
void QTouch::Master_ON(void)  // Now Master is ON == Make ALL ON
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
  //curr_status = getstatus;
  //L1_ON();L2_ON();L3_ON();
  digitalWrite(Load1,HIGH);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	8e e0       	ldi	r24, 0x0E	; 14
     4d2:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load2,HIGH);
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	8f e0       	ldi	r24, 0x0F	; 15
     4da:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load3,HIGH);
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load4,HIGH);  //Make them OFF
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	81 e1       	ldi	r24, 0x11	; 17
     4ea:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  Socket_ON();
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
  FAN_ON();                  //Fan at Default Speed Level -1
     4f4:	ce 01       	movw	r24, r28
  
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
  digitalWrite(Load1,HIGH);
  digitalWrite(Load2,HIGH);
  digitalWrite(Load3,HIGH);
  digitalWrite(Load4,HIGH);  //Make them OFF
  Socket_ON();
  FAN_ON();                  //Fan at Default Speed Level -1
     4fa:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>

000004fe <_ZN6QTouch9Level2_ONEv>:
  //Fan switch on and Level set to Default i.e Level-1
  digitalWrite(Level1,HIGH);    //set to Level-1
  Level2_OFF();Level3_OFF();Level4_OFF();
}
void QTouch::Level2_ON(void)
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
  digitalWrite(Level2,HIGH);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8d e0       	ldi	r24, 0x0D	; 13
     508:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level1,LOW);Level3_OFF();Level4_OFF();
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
     514:	ce 01       	movw	r24, r28
     516:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN6QTouch10Level3_OFFEv>
     51a:	ce 01       	movw	r24, r28
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
  Level2_OFF();Level3_OFF();Level4_OFF();
}
void QTouch::Level2_ON(void)
{
  digitalWrite(Level2,HIGH);
  digitalWrite(Level1,LOW);Level3_OFF();Level4_OFF();
     520:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN6QTouch10Level4_OFFEv>

00000524 <_ZN6QTouch9Level3_ONEv>:
}

void QTouch::Level3_ON(void)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
  digitalWrite(Level3,HIGH);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	82 e1       	ldi	r24, 0x12	; 18
     52e:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Level1,LOW);Level2_OFF();Level4_OFF();
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	85 e0       	ldi	r24, 0x05	; 5
     536:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
     53a:	ce 01       	movw	r24, r28
     53c:	0e 94 33 02 	call	0x466	; 0x466 <_ZN6QTouch10Level2_OFFEv>
     540:	ce 01       	movw	r24, r28
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
}

void QTouch::Level3_ON(void)
{
  digitalWrite(Level3,HIGH);
  digitalWrite(Level1,LOW);Level2_OFF();Level4_OFF();
     546:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN6QTouch10Level4_OFFEv>

0000054a <_ZN6QTouch10Master_OFFEv>:
  digitalWrite(Level4,LOW);
}


void QTouch::Master_OFF(void)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
  digitalWrite(Load1,LOW);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	8e e0       	ldi	r24, 0x0E	; 14
     554:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load2,LOW);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8f e0       	ldi	r24, 0x0F	; 15
     55c:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load3,LOW);
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	80 e1       	ldi	r24, 0x10	; 16
     564:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(Load4,LOW);  //Make them OFF
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	81 e1       	ldi	r24, 0x11	; 17
     56c:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  FAN_OFF();
     570:	ce 01       	movw	r24, r28
  
}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
{
  digitalWrite(Load1,LOW);
  digitalWrite(Load2,LOW);
  digitalWrite(Load3,LOW);
  digitalWrite(Load4,LOW);  //Make them OFF
  FAN_OFF();
     576:	0c 94 23 02 	jmp	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>

0000057a <_ZN6QTouch12readCapsenseEv>:
	             and returns a 8-bit number(byte)

==========================================================================================================*/

byte QTouch::readCapsense()
{
     57a:	6f 92       	push	r6
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	28 97       	sbiw	r28, 0x08	; 8
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
  //Read the Input Port Status and returns int value
  
  boolean l1 = digitalRead(Lamp1);
     5a6:	87 e0       	ldi	r24, 0x07	; 7
     5a8:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5ac:	3c 01       	movw	r6, r24
  boolean l2 = digitalRead(Lamp2);
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5b4:	4c 01       	movw	r8, r24
  boolean l3 = digitalRead(Lamp3);
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5bc:	5c 01       	movw	r10, r24
  boolean l4 = digitalRead(Socket);
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5c4:	6c 01       	movw	r12, r24
  boolean l5 = digitalRead(Fan_Control);
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5cc:	8c 01       	movw	r16, r24
  boolean l6 = digitalRead(Up);
     5ce:	88 e0       	ldi	r24, 0x08	; 8
     5d0:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5d4:	7c 01       	movw	r14, r24
  boolean l7 = digitalRead(Down);
     5d6:	89 e0       	ldi	r24, 0x09	; 9
     5d8:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     5dc:	9c 01       	movw	r18, r24
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     5de:	fe 01       	movw	r30, r28
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	df 01       	movw	r26, r30
     5e6:	1d 92       	st	X+, r1
     5e8:	8a 95       	dec	r24
     5ea:	e9 f7       	brne	.-6      	; 0x5e6 <_ZN6QTouch12readCapsenseEv+0x6c>

byte QTouch::readCapsense()
{
  //Read the Input Port Status and returns int value
  
  boolean l1 = digitalRead(Lamp1);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	67 28       	or	r6, r7
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <_ZN6QTouch12readCapsenseEv+0x7a>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     5f4:	89 83       	std	Y+1, r24	; 0x01
byte QTouch::readCapsense()
{
  //Read the Input Port Status and returns int value
  
  boolean l1 = digitalRead(Lamp1);
  boolean l2 = digitalRead(Lamp2);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	89 28       	or	r8, r9
     5fa:	09 f4       	brne	.+2      	; 0x5fe <_ZN6QTouch12readCapsenseEv+0x84>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     5fe:	8a 83       	std	Y+2, r24	; 0x02
{
  //Read the Input Port Status and returns int value
  
  boolean l1 = digitalRead(Lamp1);
  boolean l2 = digitalRead(Lamp2);
  boolean l3 = digitalRead(Lamp3);
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	ab 28       	or	r10, r11
     604:	09 f4       	brne	.+2      	; 0x608 <_ZN6QTouch12readCapsenseEv+0x8e>
     606:	80 e0       	ldi	r24, 0x00	; 0
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     608:	8b 83       	std	Y+3, r24	; 0x03
  //Read the Input Port Status and returns int value
  
  boolean l1 = digitalRead(Lamp1);
  boolean l2 = digitalRead(Lamp2);
  boolean l3 = digitalRead(Lamp3);
  boolean l4 = digitalRead(Socket);
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	cd 28       	or	r12, r13
     60e:	09 f4       	brne	.+2      	; 0x612 <_ZN6QTouch12readCapsenseEv+0x98>
     610:	80 e0       	ldi	r24, 0x00	; 0
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     612:	8c 83       	std	Y+4, r24	; 0x04
  boolean l1 = digitalRead(Lamp1);
  boolean l2 = digitalRead(Lamp2);
  boolean l3 = digitalRead(Lamp3);
  boolean l4 = digitalRead(Socket);
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	ef 28       	or	r14, r15
     618:	09 f4       	brne	.+2      	; 0x61c <_ZN6QTouch12readCapsenseEv+0xa2>
     61a:	80 e0       	ldi	r24, 0x00	; 0
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     61c:	8d 83       	std	Y+5, r24	; 0x05
  
  boolean l1 = digitalRead(Lamp1);
  boolean l2 = digitalRead(Lamp2);
  boolean l3 = digitalRead(Lamp3);
  boolean l4 = digitalRead(Socket);
  boolean l5 = digitalRead(Fan_Control);
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	01 2b       	or	r16, r17
     622:	09 f4       	brne	.+2      	; 0x626 <_ZN6QTouch12readCapsenseEv+0xac>
     624:	90 e0       	ldi	r25, 0x00	; 0
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     626:	9e 83       	std	Y+6, r25	; 0x06
  boolean l2 = digitalRead(Lamp2);
  boolean l3 = digitalRead(Lamp3);
  boolean l4 = digitalRead(Socket);
  boolean l5 = digitalRead(Fan_Control);
  boolean l6 = digitalRead(Up);
  boolean l7 = digitalRead(Down);
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	23 2b       	or	r18, r19
     62c:	09 f4       	brne	.+2      	; 0x630 <_ZN6QTouch12readCapsenseEv+0xb6>
     62e:	90 e0       	ldi	r25, 0x00	; 0
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
     630:	9f 83       	std	Y+7, r25	; 0x07
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
  byte val=0;
     636:	80 e0       	ldi	r24, 0x00	; 0
  
  for(uint8_t i=0;i<=7;i++)
  {
    val|= (no[i]<< i);    //convert bits to byte
     638:	21 91       	ld	r18, Z+
     63a:	04 2e       	mov	r0, r20
     63c:	01 c0       	rjmp	.+2      	; 0x640 <_ZN6QTouch12readCapsenseEv+0xc6>
     63e:	22 0f       	add	r18, r18
     640:	0a 94       	dec	r0
     642:	ea f7       	brpl	.-6      	; 0x63e <_ZN6QTouch12readCapsenseEv+0xc4>
     644:	82 2b       	or	r24, r18
     646:	4f 5f       	subi	r20, 0xFF	; 255
     648:	5f 4f       	sbci	r21, 0xFF	; 255
  
  
  byte no[8] = {l1,l2,l3,l4,l6,l5,l7};//no[0] = LSB
  byte val=0;
  
  for(uint8_t i=0;i<=7;i++)
     64a:	48 30       	cpi	r20, 0x08	; 8
     64c:	51 05       	cpc	r21, r1
     64e:	a1 f7       	brne	.-24     	; 0x638 <_ZN6QTouch12readCapsenseEv+0xbe>
      
  //Serial.print(val);
   
  return val;
  
}
     650:	28 96       	adiw	r28, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	7f 90       	pop	r7
     676:	6f 90       	pop	r6
     678:	08 95       	ret

0000067a <_ZN6QTouch11cap_setLoadEh>:

==========================================================================================================*/


void QTouch::cap_setLoad(byte loadValue)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
  m_loadValue = loadValue;
     680:	6b 83       	std	Y+3, r22	; 0x03
  prev_loadValue = m_loadValue;
     682:	6e 83       	std	Y+6, r22	; 0x06
  
  //Serial.println(m_loadValue,HEX);
  switch(m_loadValue)
     684:	86 2f       	mov	r24, r22
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	80 35       	cpi	r24, 0x50	; 80
     68a:	91 05       	cpc	r25, r1
     68c:	08 f0       	brcs	.+2      	; 0x690 <_ZN6QTouch11cap_setLoadEh+0x16>
     68e:	b6 c1       	rjmp	.+876    	; 0x9fc <_ZN6QTouch11cap_setLoadEh+0x382>
     690:	fc 01       	movw	r30, r24
     692:	ea 5a       	subi	r30, 0xAA	; 170
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__tablejump2__>
  {
    case(0x00)://Master + ALL switches are OFF   D23,D22,D21,D20,D19 
              Master_OFF(); break;
     69a:	ce 01       	movw	r24, r28
    case(0x4F)://    0100 1111                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;

    }
          
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
  
  //Serial.println(m_loadValue,HEX);
  switch(m_loadValue)
  {
    case(0x00)://Master + ALL switches are OFF   D23,D22,D21,D20,D19 
              Master_OFF(); break;
     6a0:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_ZN6QTouch10Master_OFFEv>
              
    case(0x01):
            FAN_OFF();Socket_OFF();L3_OFF();L2_OFF();L1_ON(); break;
     6a4:	ce 01       	movw	r24, r28
     6a6:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6aa:	35 c1       	rjmp	.+618    	; 0x916 <_ZN6QTouch11cap_setLoadEh+0x29c>
  
    case(0x02):
             FAN_OFF();Socket_OFF();L3_OFF();L2_ON();L1_OFF();  break;
     6ac:	ce 01       	movw	r24, r28
     6ae:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6b2:	38 c1       	rjmp	.+624    	; 0x924 <_ZN6QTouch11cap_setLoadEh+0x2aa>

    case(0x03):
             FAN_OFF();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6ba:	3b c1       	rjmp	.+630    	; 0x932 <_ZN6QTouch11cap_setLoadEh+0x2b8>

    case(0x04):
             FAN_OFF();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     6c8:	ce 01       	movw	r24, r28
     6ca:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6QTouch5L3_ONEv>
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN6QTouch6L2_OFFEv>
     6d4:	ce 01       	movw	r24, r28
    case(0x4F)://    0100 1111                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;

    }
          
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28

    case(0x03):
             FAN_OFF();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;

    case(0x04):
             FAN_OFF();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     6da:	0c 94 13 02 	jmp	0x426	; 0x426 <_ZN6QTouch6L1_OFFEv>
     
    case(0x05):
             FAN_OFF();Socket_OFF();L3_ON();L2_OFF();L1_ON();  break;
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6e4:	51 c0       	rjmp	.+162    	; 0x788 <_ZN6QTouch11cap_setLoadEh+0x10e>
 
     case(0x06):
             FAN_OFF();Socket_OFF();L3_ON();L2_ON();L1_OFF();  break;
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6ec:	54 c0       	rjmp	.+168    	; 0x796 <_ZN6QTouch11cap_setLoadEh+0x11c>

     case(0x07):
             FAN_OFF();Socket_OFF();L3_ON();L2_ON();L1_ON();  break;
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6f4:	31 c1       	rjmp	.+610    	; 0x958 <_ZN6QTouch11cap_setLoadEh+0x2de>
    
     case(0x08):
             FAN_OFF();Socket_ON();L3_OFF();L2_OFF();L1_OFF();  break;
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     6fc:	34 c1       	rjmp	.+616    	; 0x966 <_ZN6QTouch11cap_setLoadEh+0x2ec>

     case(0x09):
             FAN_OFF();Socket_ON();L3_OFF();L2_OFF();L1_ON();  break;
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6QTouch6L3_OFFEv>
     710:	53 c1       	rjmp	.+678    	; 0x9b8 <_ZN6QTouch11cap_setLoadEh+0x33e>

     case(0x0A):
             FAN_OFF();Socket_ON();L3_OFF();L2_ON();L1_OFF();  break;
     712:	ce 01       	movw	r24, r28
     714:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6QTouch6L3_OFFEv>
     724:	56 c1       	rjmp	.+684    	; 0x9d2 <_ZN6QTouch11cap_setLoadEh+0x358>

     case(0x0B):
             FAN_OFF();Socket_ON();L3_OFF();L2_ON();L1_ON();  break;
     726:	ce 01       	movw	r24, r28
     728:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     72c:	2e c1       	rjmp	.+604    	; 0x98a <_ZN6QTouch11cap_setLoadEh+0x310>

     case(0x0C):
             FAN_OFF();Socket_ON();L3_ON();L2_OFF();L1_OFF();  break;
     72e:	ce 01       	movw	r24, r28
     730:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     734:	34 c1       	rjmp	.+616    	; 0x99e <_ZN6QTouch11cap_setLoadEh+0x324>

     case(0x0D):
             FAN_OFF();Socket_ON();L3_ON();L2_OFF();L1_ON();  break;
     736:	ce 01       	movw	r24, r28
     738:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     73c:	37 c1       	rjmp	.+622    	; 0x9ac <_ZN6QTouch11cap_setLoadEh+0x332>
    
     case(0x0E):
             FAN_OFF();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     744:	40 c1       	rjmp	.+640    	; 0x9c6 <_ZN6QTouch11cap_setLoadEh+0x34c>

     case(0x0F):
             FAN_OFF();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     746:	ce 01       	movw	r24, r28
     748:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
     74c:	49 c1       	rjmp	.+658    	; 0x9e0 <_ZN6QTouch11cap_setLoadEh+0x366>

     case(0x10):
             Serial.println("Level - 1");
     74e:	6b e1       	ldi	r22, 0x1B	; 27
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	84 e3       	ldi	r24, 0x34	; 52
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
             FAN_ON();Socket_OFF();L3_OFF();L2_OFF();L1_OFF();  break;  //Set to Level-1
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     760:	d3 c0       	rjmp	.+422    	; 0x908 <_ZN6QTouch11cap_setLoadEh+0x28e>
  
     case(0x11):
             FAN_ON();Socket_OFF();L3_OFF();L2_OFF();L1_ON();  break;
     762:	ce 01       	movw	r24, r28
     764:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     768:	d6 c0       	rjmp	.+428    	; 0x916 <_ZN6QTouch11cap_setLoadEh+0x29c>

     case(0x12):
             FAN_ON();Socket_OFF();L3_OFF();L2_ON();L1_OFF();  break;
     76a:	ce 01       	movw	r24, r28
     76c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     770:	d9 c0       	rjmp	.+434    	; 0x924 <_ZN6QTouch11cap_setLoadEh+0x2aa>

     case(0x13):
            FAN_ON();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;
     772:	ce 01       	movw	r24, r28
     774:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     778:	dc c0       	rjmp	.+440    	; 0x932 <_ZN6QTouch11cap_setLoadEh+0x2b8>

     case(0x14):
             FAN_ON();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     77a:	ce 01       	movw	r24, r28
     77c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     780:	a0 cf       	rjmp	.-192    	; 0x6c2 <_ZN6QTouch11cap_setLoadEh+0x48>

     case(0x15):
             FAN_ON();Socket_OFF();L3_ON();L2_OFF();L1_ON();  break;
     782:	ce 01       	movw	r24, r28
     784:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     78e:	11 c1       	rjmp	.+546    	; 0x9b2 <_ZN6QTouch11cap_setLoadEh+0x338>

     case(0x16):
            FAN_ON();Socket_OFF();L3_ON();L2_ON();L1_OFF();  break;
     790:	ce 01       	movw	r24, r28
     792:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     796:	ce 01       	movw	r24, r28
     798:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     79c:	17 c1       	rjmp	.+558    	; 0x9cc <_ZN6QTouch11cap_setLoadEh+0x352>

     case(0x17):
            FAN_ON();Socket_OFF();L3_ON();L2_ON();L1_ON();  break;
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7a4:	d9 c0       	rjmp	.+434    	; 0x958 <_ZN6QTouch11cap_setLoadEh+0x2de>

     case(0x18):
            FAN_ON();Socket_ON();L3_OFF();L2_OFF();L1_OFF();  break;
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7ac:	dc c0       	rjmp	.+440    	; 0x966 <_ZN6QTouch11cap_setLoadEh+0x2ec>

     case(0x19):
            FAN_ON();Socket_ON();L3_OFF();L2_OFF();L1_ON();  break;
     7ae:	ce 01       	movw	r24, r28
     7b0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7b4:	a7 cf       	rjmp	.-178    	; 0x704 <_ZN6QTouch11cap_setLoadEh+0x8a>

     case(0x1A):
            FAN_ON();Socket_ON();L3_OFF();L2_ON();L1_OFF();  break;
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7bc:	ad cf       	rjmp	.-166    	; 0x718 <_ZN6QTouch11cap_setLoadEh+0x9e>

     case(0x1B):
            FAN_ON();Socket_ON();L3_OFF();L2_ON();L1_ON();  break;
     7be:	ce 01       	movw	r24, r28
     7c0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7c4:	e2 c0       	rjmp	.+452    	; 0x98a <_ZN6QTouch11cap_setLoadEh+0x310>

     case(0x1C):
            FAN_ON();Socket_ON();L3_ON();L2_OFF();L1_OFF();  break;
     7c6:	ce 01       	movw	r24, r28
     7c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7cc:	e8 c0       	rjmp	.+464    	; 0x99e <_ZN6QTouch11cap_setLoadEh+0x324>
           
     case(0x1D):
            FAN_ON();Socket_ON();L3_ON();L2_OFF();L1_ON();  break;
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7d4:	eb c0       	rjmp	.+470    	; 0x9ac <_ZN6QTouch11cap_setLoadEh+0x332>

     case(0x1E):
            FAN_ON();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7dc:	f4 c0       	rjmp	.+488    	; 0x9c6 <_ZN6QTouch11cap_setLoadEh+0x34c>

     case(0x1F):
            FAN_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
     7e4:	fd c0       	rjmp	.+506    	; 0x9e0 <_ZN6QTouch11cap_setLoadEh+0x366>

     case(0x20):// master i/p ON    0010 0000                        Set to Level-2
                  Serial.println("Level - 2");
     7e6:	65 e2       	ldi	r22, 0x25	; 37
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	84 e3       	ldi	r24, 0x34	; 52
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
                  Level2_ON();Socket_OFF();L3_OFF();L2_OFF();L1_OFF();  break;
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     7f8:	87 c0       	rjmp	.+270    	; 0x908 <_ZN6QTouch11cap_setLoadEh+0x28e>
    
     case(0x21)://   0010 0001                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_OFF();L2_OFF();L1_ON();  break;
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     800:	8a c0       	rjmp	.+276    	; 0x916 <_ZN6QTouch11cap_setLoadEh+0x29c>
      
     case(0x22)://    0010 0010                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_OFF();L2_ON();L1_OFF();  break;
     802:	ce 01       	movw	r24, r28
     804:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     808:	8d c0       	rjmp	.+282    	; 0x924 <_ZN6QTouch11cap_setLoadEh+0x2aa>

     case(0x23)://    0010 0011                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;
     80a:	ce 01       	movw	r24, r28
     80c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     810:	90 c0       	rjmp	.+288    	; 0x932 <_ZN6QTouch11cap_setLoadEh+0x2b8>

     case(0x24)://    0010 0100                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;

     case(0x25)://    0010 0101                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     812:	ce 01       	movw	r24, r28
     814:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     818:	54 cf       	rjmp	.-344    	; 0x6c2 <_ZN6QTouch11cap_setLoadEh+0x48>

     case(0x26)://    0010 0110                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_ON();L2_ON();L1_OFF();  break;
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     820:	ba cf       	rjmp	.-140    	; 0x796 <_ZN6QTouch11cap_setLoadEh+0x11c>
    
    case(0x27)://    0010 0111                        Set to Level-2
                  Level2_ON();Socket_OFF();L3_ON();L2_ON();L1_ON();  break;
     822:	ce 01       	movw	r24, r28
     824:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     828:	97 c0       	rjmp	.+302    	; 0x958 <_ZN6QTouch11cap_setLoadEh+0x2de>

    case(0x28)://    0010 1000                        Set to Level-2
                  Level2_ON();Socket_ON();L3_OFF();L2_OFF();L1_OFF();  break;
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     830:	9a c0       	rjmp	.+308    	; 0x966 <_ZN6QTouch11cap_setLoadEh+0x2ec>

    case(0x29)://    0010 1001                        Set to Level-2
                   Level2_ON();Socket_ON();L3_OFF();L2_OFF();L1_ON();  break;
     832:	ce 01       	movw	r24, r28
     834:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     838:	65 cf       	rjmp	.-310    	; 0x704 <_ZN6QTouch11cap_setLoadEh+0x8a>

    case(0x2A)://    0010 1010                        Set to Level-2
                  Level2_ON();Socket_ON();L3_OFF();L2_ON();L1_OFF();  break;
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     840:	6b cf       	rjmp	.-298    	; 0x718 <_ZN6QTouch11cap_setLoadEh+0x9e>

    case(0x2B)://    0010 1011                        Set to Level-2
                  Level2_ON();Socket_ON();L3_OFF();L2_ON();L1_ON();  break;
     842:	ce 01       	movw	r24, r28
     844:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     848:	a0 c0       	rjmp	.+320    	; 0x98a <_ZN6QTouch11cap_setLoadEh+0x310>

    case(0x2C)://    0010 1100                        Set to Level-2
                  Level2_ON();Socket_ON();L3_ON();L2_OFF();L1_OFF();  break;
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     850:	a6 c0       	rjmp	.+332    	; 0x99e <_ZN6QTouch11cap_setLoadEh+0x324>

    case(0x2D)://    0010 1101                        Set to Level-2
                  Level2_ON();Socket_ON();L3_ON();L2_OFF();L1_ON();  break;
     852:	ce 01       	movw	r24, r28
     854:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     858:	a9 c0       	rjmp	.+338    	; 0x9ac <_ZN6QTouch11cap_setLoadEh+0x332>

    case(0x2E)://    0010 1110                        Set to Level-2
                  Level2_ON();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     860:	b2 c0       	rjmp	.+356    	; 0x9c6 <_ZN6QTouch11cap_setLoadEh+0x34c>

    case(0x2F)://    0010 1111                       Set to Level-2
                  Level2_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     862:	ce 01       	movw	r24, r28
     864:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
     868:	bb c0       	rjmp	.+374    	; 0x9e0 <_ZN6QTouch11cap_setLoadEh+0x366>

    case(0x30)://    0011 0000                        Set to Level-3
                  Serial.println("Level - 3");
     86a:	6f e2       	ldi	r22, 0x2F	; 47
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	84 e3       	ldi	r24, 0x34	; 52
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
                  Level3_ON();Socket_OFF();L3_OFF();L2_OFF();L1_OFF();  break;
     876:	ce 01       	movw	r24, r28
     878:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     87c:	45 c0       	rjmp	.+138    	; 0x908 <_ZN6QTouch11cap_setLoadEh+0x28e>

    case(0x31)://    0011 0001                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_OFF();L2_OFF();L1_ON();  break;
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     884:	48 c0       	rjmp	.+144    	; 0x916 <_ZN6QTouch11cap_setLoadEh+0x29c>

    case(0x32)://    0011 0010                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_OFF();L2_ON();L1_OFF();  break;
     886:	ce 01       	movw	r24, r28
     888:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     88c:	4b c0       	rjmp	.+150    	; 0x924 <_ZN6QTouch11cap_setLoadEh+0x2aa>

    case(0x33)://    0011 0011                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     894:	4e c0       	rjmp	.+156    	; 0x932 <_ZN6QTouch11cap_setLoadEh+0x2b8>

    case(0x34)://    0011 0100                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     896:	ce 01       	movw	r24, r28
     898:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     89c:	12 cf       	rjmp	.-476    	; 0x6c2 <_ZN6QTouch11cap_setLoadEh+0x48>

    case(0x35)://    0011 0101                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_ON();L2_OFF();L1_ON();  break;
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8a4:	71 cf       	rjmp	.-286    	; 0x788 <_ZN6QTouch11cap_setLoadEh+0x10e>

    case(0x36)://    0011 0110                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_ON();L2_ON();L1_OFF();  break;
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8ac:	74 cf       	rjmp	.-280    	; 0x796 <_ZN6QTouch11cap_setLoadEh+0x11c>

    case(0x37)://    0011 0111                        Set to Level-3
                  Level3_ON();Socket_OFF();L3_ON();L2_ON();L1_ON();  break;
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8b4:	51 c0       	rjmp	.+162    	; 0x958 <_ZN6QTouch11cap_setLoadEh+0x2de>

    case(0x38)://    0011 1000                      Set to Level-3
                  Level3_ON();Socket_ON();L3_OFF();L2_OFF();L1_OFF();  break;
     8b6:	ce 01       	movw	r24, r28
     8b8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8bc:	54 c0       	rjmp	.+168    	; 0x966 <_ZN6QTouch11cap_setLoadEh+0x2ec>

    case(0x39)://    0011 1001                        Set to Level-3
                  Level3_ON();Socket_ON();L3_OFF();L2_OFF();L1_ON();  break;
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8c4:	1f cf       	rjmp	.-450    	; 0x704 <_ZN6QTouch11cap_setLoadEh+0x8a>

    case(0x3A)://    0011 1010                        Set to Level-3
                  Level3_ON();Socket_ON();L3_OFF();L2_ON();L1_OFF();  break;
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8cc:	25 cf       	rjmp	.-438    	; 0x718 <_ZN6QTouch11cap_setLoadEh+0x9e>

    case(0x3B)://    0011 1011                       Set to Level-3
                  Level3_ON();Socket_ON();L3_OFF();L2_ON();L1_ON();  break;
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8d4:	5a c0       	rjmp	.+180    	; 0x98a <_ZN6QTouch11cap_setLoadEh+0x310>

    case(0x3C)://    0011 1100                        Set to Level-3
                  Level3_ON();Socket_ON();L3_ON();L2_OFF();L1_OFF();  break;
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8dc:	60 c0       	rjmp	.+192    	; 0x99e <_ZN6QTouch11cap_setLoadEh+0x324>

    case(0x3D)://    0011 1101                        Set to Level-3
                  Level3_ON();Socket_ON();L3_ON();L2_OFF();L1_ON();  break;
     8de:	ce 01       	movw	r24, r28
     8e0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8e4:	63 c0       	rjmp	.+198    	; 0x9ac <_ZN6QTouch11cap_setLoadEh+0x332>

    case(0x3E)://    0011 1110                        Set to Level-3
                  Level3_ON();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8ec:	6c c0       	rjmp	.+216    	; 0x9c6 <_ZN6QTouch11cap_setLoadEh+0x34c>

    case(0x3F)://    0011 1111                        Set to Level-3
                  Level3_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     8ee:	ce 01       	movw	r24, r28
     8f0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
     8f4:	75 c0       	rjmp	.+234    	; 0x9e0 <_ZN6QTouch11cap_setLoadEh+0x366>

     
    case(0x40)://    0100 0000                        Set to Level-4
                  Serial.println("Level - 4");
     8f6:	69 e3       	ldi	r22, 0x39	; 57
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	84 e3       	ldi	r24, 0x34	; 52
     8fc:	94 e0       	ldi	r25, 0x04	; 4
     8fe:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
                  Level4_ON();Socket_OFF();L3_OFF();L2_OFF();L1_OFF();  break;
     902:	ce 01       	movw	r24, r28
     904:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     90e:	2e c0       	rjmp	.+92     	; 0x96c <_ZN6QTouch11cap_setLoadEh+0x2f2>

    case(0x41)://    0100 0001                       Set to Level-4
                  Level4_ON();Socket_OFF();L3_OFF();L2_OFF();L1_ON();  break;
     910:	ce 01       	movw	r24, r28
     912:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     916:	ce 01       	movw	r24, r28
     918:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     91c:	f6 ce       	rjmp	.-532    	; 0x70a <_ZN6QTouch11cap_setLoadEh+0x90>

    case(0x42)://    0100 0010                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_OFF();L2_ON();L1_OFF();  break;
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     924:	ce 01       	movw	r24, r28
     926:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     92a:	f9 ce       	rjmp	.-526    	; 0x71e <_ZN6QTouch11cap_setLoadEh+0xa4>

    case(0x43)://    0100 0011                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_OFF();L2_ON();L1_ON();  break;
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     932:	ce 01       	movw	r24, r28
     934:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     938:	2b c0       	rjmp	.+86     	; 0x990 <_ZN6QTouch11cap_setLoadEh+0x316>

    case(0x44)://    0100 0100                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_ON();L2_OFF();L1_OFF();  break;
     93a:	ce 01       	movw	r24, r28
     93c:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     940:	c0 ce       	rjmp	.-640    	; 0x6c2 <_ZN6QTouch11cap_setLoadEh+0x48>

    case(0x45)://    0100 0101                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_ON();L2_OFF();L1_ON();  break;
     942:	ce 01       	movw	r24, r28
     944:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     948:	1f cf       	rjmp	.-450    	; 0x788 <_ZN6QTouch11cap_setLoadEh+0x10e>

    case(0x46)://    0100 0110                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_ON();L2_ON();L1_OFF();  break;
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     950:	22 cf       	rjmp	.-444    	; 0x796 <_ZN6QTouch11cap_setLoadEh+0x11c>

    case(0x47)://    0100 0111                        Set to Level-4
                  Level4_ON();Socket_OFF();L3_ON();L2_ON();L1_ON();  break;
     952:	ce 01       	movw	r24, r28
     954:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN6QTouch10Socket_OFFEv>
     95e:	43 c0       	rjmp	.+134    	; 0x9e6 <_ZN6QTouch11cap_setLoadEh+0x36c>

    case(0x48)://    0100 1000                        Set to Level-4
                  Level4_ON();Socket_ON();L3_OFF();L2_OFF();L1_OFF();  break;
     960:	ce 01       	movw	r24, r28
     962:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     966:	ce 01       	movw	r24, r28
     968:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6QTouch6L3_OFFEv>
     972:	ad ce       	rjmp	.-678    	; 0x6ce <_ZN6QTouch11cap_setLoadEh+0x54>

    case(0x49)://    0100 1001                        Set to Level-4
                  Level4_ON();Socket_ON();L3_OFF();L2_OFF();L1_ON();  break;
     974:	ce 01       	movw	r24, r28
     976:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     97a:	c4 ce       	rjmp	.-632    	; 0x704 <_ZN6QTouch11cap_setLoadEh+0x8a>

    case(0x4A)://    0100 1010                        Set to Level-4
                  Level4_ON();Socket_ON();L3_OFF();L2_ON();L1_OFF();  break;
     97c:	ce 01       	movw	r24, r28
     97e:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     982:	ca ce       	rjmp	.-620    	; 0x718 <_ZN6QTouch11cap_setLoadEh+0x9e>

    case(0x4B)://    0100 1011                        Set to Level-4
                  Level4_ON();Socket_ON();L3_OFF();L2_ON();L1_ON();  break;
     984:	ce 01       	movw	r24, r28
     986:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     98a:	ce 01       	movw	r24, r28
     98c:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     990:	ce 01       	movw	r24, r28
     992:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6QTouch6L3_OFFEv>
     996:	2a c0       	rjmp	.+84     	; 0x9ec <_ZN6QTouch11cap_setLoadEh+0x372>

    case(0x4C)://    0100 1100                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_OFF();L1_OFF();  break;
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     99e:	ce 01       	movw	r24, r28
     9a0:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     9a4:	91 ce       	rjmp	.-734    	; 0x6c8 <_ZN6QTouch11cap_setLoadEh+0x4e>

    case(0x4D)://    0100 1101                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_OFF();L1_ON();  break;
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     9ac:	ce 01       	movw	r24, r28
     9ae:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6QTouch5L3_ONEv>
     9b8:	ce 01       	movw	r24, r28
     9ba:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN6QTouch6L2_OFFEv>
     9be:	19 c0       	rjmp	.+50     	; 0x9f2 <_ZN6QTouch11cap_setLoadEh+0x378>

    case(0x4E)://    0100 1110                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6QTouch5L3_ONEv>
     9d2:	ce 01       	movw	r24, r28
     9d4:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN6QTouch5L2_ONEv>
     9d8:	7d ce       	rjmp	.-774    	; 0x6d4 <_ZN6QTouch11cap_setLoadEh+0x5a>

    case(0x4F)://    0100 1111                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN6QTouch9Socket_ONEv>
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6QTouch5L3_ONEv>
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN6QTouch5L2_ONEv>
     9f2:	ce 01       	movw	r24, r28

    }
          
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28

    case(0x4E)://    0100 1110                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_OFF();  break;

    case(0x4F)://    0100 1111                        Set to Level-4
                  Level4_ON();Socket_ON();L3_ON();L2_ON();L1_ON();  break;
     9f8:	0c 94 03 02 	jmp	0x406	; 0x406 <_ZN6QTouch5L1_ONEv>

    }
          
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <_ZN6QTouch14readLoadstatusEv>:

byte QTouch::readLoadstatus(void)
{
     a02:	4f 92       	push	r4
     a04:	5f 92       	push	r5
     a06:	6f 92       	push	r6
     a08:	7f 92       	push	r7
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	28 97       	sbiw	r28, 0x08	; 8
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
  //read output pins status
  
  boolean s1 = digitalRead(Load1);
     a32:	8e e0       	ldi	r24, 0x0E	; 14
     a34:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a38:	3c 01       	movw	r6, r24
  boolean s2 = digitalRead(Load2);
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a40:	4c 01       	movw	r8, r24
  boolean s3 = digitalRead(Load3);
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a48:	5c 01       	movw	r10, r24
  boolean s4 = digitalRead(Load4);
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a50:	6c 01       	movw	r12, r24
  boolean s5 = digitalRead(Level1);
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a58:	7c 01       	movw	r14, r24
  boolean s6 = digitalRead(Level2);
     a5a:	8d e0       	ldi	r24, 0x0D	; 13
     a5c:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a60:	8c 01       	movw	r16, r24
  boolean s7 = digitalRead(Level3);
     a62:	82 e1       	ldi	r24, 0x12	; 18
     a64:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a68:	2c 01       	movw	r4, r24
  boolean s8 = digitalRead(Level4);
     a6a:	83 e1       	ldi	r24, 0x13	; 19
     a6c:	0e 94 56 19 	call	0x32ac	; 0x32ac <digitalRead>
     a70:	9c 01       	movw	r18, r24

byte QTouch::readLoadstatus(void)
{
  //read output pins status
  
  boolean s1 = digitalRead(Load1);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	67 28       	or	r6, r7
     a76:	09 f4       	brne	.+2      	; 0xa7a <_ZN6QTouch14readLoadstatusEv+0x78>
     a78:	80 e0       	ldi	r24, 0x00	; 0
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     a7a:	89 83       	std	Y+1, r24	; 0x01
byte QTouch::readLoadstatus(void)
{
  //read output pins status
  
  boolean s1 = digitalRead(Load1);
  boolean s2 = digitalRead(Load2);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	89 28       	or	r8, r9
     a80:	09 f4       	brne	.+2      	; 0xa84 <_ZN6QTouch14readLoadstatusEv+0x82>
     a82:	80 e0       	ldi	r24, 0x00	; 0
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     a84:	8a 83       	std	Y+2, r24	; 0x02
{
  //read output pins status
  
  boolean s1 = digitalRead(Load1);
  boolean s2 = digitalRead(Load2);
  boolean s3 = digitalRead(Load3);
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	ab 28       	or	r10, r11
     a8a:	09 f4       	brne	.+2      	; 0xa8e <_ZN6QTouch14readLoadstatusEv+0x8c>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     a8e:	8b 83       	std	Y+3, r24	; 0x03
  //read output pins status
  
  boolean s1 = digitalRead(Load1);
  boolean s2 = digitalRead(Load2);
  boolean s3 = digitalRead(Load3);
  boolean s4 = digitalRead(Load4);
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	cd 28       	or	r12, r13
     a94:	09 f4       	brne	.+2      	; 0xa98 <_ZN6QTouch14readLoadstatusEv+0x96>
     a96:	80 e0       	ldi	r24, 0x00	; 0
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     a98:	8c 83       	std	Y+4, r24	; 0x04
  
  boolean s1 = digitalRead(Load1);
  boolean s2 = digitalRead(Load2);
  boolean s3 = digitalRead(Load3);
  boolean s4 = digitalRead(Load4);
  boolean s5 = digitalRead(Level1);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	ef 28       	or	r14, r15
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <_ZN6QTouch14readLoadstatusEv+0xa0>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     aa2:	8d 83       	std	Y+5, r24	; 0x05
  boolean s1 = digitalRead(Load1);
  boolean s2 = digitalRead(Load2);
  boolean s3 = digitalRead(Load3);
  boolean s4 = digitalRead(Load4);
  boolean s5 = digitalRead(Level1);
  boolean s6 = digitalRead(Level2);
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	01 2b       	or	r16, r17
     aa8:	09 f4       	brne	.+2      	; 0xaac <_ZN6QTouch14readLoadstatusEv+0xaa>
     aaa:	90 e0       	ldi	r25, 0x00	; 0
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     aac:	9e 83       	std	Y+6, r25	; 0x06
  boolean s2 = digitalRead(Load2);
  boolean s3 = digitalRead(Load3);
  boolean s4 = digitalRead(Load4);
  boolean s5 = digitalRead(Level1);
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	45 28       	or	r4, r5
     ab2:	09 f4       	brne	.+2      	; 0xab6 <_ZN6QTouch14readLoadstatusEv+0xb4>
     ab4:	90 e0       	ldi	r25, 0x00	; 0
  boolean s8 = digitalRead(Level4);
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     ab6:	9f 83       	std	Y+7, r25	; 0x07
  boolean s3 = digitalRead(Load3);
  boolean s4 = digitalRead(Load4);
  boolean s5 = digitalRead(Level1);
  boolean s6 = digitalRead(Level2);
  boolean s7 = digitalRead(Level3);
  boolean s8 = digitalRead(Level4);
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	23 2b       	or	r18, r19
     abc:	09 f4       	brne	.+2      	; 0xac0 <_ZN6QTouch14readLoadstatusEv+0xbe>
     abe:	90 e0       	ldi	r25, 0x00	; 0
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
     ac0:	98 87       	std	Y+8, r25	; 0x08
     ac2:	fe 01       	movw	r30, r28
     ac4:	31 96       	adiw	r30, 0x01	; 1
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
  byte val=0;
     aca:	80 e0       	ldi	r24, 0x00	; 0
  
  for(uint8_t i=0;i<=7;i++)
  {
    val|= (no[i]<< i);    //convert bits to byte
     acc:	21 91       	ld	r18, Z+
     ace:	04 2e       	mov	r0, r20
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <_ZN6QTouch14readLoadstatusEv+0xd2>
     ad2:	22 0f       	add	r18, r18
     ad4:	0a 94       	dec	r0
     ad6:	ea f7       	brpl	.-6      	; 0xad2 <_ZN6QTouch14readLoadstatusEv+0xd0>
     ad8:	82 2b       	or	r24, r18
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
 
              //LSB......... ........MSB
  byte no[8] = {s1,s2,s3,s4,s5,s6,s7,s8};
  byte val=0;
  
  for(uint8_t i=0;i<=7;i++)
     ade:	48 30       	cpi	r20, 0x08	; 8
     ae0:	51 05       	cpc	r21, r1
     ae2:	a1 f7       	brne	.-24     	; 0xacc <_ZN6QTouch14readLoadstatusEv+0xca>
    val|= (no[i]<< i);    //convert bits to byte
  }
      
  //Serial.pruint8_t(val);
  return val;
}
     ae4:	28 96       	adiw	r28, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	08 95       	ret

00000b12 <_GLOBAL__sub_I_mystatus>:
#include "HBT.h"
//#include "RTClib.h"


//RTC_DS1307 myRTC;
BLE mystatus;
     b12:	8f e4       	ldi	r24, 0x4F	; 79
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0c 94 90 01 	jmp	0x320	; 0x320 <_ZN3BLEC1Ev>

00000b1a <_ZN11EEPROMClass5writeEih.isra.1>:
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     b1a:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <eeprom_write_byte>

00000b1e <setup>:
uint8_t device2_offTime_adr=207, device3_offTime_adr =505, device4_offTime_adr=622, device5_offTime_adr=822;
bool d1_onFlag = false,d2_onFlag = false,d3_onFlag = false,d4_onFlag = false,d5_onFlag = false; 
bool d1_offFlag = false,d2_offFlag = false,d3_offFlag = false,d4_offFlag = false,d5_offFlag = false;

void setup()
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	00 d0       	rcall	.+0      	; 0xb28 <setup+0xa>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <setup+0xc>
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <setup+0xe>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	Serial.begin(9600);
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	55 e2       	ldi	r21, 0x25	; 37
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	84 e3       	ldi	r24, 0x34	; 52
     b3a:	94 e0       	ldi	r25, 0x04	; 4
     b3c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <_ZN7Serial_5beginEm>
	myHBT.begin(9600);
     b40:	40 e8       	ldi	r20, 0x80	; 128
     b42:	55 e2       	ldi	r21, 0x25	; 37
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	8f e6       	ldi	r24, 0x6F	; 111
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN3HBT5beginEl>

	myHBT.enterCommandMode();
     b50:	8f e6       	ldi	r24, 0x6F	; 111
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN3HBT16enterCommandModeEv>

	myHBT.setName("Bed Room");
     b58:	63 e4       	ldi	r22, 0x43	; 67
     b5a:	71 e0       	ldi	r23, 0x01	; 1
     b5c:	8f e6       	ldi	r24, 0x6F	; 111
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_ZN3HBT7setNameEPc>
	myHBT.setTransmissionPower(Six);
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	8f e6       	ldi	r24, 0x6F	; 111
     b6a:	93 e0       	ldi	r25, 0x03	; 3
     b6c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN3HBT20setTransmissionPowerEi>
	myHBT.setWorkRole(SLAVE);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	8f e6       	ldi	r24, 0x6F	; 111
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN3HBT11setWorkRoleEi>
	myHBT.setAuth(OPEN);
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	8f e6       	ldi	r24, 0x6F	; 111
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN3HBT7setAuthEi>
	myHBT.setWorkMode(REMOTE_CONTROL);
     b88:	62 e0       	ldi	r22, 0x02	; 2
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	8f e6       	ldi	r24, 0x6F	; 111
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN3HBT11setWorkModeEi>
	myHBT.setiBeaconMode(On);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	8f e6       	ldi	r24, 0x6F	; 111
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN3HBT14setiBeaconModeEi>
	
	myHBT.exitCommandMode();
     ba0:	8f e6       	ldi	r24, 0x6F	; 111
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_ZN3HBT15exitCommandModeEv>
	
	myTouch.gpioInit();    // set all pins
     ba8:	88 e6       	ldi	r24, 0x68	; 104
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6QTouch8gpioInitEv>
	
	if (! rtc.begin()) {					// very important to begin RTC
     bb0:	83 e7       	ldi	r24, 0x73	; 115
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN10RTC_DS13075beginEv>
     bb8:	81 11       	cpse	r24, r1
     bba:	07 c0       	rjmp	.+14     	; 0xbca <setup+0xac>
		Serial.println("Couldn't find RTC");
     bbc:	6c e4       	ldi	r22, 0x4C	; 76
     bbe:	71 e0       	ldi	r23, 0x01	; 1
     bc0:	84 e3       	ldi	r24, 0x34	; 52
     bc2:	94 e0       	ldi	r25, 0x04	; 4
     bc4:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
	
	myHBT.exitCommandMode();
	
	myTouch.gpioInit();    // set all pins
	
	if (! rtc.begin()) {					// very important to begin RTC
     bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <setup+0xaa>
		Serial.println("Couldn't find RTC");
		while (1);
	}
	
	if (! rtc.isrunning()) {
     bca:	83 e7       	ldi	r24, 0x73	; 115
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN10RTC_DS13079isrunningEv>
     bd2:	81 11       	cpse	r24, r1
     bd4:	12 c0       	rjmp	.+36     	; 0xbfa <setup+0xdc>
		Serial.println("RTC is NOT running!");
     bd6:	6e e5       	ldi	r22, 0x5E	; 94
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	84 e3       	ldi	r24, 0x34	; 52
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this sketch was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     be2:	4c e9       	ldi	r20, 0x9C	; 156
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	60 e9       	ldi	r22, 0x90	; 144
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN10RTC_DS13076adjustERK8DateTime>
uint8_t device2_offTime_adr=207, device3_offTime_adr =505, device4_offTime_adr=622, device5_offTime_adr=822;
bool d1_onFlag = false,d2_onFlag = false,d3_onFlag = false,d4_onFlag = false,d5_onFlag = false; 
bool d1_offFlag = false,d2_offFlag = false,d3_offFlag = false,d4_offFlag = false,d5_offFlag = false;

void setup()
{
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
		//rtc.adjust(DateTime(2016, 5, 24, 16, 05, 0));
	}
	
	for (int addr = 0; addr <= EEPROM.length(); addr++)	//Clears the EEPROM
	{  
		EEPROM.write(addr,0);	
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN11EEPROMClass5writeEih.isra.1>
		// This line sets the RTC with an explicit date & time, for example to set
		// January 21, 2014 at 3am you would call:
		//rtc.adjust(DateTime(2016, 5, 24, 16, 05, 0));
	}
	
	for (int addr = 0; addr <= EEPROM.length(); addr++)	//Clears the EEPROM
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	01 30       	cpi	r16, 0x01	; 1
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	18 07       	cpc	r17, r24
     c10:	b1 f7       	brne	.-20     	; 0xbfe <setup+0xe0>
	{  
		EEPROM.write(addr,0);	
		//myHBT.print("A:");myHBT.print(addr);
	}
	
	DDRD |= (1<<DDD6);
     c12:	56 9a       	sbi	0x0a, 6	; 10
	
}
     c14:	26 96       	adiw	r28, 0x06	; 6
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <loop>:

void loop()
{  
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <loop+0x6>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <loop+0x8>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <loop+0xa>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
   sei();				// Global Interrupts Enable 
     c38:	78 94       	sei
   touch_input = myTouch.readCapsense();  //Read capsense values
     c3a:	88 e6       	ldi	r24, 0x68	; 104
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN6QTouch12readCapsenseEv>
     c42:	80 93 61 03 	sts	0x0361, r24
   
   touch_input = touch_input ;
     c46:	80 91 61 03 	lds	r24, 0x0361
     c4a:	80 93 61 03 	sts	0x0361, r24
   //myHBT.print(touch_input,HEX);
   
   DateTime now = rtc.now();		// This has to be in while(1)
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN10RTC_DS13073nowEv>
   myHBT.print("B2:"); myHBT.print(offTime_byte_2,HEX);
   myHBT.print("B1:"); myHBT.print(offTime_byte_1,HEX);
   myHBT.print("B0:"); myHBT.print(offTime_byte_0,HEX);
	*/  
  
   if(myHBT.available()>0)                //phone connected and Rx commands
     c56:	8f e6       	ldi	r24, 0x6F	; 111
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN3HBT9availableEv>
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <loop+0x3a>
     c62:	d2 c0       	rjmp	.+420    	; 0xe08 <loop+0x1de>
   {
	   Pin_Type = myHBT.parseInt();
     c64:	8f e6       	ldi	r24, 0x6F	; 111
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN3HBT8parseIntEv>
     c6c:	90 93 67 03 	sts	0x0367, r25
     c70:	80 93 66 03 	sts	0x0366, r24
	   Pin_No = myHBT.parseInt();
     c74:	8f e6       	ldi	r24, 0x6F	; 111
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN3HBT8parseIntEv>
     c7c:	90 93 65 03 	sts	0x0365, r25
     c80:	80 93 64 03 	sts	0x0364, r24
	   Pin_Value = myHBT.parseInt();
     c84:	8f e6       	ldi	r24, 0x6F	; 111
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN3HBT8parseIntEv>
     c8c:	90 93 63 03 	sts	0x0363, r25
     c90:	80 93 62 03 	sts	0x0362, r24
	   //Serial.print(Pin_No);
	   //Serial.print(",");
	   //Serial.println(Pin_Value);
	   //Serial.print("I am Here");
	   // myTouch.LightControl(Pin_No,Pin_Value);
	   if(myHBT.read() =='H')                      // detects end line character "H"
     c94:	8f e6       	ldi	r24, 0x6F	; 111
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN3HBT4readEv>
     c9c:	88 34       	cpi	r24, 0x48	; 72
     c9e:	91 05       	cpc	r25, r1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <loop+0x7a>
     ca2:	9e c0       	rjmp	.+316    	; 0xde0 <loop+0x1b6>
	   {
		   //Serial.print("I am in if.read()");
		   //if Pin Type is 0 means Digital Output
		   switch(Pin_Type)
     ca4:	80 91 66 03 	lds	r24, 0x0366
     ca8:	90 91 67 03 	lds	r25, 0x0367
     cac:	8f 36       	cpi	r24, 0x6F	; 111
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <loop+0x8a>
     cb2:	92 c0       	rjmp	.+292    	; 0xdd8 <loop+0x1ae>
     cb4:	1c f4       	brge	.+6      	; 0xcbc <loop+0x92>
     cb6:	89 2b       	or	r24, r25
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <loop+0xac>
     cba:	92 c0       	rjmp	.+292    	; 0xde0 <loop+0x1b6>
     cbc:	8e 3d       	cpi	r24, 0xDE	; 222
     cbe:	91 05       	cpc	r25, r1
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <loop+0x9a>
     cc2:	85 c0       	rjmp	.+266    	; 0xdce <loop+0x1a4>
     cc4:	87 3e       	cpi	r24, 0xE7	; 231
     cc6:	93 40       	sbci	r25, 0x03	; 3
     cc8:	09 f0       	breq	.+2      	; 0xccc <loop+0xa2>
     cca:	8a c0       	rjmp	.+276    	; 0xde0 <loop+0x1b6>
			   case(111):
			   myTouch.Master_ON();
			   //Serial.println("Master ON");
			   break;
			   case(999):
			   myTouch.Master_OFF();
     ccc:	88 e6       	ldi	r24, 0x68	; 104
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN6QTouch10Master_OFFEv>
			   //Serial.println("Master OFF");
			   break;
     cd4:	85 c0       	rjmp	.+266    	; 0xde0 <loop+0x1b6>
		   //Serial.print("I am in if.read()");
		   //if Pin Type is 0 means Digital Output
		   switch(Pin_Type)
		   {
			   case(0):
			   if((Pin_No == Level1 || Pin_No == Level2 || Pin_No == Level3 || Pin_No == Level4) && (Pin_Value == 1))    // Any one Level is selected and Value set to HIGH
     cd6:	80 91 64 03 	lds	r24, 0x0364
     cda:	90 91 65 03 	lds	r25, 0x0365
     cde:	9c 01       	movw	r18, r24
     ce0:	27 7f       	andi	r18, 0xF7	; 247
     ce2:	25 30       	cpi	r18, 0x05	; 5
     ce4:	31 05       	cpc	r19, r1
     ce6:	39 f0       	breq	.+14     	; 0xcf6 <loop+0xcc>
     ce8:	9c 01       	movw	r18, r24
     cea:	22 51       	subi	r18, 0x12	; 18
     cec:	31 09       	sbc	r19, r1
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <loop+0xcc>
     cf4:	67 c0       	rjmp	.+206    	; 0xdc4 <loop+0x19a>
     cf6:	20 91 62 03 	lds	r18, 0x0362
     cfa:	30 91 63 03 	lds	r19, 0x0363
     cfe:	21 30       	cpi	r18, 0x01	; 1
     d00:	31 05       	cpc	r19, r1
     d02:	09 f0       	breq	.+2      	; 0xd06 <loop+0xdc>
     d04:	5f c0       	rjmp	.+190    	; 0xdc4 <loop+0x19a>
			   { Serial.print("In Case 0");
     d06:	62 e7       	ldi	r22, 0x72	; 114
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	84 e3       	ldi	r24, 0x34	; 52
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
				   if(Pin_No == Level1 && Pin_Value ==1){ Serial.print("Level 1");myTouch.FAN_ON();}       //  Level 1 ON
     d12:	80 91 64 03 	lds	r24, 0x0364
     d16:	90 91 65 03 	lds	r25, 0x0365
     d1a:	05 97       	sbiw	r24, 0x05	; 5
     d1c:	81 f4       	brne	.+32     	; 0xd3e <loop+0x114>
     d1e:	80 91 62 03 	lds	r24, 0x0362
     d22:	90 91 63 03 	lds	r25, 0x0363
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	51 f4       	brne	.+20     	; 0xd3e <loop+0x114>
     d2a:	6c e7       	ldi	r22, 0x7C	; 124
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	84 e3       	ldi	r24, 0x34	; 52
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
     d36:	88 e6       	ldi	r24, 0x68	; 104
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6QTouch6FAN_ONEv>
				   if(Pin_No == Level2 && Pin_Value ==1){ Serial.print("Level 2");myTouch.Level2_ON();}    //  Level 2 ON
     d3e:	80 91 64 03 	lds	r24, 0x0364
     d42:	90 91 65 03 	lds	r25, 0x0365
     d46:	0d 97       	sbiw	r24, 0x0d	; 13
     d48:	81 f4       	brne	.+32     	; 0xd6a <loop+0x140>
     d4a:	80 91 62 03 	lds	r24, 0x0362
     d4e:	90 91 63 03 	lds	r25, 0x0363
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	51 f4       	brne	.+20     	; 0xd6a <loop+0x140>
     d56:	64 e8       	ldi	r22, 0x84	; 132
     d58:	71 e0       	ldi	r23, 0x01	; 1
     d5a:	84 e3       	ldi	r24, 0x34	; 52
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
     d62:	88 e6       	ldi	r24, 0x68	; 104
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6QTouch9Level2_ONEv>
				   if(Pin_No == Level3 && Pin_Value ==1) {Serial.print("Level 3");myTouch.Level3_ON();}    //  Level 3 ON
     d6a:	80 91 64 03 	lds	r24, 0x0364
     d6e:	90 91 65 03 	lds	r25, 0x0365
     d72:	42 97       	sbiw	r24, 0x12	; 18
     d74:	81 f4       	brne	.+32     	; 0xd96 <loop+0x16c>
     d76:	80 91 62 03 	lds	r24, 0x0362
     d7a:	90 91 63 03 	lds	r25, 0x0363
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	51 f4       	brne	.+20     	; 0xd96 <loop+0x16c>
     d82:	6c e8       	ldi	r22, 0x8C	; 140
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	84 e3       	ldi	r24, 0x34	; 52
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6QTouch9Level3_ONEv>
				   if(Pin_No == Level4 && Pin_Value ==1) {Serial.print("Level 4");myTouch.Level4_ON();}    //  Level 4 ON
     d96:	80 91 64 03 	lds	r24, 0x0364
     d9a:	90 91 65 03 	lds	r25, 0x0365
     d9e:	43 97       	sbiw	r24, 0x13	; 19
     da0:	f9 f4       	brne	.+62     	; 0xde0 <loop+0x1b6>
     da2:	80 91 62 03 	lds	r24, 0x0362
     da6:	90 91 63 03 	lds	r25, 0x0363
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	c9 f4       	brne	.+50     	; 0xde0 <loop+0x1b6>
     dae:	64 e9       	ldi	r22, 0x94	; 148
     db0:	71 e0       	ldi	r23, 0x01	; 1
     db2:	84 e3       	ldi	r24, 0x34	; 52
     db4:	94 e0       	ldi	r25, 0x04	; 4
     db6:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
     dba:	88 e6       	ldi	r24, 0x68	; 104
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6QTouch9Level4_ONEv>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <loop+0x1b6>
			   }
			   
			   else
			   digitalWrite(Pin_No,Pin_Value); break;                // Relay ON/OFF
     dc4:	60 91 62 03 	lds	r22, 0x0362
     dc8:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <loop+0x1b6>
			   
			   case(222):myTouch.FAN_OFF();              // FAN OFF
     dce:	88 e6       	ldi	r24, 0x68	; 104
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 23 02 	call	0x446	; 0x446 <_ZN6QTouch7FAN_OFFEv>
			   //Serial.print("FAN OFF");
			   break;
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <loop+0x1b6>
			   
			   case(111):
			   myTouch.Master_ON();
     dd8:	88 e6       	ldi	r24, 0x68	; 104
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN6QTouch9Master_ONEv>
			   break;
			   
		   }
		   
	   }
	   curr_load_output_status = myTouch.readLoadstatus();myHBT.print("v:");
     de0:	88 e6       	ldi	r24, 0x68	; 104
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN6QTouch14readLoadstatusEv>
     de8:	80 93 5b 03 	sts	0x035B, r24
     dec:	6c e9       	ldi	r22, 0x9C	; 156
     dee:	71 e0       	ldi	r23, 0x01	; 1
     df0:	8f e6       	ldi	r24, 0x6F	; 111
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>
	   myHBT.print(curr_load_output_status);  //Output Status To update into Smart-phone app to display current status of lights
     df8:	60 91 5b 03 	lds	r22, 0x035B
     dfc:	4a e0       	ldi	r20, 0x0A	; 10
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	8f e6       	ldi	r24, 0x6F	; 111
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN3HBT5printEhi>
	    
	
   }
   
   
    if(touch_input ^ prev_touch_input )		// Cap sense Inputs
     e08:	90 91 61 03 	lds	r25, 0x0361
     e0c:	80 91 60 03 	lds	r24, 0x0360
     e10:	98 17       	cp	r25, r24
     e12:	a9 f1       	breq	.+106    	; 0xe7e <loop+0x254>
	//myHBT.print(now.minute(), DEC);
    //when BLE is not connected and signals coming from IR Remote and Cap sense Board
    //Serial.print("Prev Touch:");Serial.println(prev_touch_input,HEX);
    //Serial.print("Touch_input:");Serial.println(touch_input,HEX);
    
    temp=touch_input;       // current status byte 
     e14:	80 91 61 03 	lds	r24, 0x0361
     e18:	80 93 5f 03 	sts	0x035F, r24
    change = prev_touch_input ^ touch_input;    //if there is a change in state then o/p = !0 
     e1c:	80 91 60 03 	lds	r24, 0x0360
     e20:	90 91 61 03 	lds	r25, 0x0361
     e24:	89 27       	eor	r24, r25
     e26:	80 93 5e 03 	sts	0x035E, r24
   // Serial.print("Temp:");Serial.println(temp);
    new_state    = change & curr_load_output_status;
     e2a:	80 91 5e 03 	lds	r24, 0x035E
     e2e:	90 91 5b 03 	lds	r25, 0x035B
     e32:	89 23       	and	r24, r25
     e34:	80 93 5d 03 	sts	0x035D, r24
    myTouch.cap_setLoad(temp);          //switch as per new_state
     e38:	60 91 5f 03 	lds	r22, 0x035F
     e3c:	88 e6       	ldi	r24, 0x68	; 104
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6QTouch11cap_setLoadEh>
    
	curr_load_output_status = myTouch.readLoadstatus() ;      // Output status of Loads
     e44:	88 e6       	ldi	r24, 0x68	; 104
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN6QTouch14readLoadstatusEv>
     e4c:	80 93 5b 03 	sts	0x035B, r24
	myHBT.print("LO:");myHBT.print(curr_load_output_status);
     e50:	6f e9       	ldi	r22, 0x9F	; 159
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	8f e6       	ldi	r24, 0x6F	; 111
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>
     e5c:	60 91 5b 03 	lds	r22, 0x035B
     e60:	4a e0       	ldi	r20, 0x0A	; 10
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	8f e6       	ldi	r24, 0x6F	; 111
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN3HBT5printEhi>
		
	prev_load_output_status = (curr_load_output_status & 0x0F);
     e6c:	80 91 5b 03 	lds	r24, 0x035B
     e70:	8f 70       	andi	r24, 0x0F	; 15
     e72:	80 93 5c 03 	sts	0x035C, r24
	
	prev_touch_input = touch_input;
     e76:	80 91 61 03 	lds	r24, 0x0361
     e7a:	80 93 60 03 	sts	0x0360, r24
  }
  
  //myHBT.print("LOT:");myHBT.print(curr_load_output_status & 0x0F);
  // Note: Day month year DD:MM HH:Min 
  
 myHBT.print("B3:");myHBT.print(EEPROM.read(3),HEX);		//returns total no of seconds, since standard epoch of  
     e7e:	63 ea       	ldi	r22, 0xA3	; 163
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	8f e6       	ldi	r24, 0x6F	; 111
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <eeprom_read_byte>
     e92:	40 e1       	ldi	r20, 0x10	; 16
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	68 2f       	mov	r22, r24
     e98:	8f e6       	ldi	r24, 0x6F	; 111
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN3HBT5printEhi>

  if (curr_load_output_status ^ prev_load_output_status )		// we can use X-OR 0 0 -> 0, 1 x -> 1 ,0 x -> 1
     ea0:	90 91 5b 03 	lds	r25, 0x035B
     ea4:	80 91 5c 03 	lds	r24, 0x035C
     ea8:	98 17       	cp	r25, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <loop+0x284>
     eac:	40 c0       	rjmp	.+128    	; 0xf2e <loop+0x304>
  {
	  //curr_load_output_status = curr_load_output_status; // Masking for SWitches only
	  myHBT.print("Out:");myHBT.print(curr_load_output_status);
     eae:	67 ea       	ldi	r22, 0xA7	; 167
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	8f e6       	ldi	r24, 0x6F	; 111
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>
     eba:	60 91 5b 03 	lds	r22, 0x035B
     ebe:	4a e0       	ldi	r20, 0x0A	; 10
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	8f e6       	ldi	r24, 0x6F	; 111
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN3HBT5printEhi>
    
		switch(curr_load_output_status)				// output state
     eca:	80 91 5b 03 	lds	r24, 0x035B
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	21 f1       	breq	.+72     	; 0xf1a <loop+0x2f0>
     ed2:	48 f0       	brcs	.+18     	; 0xee6 <loop+0x2bc>
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	39 f5       	brne	.+78     	; 0xf26 <loop+0x2fc>
				 
				 delay(2000);							
				 break;
	  
		 case(0x02):
				myHBT.print("In 2:");
     ed8:	64 eb       	ldi	r22, 0xB4	; 180
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	8f e6       	ldi	r24, 0x6F	; 111
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>
     ee4:	1a c0       	rjmp	.+52     	; 0xf1a <loop+0x2f0>
	  myHBT.print("Out:");myHBT.print(curr_load_output_status);
    
		switch(curr_load_output_status)				// output state
	   {
		  case(0x00):
				 myHBT.print("In Zero");
     ee6:	6c ea       	ldi	r22, 0xAC	; 172
     ee8:	71 e0       	ldi	r23, 0x01	; 1
     eea:	8f e6       	ldi	r24, 0x6F	; 111
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN3HBT5printEPKc>
				time = now.unixtime();
     ef2:	ce 01       	movw	r24, r28
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	0e 94 76 08 	call	0x10ec	; 0x10ec <_ZNK8DateTime8unixtimeEv>
     efa:	60 93 57 03 	sts	0x0357, r22
     efe:	70 93 58 03 	sts	0x0358, r23
     f02:	80 93 59 03 	sts	0x0359, r24
     f06:	90 93 5a 03 	sts	0x035A, r25
				
				mask_byte_0 = time & 0x000000FF;		    //masking Lower
     f0a:	60 93 56 03 	sts	0x0356, r22
				mask_byte_1 = (time & 0x0000FF00) >> 8;		//masking byte1 & shift it
     f0e:	70 93 55 03 	sts	0x0355, r23
				mask_byte_2 = (time & 0x00FF0000) >> 16;		//masking byte2 & shift it
     f12:	80 93 54 03 	sts	0x0354, r24
				mask_byte_3 = (time & 0xFF000000) >> 24;		//masking byte2 & shift it
     f16:	90 93 53 03 	sts	0x0353, r25
				 delay(2000);							
				 break;
	  
		 case(0x02):
				myHBT.print("In 2:");
				delay(2000);		
     f1a:	60 ed       	ldi	r22, 0xD0	; 208
     f1c:	77 e0       	ldi	r23, 0x07	; 7
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 1b 18 	call	0x3036	; 0x3036 <delay>
				break;
	   }
  
    prev_load_output_status = curr_load_output_status;
     f26:	80 91 5b 03 	lds	r24, 0x035B
     f2a:	80 93 5c 03 	sts	0x035C, r24
  
 } 
  
  delay(500);    //Update Rate
     f2e:	64 ef       	ldi	r22, 0xF4	; 244
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 1b 18 	call	0x3036	; 0x3036 <delay>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     f3a:	98 e2       	ldi	r25, 0x28	; 40
     f3c:	88 e1       	ldi	r24, 0x18	; 24
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	a8 95       	wdr
     f44:	80 93 60 00 	sts	0x0060, r24
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	90 93 60 00 	sts	0x0060, r25
  wdt_enable(WDTO_4S);
} // loop
     f4e:	26 96       	adiw	r28, 0x06	; 6
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <_GLOBAL__sub_I_rtc>:
     f60:	81 e1       	ldi	r24, 0x11	; 17
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	90 93 70 03 	sts	0x0370, r25
     f68:	80 93 6f 03 	sts	0x036F, r24
uint32_t device_delta_Time_Log(uint8_t, uint8_t, byte, byte, byte, byte);


RTC_DS1307 rtc;		// instance of class
HBT myHBT;          // Object Variables
QTouch myTouch;
     f6c:	88 e6       	ldi	r24, 0x68	; 104
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	0c 94 9b 01 	jmp	0x336	; 0x336 <_ZN6QTouchC1Ev>

00000f74 <_ZL9date2daysjhh>:

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
     f74:	80 3d       	cpi	r24, 0xD0	; 208
     f76:	27 e0       	ldi	r18, 0x07	; 7
     f78:	92 07       	cpc	r25, r18
     f7a:	10 f0       	brcs	.+4      	; 0xf80 <_ZL9date2daysjhh+0xc>
        y -= 2000;
     f7c:	80 5d       	subi	r24, 0xD0	; 208
     f7e:	97 40       	sbci	r25, 0x07	; 7
    uint16_t days = d;
     f80:	50 e0       	ldi	r21, 0x00	; 0
    for (uint8_t i = 1; i < m; ++i)
     f82:	e5 ea       	ldi	r30, 0xA5	; 165
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	2e 1b       	sub	r18, r30
     f8a:	32 2f       	mov	r19, r18
     f8c:	3e 0f       	add	r19, r30
     f8e:	36 17       	cp	r19, r22
     f90:	28 f4       	brcc	.+10     	; 0xf9c <_ZL9date2daysjhh+0x28>
        days += pgm_read_byte(daysInMonth + i - 1);
     f92:	34 91       	lpm	r19, Z
     f94:	43 0f       	add	r20, r19
     f96:	51 1d       	adc	r21, r1
     f98:	31 96       	adiw	r30, 0x01	; 1
     f9a:	f7 cf       	rjmp	.-18     	; 0xf8a <_ZL9date2daysjhh+0x16>
    if (m > 2 && y % 4 == 0)
     f9c:	63 30       	cpi	r22, 0x03	; 3
     f9e:	38 f0       	brcs	.+14     	; 0xfae <_ZL9date2daysjhh+0x3a>
     fa0:	9c 01       	movw	r18, r24
     fa2:	23 70       	andi	r18, 0x03	; 3
     fa4:	33 27       	eor	r19, r19
     fa6:	23 2b       	or	r18, r19
     fa8:	11 f4       	brne	.+4      	; 0xfae <_ZL9date2daysjhh+0x3a>
        ++days;
     faa:	4f 5f       	subi	r20, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
    return days + 365 * y + (y + 3) / 4 - 1;
     fae:	2d e6       	ldi	r18, 0x6D	; 109
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	82 9f       	mul	r24, r18
     fb4:	b0 01       	movw	r22, r0
     fb6:	83 9f       	mul	r24, r19
     fb8:	70 0d       	add	r23, r0
     fba:	92 9f       	mul	r25, r18
     fbc:	70 0d       	add	r23, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	61 50       	subi	r22, 0x01	; 1
     fc2:	71 09       	sbc	r23, r1
     fc4:	9c 01       	movw	r18, r24
     fc6:	2d 5f       	subi	r18, 0xFD	; 253
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	36 95       	lsr	r19
     fcc:	27 95       	ror	r18
     fce:	36 95       	lsr	r19
     fd0:	27 95       	ror	r18
     fd2:	cb 01       	movw	r24, r22
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
}
     fd8:	84 0f       	add	r24, r20
     fda:	95 1f       	adc	r25, r21
     fdc:	08 95       	ret

00000fde <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
     fde:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
     fe0:	90 81       	ld	r25, Z
     fe2:	90 53       	subi	r25, 0x30	; 48
     fe4:	9a 30       	cpi	r25, 0x0A	; 10
     fe6:	08 f0       	brcs	.+2      	; 0xfea <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
}
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	92 9f       	mul	r25, r18
     ff2:	80 0d       	add	r24, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	08 95       	ret

00000ff8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	2b 97       	sbiw	r28, 0x0b	; 11
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	8c 01       	movw	r16, r24
    1016:	7a 01       	movw	r14, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    1018:	4b e0       	ldi	r20, 0x0B	; 11
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	0e 94 67 1a 	call	0x34ce	; 0x34ce <memcpy_P>
    yOff = conv2d(buff + 9);
    1024:	ce 01       	movw	r24, r28
    1026:	0a 96       	adiw	r24, 0x0a	; 10
    1028:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZL6conv2dPKc>
    102c:	f8 01       	movw	r30, r16
    102e:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	8e 2f       	mov	r24, r30
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	fc 01       	movw	r30, r24
    1038:	e1 54       	subi	r30, 0x41	; 65
    103a:	f1 09       	sbc	r31, r1
    103c:	e3 31       	cpi	r30, 0x13	; 19
    103e:	f1 05       	cpc	r31, r1
    1040:	48 f5       	brcc	.+82     	; 0x1094 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9c>
    1042:	ea 55       	subi	r30, 0x5A	; 90
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	81 36       	cpi	r24, 0x61	; 97
    104e:	39 f0       	breq	.+14     	; 0x105e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	8e 36       	cpi	r24, 0x6E	; 110
    1054:	11 f0       	breq	.+4      	; 0x105a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x62>
    1056:	87 e0       	ldi	r24, 0x07	; 7
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    105a:	86 e0       	ldi	r24, 0x06	; 6
    105c:	19 c0       	rjmp	.+50     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'F': m = 2; break;
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	15 c0       	rjmp	.+42     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	82 37       	cpi	r24, 0x72	; 114
    106a:	11 f0       	breq	.+4      	; 0x1070 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x78>
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	0e c0       	rjmp	.+28     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	82 37       	cpi	r24, 0x72	; 114
    1078:	11 f0       	breq	.+4      	; 0x107e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'S': m = 9; break;
    1082:	89 e0       	ldi	r24, 0x09	; 9
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'O': m = 10; break;
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'N': m = 11; break;
    108a:	8b e0       	ldi	r24, 0x0B	; 11
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
        case 'D': m = 12; break;
    108e:	8c e0       	ldi	r24, 0x0C	; 12
    1090:	f8 01       	movw	r30, r16
    1092:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    1094:	ce 01       	movw	r24, r28
    1096:	05 96       	adiw	r24, 0x05	; 5
    1098:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZL6conv2dPKc>
    109c:	f8 01       	movw	r30, r16
    109e:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    10a0:	48 e0       	ldi	r20, 0x08	; 8
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	b7 01       	movw	r22, r14
    10a6:	ce 01       	movw	r24, r28
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	0e 94 67 1a 	call	0x34ce	; 0x34ce <memcpy_P>
    hh = conv2d(buff);
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZL6conv2dPKc>
    10b6:	f8 01       	movw	r30, r16
    10b8:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    10ba:	ce 01       	movw	r24, r28
    10bc:	04 96       	adiw	r24, 0x04	; 4
    10be:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZL6conv2dPKc>
    10c2:	f8 01       	movw	r30, r16
    10c4:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    10c6:	ce 01       	movw	r24, r28
    10c8:	07 96       	adiw	r24, 0x07	; 7
    10ca:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZL6conv2dPKc>
    10ce:	f8 01       	movw	r30, r16
    10d0:	85 83       	std	Z+5, r24	; 0x05
}
    10d2:	2b 96       	adiw	r28, 0x0b	; 11
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	08 95       	ret

000010ec <_ZNK8DateTime8unixtimeEv>:
uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
}

uint32_t DateTime::unixtime(void) const {
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
    10fa:	88 81       	ld	r24, Y
    10fc:	4a 81       	ldd	r20, Y+2	; 0x02
    10fe:	69 81       	ldd	r22, Y+1	; 0x01
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZL9date2daysjhh>
        ++days;
    return days + 365 * y + (y + 3) / 4 - 1;
}

static long time2long(uint16_t days, uint8_t h, uint8_t m, uint8_t s) {
    return ((days * 24L + h) * 60 + m) * 60 + s;
    1106:	9c 01       	movw	r18, r24
    1108:	a8 e1       	ldi	r26, 0x18	; 24
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	0e 94 4d 1a 	call	0x349a	; 0x349a <__umulhisi3>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	7b 01       	movw	r14, r22
    1114:	8c 01       	movw	r16, r24
    1116:	e2 0e       	add	r14, r18
    1118:	f1 1c       	adc	r15, r1
    111a:	01 1d       	adc	r16, r1
    111c:	11 1d       	adc	r17, r1
    111e:	a8 01       	movw	r20, r16
    1120:	97 01       	movw	r18, r14
    1122:	ac e3       	ldi	r26, 0x3C	; 60
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__muluhisi3>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	7b 01       	movw	r14, r22
    112e:	8c 01       	movw	r16, r24
    1130:	e2 0e       	add	r14, r18
    1132:	f1 1c       	adc	r15, r1
    1134:	01 1d       	adc	r16, r1
    1136:	11 1d       	adc	r17, r1
    1138:	a8 01       	movw	r20, r16
    113a:	97 01       	movw	r18, r14
    113c:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__muluhisi3>
    1140:	2d 81       	ldd	r18, Y+5	; 0x05
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	82 0f       	add	r24, r18
    1148:	91 1d       	adc	r25, r1
    114a:	a1 1d       	adc	r26, r1
    114c:	b1 1d       	adc	r27, r1

uint32_t DateTime::unixtime(void) const {
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
  t = time2long(days, hh, mm, ss);
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	60 58       	subi	r22, 0x80	; 128
    1154:	7c 4b       	sbci	r23, 0xBC	; 188
    1156:	82 49       	sbci	r24, 0x92	; 146
    1158:	97 4c       	sbci	r25, 0xC7	; 199

  return t;
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	08 95       	ret

00001168 <_ZN10RTC_DS13075beginEv>:

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    1168:	82 ee       	ldi	r24, 0xE2	; 226
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	0e 94 97 0c 	call	0x192e	; 0x192e <_ZN7TwoWire5beginEv>
  return true;
}
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret

00001174 <_ZN10RTC_DS13076adjustERK8DateTime>:
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS1307_ADDRESS);
    117c:	68 e6       	ldi	r22, 0x68	; 104
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	82 ee       	ldi	r24, 0xE2	; 226
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	82 ee       	ldi	r24, 0xE2	; 226
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
    1192:	f8 01       	movw	r30, r16
    1194:	25 81       	ldd	r18, Z+5	; 0x05

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1196:	ca e0       	ldi	r28, 0x0A	; 10
    1198:	82 2f       	mov	r24, r18
    119a:	6c 2f       	mov	r22, r28
    119c:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    11a0:	68 2f       	mov	r22, r24
    11a2:	66 0f       	add	r22, r22
    11a4:	86 0f       	add	r24, r22
    11a6:	68 2f       	mov	r22, r24
    11a8:	66 0f       	add	r22, r22
    11aa:	62 0f       	add	r22, r18
}

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    11ac:	82 ee       	ldi	r24, 0xE2	; 226
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
    11b4:	f8 01       	movw	r30, r16
    11b6:	24 81       	ldd	r18, Z+4	; 0x04

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    11b8:	82 2f       	mov	r24, r18
    11ba:	6c 2f       	mov	r22, r28
    11bc:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    11c0:	68 2f       	mov	r22, r24
    11c2:	66 0f       	add	r22, r22
    11c4:	86 0f       	add	r24, r22
    11c6:	68 2f       	mov	r22, r24
    11c8:	66 0f       	add	r22, r22
    11ca:	62 0f       	add	r22, r18

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    11cc:	82 ee       	ldi	r24, 0xE2	; 226
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
    11d4:	f8 01       	movw	r30, r16
    11d6:	23 81       	ldd	r18, Z+3	; 0x03

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    11d8:	82 2f       	mov	r24, r18
    11da:	6c 2f       	mov	r22, r28
    11dc:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    11e0:	68 2f       	mov	r22, r24
    11e2:	66 0f       	add	r22, r22
    11e4:	86 0f       	add	r24, r22
    11e6:	68 2f       	mov	r22, r24
    11e8:	66 0f       	add	r22, r22
    11ea:	62 0f       	add	r22, r18
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    11ec:	82 ee       	ldi	r24, 0xE2	; 226
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(0));
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	82 ee       	ldi	r24, 0xE2	; 226
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
    11fe:	f8 01       	movw	r30, r16
    1200:	22 81       	ldd	r18, Z+2	; 0x02

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1202:	82 2f       	mov	r24, r18
    1204:	6c 2f       	mov	r22, r28
    1206:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    120a:	68 2f       	mov	r22, r24
    120c:	66 0f       	add	r22, r22
    120e:	86 0f       	add	r24, r22
    1210:	68 2f       	mov	r22, r24
    1212:	66 0f       	add	r22, r22
    1214:	62 0f       	add	r22, r18
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    1216:	82 ee       	ldi	r24, 0xE2	; 226
    1218:	93 e0       	ldi	r25, 0x03	; 3
    121a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
    121e:	f8 01       	movw	r30, r16
    1220:	21 81       	ldd	r18, Z+1	; 0x01

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1222:	82 2f       	mov	r24, r18
    1224:	6c 2f       	mov	r22, r28
    1226:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    122a:	68 2f       	mov	r22, r24
    122c:	66 0f       	add	r22, r22
    122e:	86 0f       	add	r24, r22
    1230:	68 2f       	mov	r22, r24
    1232:	66 0f       	add	r22, r22
    1234:	62 0f       	add	r22, r18
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    1236:	82 ee       	ldi	r24, 0xE2	; 226
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    123e:	f8 01       	movw	r30, r16
    1240:	20 81       	ld	r18, Z

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1242:	82 2f       	mov	r24, r18
    1244:	6c 2f       	mov	r22, r28
    1246:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodqi4>
    124a:	68 2f       	mov	r22, r24
    124c:	66 0f       	add	r22, r22
    124e:	86 0f       	add	r24, r22
    1250:	68 2f       	mov	r22, r24
    1252:	66 0f       	add	r22, r22
    1254:	62 0f       	add	r22, r18
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    1256:	82 ee       	ldi	r24, 0xE2	; 226
    1258:	93 e0       	ldi	r25, 0x03	; 3
    125a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    125e:	82 ee       	ldi	r24, 0xE2	; 226
    1260:	93 e0       	ldi	r25, 0x03	; 3
}
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    1268:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_ZN7TwoWire15endTransmissionEv>

0000126c <_ZN10RTC_DS13079isrunningEv>:
boolean RTC_DS1307::begin(void) {
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
  Wire.beginTransmission(DS1307_ADDRESS);
    1270:	68 e6       	ldi	r22, 0x68	; 104
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	82 ee       	ldi	r24, 0xE2	; 226
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	82 ee       	ldi	r24, 0xE2	; 226
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    1286:	82 ee       	ldi	r24, 0xE2	; 226
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS1307_ADDRESS, 1);
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	68 e6       	ldi	r22, 0x68	; 104
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	82 ee       	ldi	r24, 0xE2	; 226
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = Wire._I2C_READ();
    129e:	82 ee       	ldi	r24, 0xE2	; 226
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
  return !(ss>>7);
    12a6:	87 fb       	bst	r24, 7
    12a8:	88 27       	eor	r24, r24
    12aa:	80 f9       	bld	r24, 0
    12ac:	c8 2f       	mov	r28, r24
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	d2 2f       	mov	r29, r18
    12b2:	ce 01       	movw	r24, r28
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	82 27       	eor	r24, r18
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <_ZN10RTC_DS13073nowEv>:
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
  Wire.beginTransmission(DS1307_ADDRESS);
    12d0:	68 e6       	ldi	r22, 0x68	; 104
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	82 ee       	ldi	r24, 0xE2	; 226
    12d6:	93 e0       	ldi	r25, 0x03	; 3
    12d8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);	
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	82 ee       	ldi	r24, 0xE2	; 226
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    12e6:	82 ee       	ldi	r24, 0xE2	; 226
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS1307_ADDRESS, 7);
    12ee:	47 e0       	ldi	r20, 0x07	; 7
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	68 e6       	ldi	r22, 0x68	; 104
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	82 ee       	ldi	r24, 0xE2	; 226
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    12fe:	82 ee       	ldi	r24, 0xE2	; 226
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
    1306:	8f 77       	andi	r24, 0x7F	; 127
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    1308:	98 2f       	mov	r25, r24
    130a:	92 95       	swap	r25
    130c:	9f 70       	andi	r25, 0x0F	; 15
    130e:	1a ef       	ldi	r17, 0xFA	; 250
    1310:	08 2f       	mov	r16, r24
    1312:	91 9f       	mul	r25, r17
    1314:	00 0d       	add	r16, r0
    1316:	11 24       	eor	r1, r1
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    1318:	82 ee       	ldi	r24, 0xE2	; 226
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    1320:	9c 01       	movw	r18, r24
    1322:	33 27       	eor	r19, r19
    1324:	94 e0       	ldi	r25, 0x04	; 4
    1326:	35 95       	asr	r19
    1328:	27 95       	ror	r18
    132a:	9a 95       	dec	r25
    132c:	e1 f7       	brne	.-8      	; 0x1326 <_ZN10RTC_DS13073nowEv+0x68>
    132e:	f8 2e       	mov	r15, r24
    1330:	12 9f       	mul	r17, r18
    1332:	f0 0c       	add	r15, r0
    1334:	11 24       	eor	r1, r1
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    1336:	82 ee       	ldi	r24, 0xE2	; 226
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    133e:	9c 01       	movw	r18, r24
    1340:	33 27       	eor	r19, r19
    1342:	44 e0       	ldi	r20, 0x04	; 4
    1344:	35 95       	asr	r19
    1346:	27 95       	ror	r18
    1348:	4a 95       	dec	r20
    134a:	e1 f7       	brne	.-8      	; 0x1344 <_ZN10RTC_DS13073nowEv+0x86>
    134c:	e8 2e       	mov	r14, r24
    134e:	12 9f       	mul	r17, r18
    1350:	e0 0c       	add	r14, r0
    1352:	11 24       	eor	r1, r1

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    1354:	82 ee       	ldi	r24, 0xE2	; 226
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
  uint8_t d = bcd2bin(Wire._I2C_READ());
    135c:	82 ee       	ldi	r24, 0xE2	; 226
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    1364:	9c 01       	movw	r18, r24
    1366:	33 27       	eor	r19, r19
    1368:	54 e0       	ldi	r21, 0x04	; 4
    136a:	35 95       	asr	r19
    136c:	27 95       	ror	r18
    136e:	5a 95       	dec	r21
    1370:	e1 f7       	brne	.-8      	; 0x136a <_ZN10RTC_DS13073nowEv+0xac>
    1372:	d8 2e       	mov	r13, r24
    1374:	12 9f       	mul	r17, r18
    1376:	d0 0c       	add	r13, r0
    1378:	11 24       	eor	r1, r1
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    137a:	82 ee       	ldi	r24, 0xE2	; 226
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    1382:	9c 01       	movw	r18, r24
    1384:	33 27       	eor	r19, r19
    1386:	64 e0       	ldi	r22, 0x04	; 4
    1388:	35 95       	asr	r19
    138a:	27 95       	ror	r18
    138c:	6a 95       	dec	r22
    138e:	e1 f7       	brne	.-8      	; 0x1388 <_ZN10RTC_DS13073nowEv+0xca>
    1390:	c8 2e       	mov	r12, r24
    1392:	12 9f       	mul	r17, r18
    1394:	c0 0c       	add	r12, r0
    1396:	11 24       	eor	r1, r1
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    1398:	82 ee       	ldi	r24, 0xE2	; 226
    139a:	93 e0       	ldi	r25, 0x03	; 3
    139c:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    13a0:	9c 01       	movw	r18, r24
    13a2:	33 27       	eor	r19, r19
    13a4:	74 e0       	ldi	r23, 0x04	; 4
    13a6:	35 95       	asr	r19
    13a8:	27 95       	ror	r18
    13aa:	7a 95       	dec	r23
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <_ZN10RTC_DS13073nowEv+0xe8>
    13ae:	12 9f       	mul	r17, r18
    13b0:	80 0d       	add	r24, r0
    13b2:	11 24       	eor	r1, r1
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    13b4:	88 83       	st	Y, r24
    m = month;
    13b6:	c9 82       	std	Y+1, r12	; 0x01
    d = day;
    13b8:	da 82       	std	Y+2, r13	; 0x02
    hh = hour;
    13ba:	eb 82       	std	Y+3, r14	; 0x03
    mm = min;
    13bc:	fc 82       	std	Y+4, r15	; 0x04
    ss = sec;
    13be:	0d 83       	std	Y+5, r16	; 0x05
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    13c0:	ce 01       	movw	r24, r28
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	08 95       	ret

000013d4 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    13d4:	10 92 e1 03 	sts	0x03E1, r1
  twi_sendStop = true;		// default value
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 df 03 	sts	0x03DF, r24
  twi_inRepStart = false;
    13de:	10 92 de 03 	sts	0x03DE, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>
  digitalWrite(SCL, 1);
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	0e 94 26 19 	call	0x324c	; 0x324c <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    13f2:	e9 eb       	ldi	r30, 0xB9	; 185
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    13fc:	80 81       	ld	r24, Z
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1402:	88 e4       	ldi	r24, 0x48	; 72
    1404:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    1408:	85 e4       	ldi	r24, 0x45	; 69
    140a:	80 93 bc 00 	sts	0x00BC, r24
    140e:	08 95       	ret

00001410 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1410:	41 32       	cpi	r20, 0x21	; 33
    1412:	08 f0       	brcs	.+2      	; 0x1416 <twi_readFrom+0x6>
    1414:	43 c0       	rjmp	.+134    	; 0x149c <twi_readFrom+0x8c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1416:	90 91 e1 03 	lds	r25, 0x03E1
    141a:	91 11       	cpse	r25, r1
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	90 93 e1 03 	sts	0x03E1, r25
  twi_sendStop = sendStop;
    1424:	20 93 df 03 	sts	0x03DF, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	20 93 74 03 	sts	0x0374, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    142e:	10 92 b9 03 	sts	0x03B9, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1432:	24 0f       	add	r18, r20
    1434:	20 93 b8 03 	sts	0x03B8, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1438:	90 93 e0 03 	sts	0x03E0, r25
  twi_slarw |= address << 1;
    143c:	90 91 e0 03 	lds	r25, 0x03E0
    1440:	88 0f       	add	r24, r24
    1442:	89 2b       	or	r24, r25
    1444:	80 93 e0 03 	sts	0x03E0, r24

  if (true == twi_inRepStart) {
    1448:	80 91 de 03 	lds	r24, 0x03DE
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	61 f4       	brne	.+24     	; 0x1468 <twi_readFrom+0x58>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1450:	10 92 de 03 	sts	0x03DE, r1
    do {
      TWDR = twi_slarw;
    1454:	80 91 e0 03 	lds	r24, 0x03E0
    1458:	80 93 bb 00 	sts	0x00BB, r24
    } while(TWCR & _BV(TWWC));
    145c:	80 91 bc 00 	lds	r24, 0x00BC
    1460:	83 fd       	sbrc	r24, 3
    1462:	f8 cf       	rjmp	.-16     	; 0x1454 <twi_readFrom+0x44>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1464:	85 ec       	ldi	r24, 0xC5	; 197
    1466:	01 c0       	rjmp	.+2      	; 0x146a <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1468:	85 ee       	ldi	r24, 0xE5	; 229
    146a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    146e:	80 91 e1 03 	lds	r24, 0x03E1
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	e1 f3       	breq	.-8      	; 0x146e <twi_readFrom+0x5e>
    continue;
  }

  if (twi_masterBufferIndex < length)
    1476:	80 91 b9 03 	lds	r24, 0x03B9
    147a:	84 17       	cp	r24, r20
    147c:	10 f4       	brcc	.+4      	; 0x1482 <twi_readFrom+0x72>
    length = twi_masterBufferIndex;
    147e:	40 91 b9 03 	lds	r20, 0x03B9
    1482:	2a eb       	ldi	r18, 0xBA	; 186
    1484:	33 e0       	ldi	r19, 0x03	; 3
    1486:	fb 01       	movw	r30, r22

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1488:	d9 01       	movw	r26, r18
    148a:	8a 2f       	mov	r24, r26
    148c:	82 1b       	sub	r24, r18
    148e:	84 17       	cp	r24, r20
    1490:	18 f4       	brcc	.+6      	; 0x1498 <twi_readFrom+0x88>
    data[i] = twi_masterBuffer[i];
    1492:	8d 91       	ld	r24, X+
    1494:	81 93       	st	Z+, r24
    1496:	f9 cf       	rjmp	.-14     	; 0x148a <twi_readFrom+0x7a>
    1498:	84 2f       	mov	r24, r20
    149a:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    149c:	80 e0       	ldi	r24, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    149e:	08 95       	ret

000014a0 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    14a0:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    14a2:	41 32       	cpi	r20, 0x21	; 33
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <twi_writeTo+0x8>
    14a6:	4a c0       	rjmp	.+148    	; 0x153c <twi_writeTo+0x9c>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    14a8:	90 91 e1 03 	lds	r25, 0x03E1
    14ac:	91 11       	cpse	r25, r1
    14ae:	fc cf       	rjmp	.-8      	; 0x14a8 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    14b0:	32 e0       	ldi	r19, 0x02	; 2
    14b2:	30 93 e1 03 	sts	0x03E1, r19
  twi_sendStop = sendStop;
    14b6:	00 93 df 03 	sts	0x03DF, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	30 93 74 03 	sts	0x0374, r19

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    14c0:	10 92 b9 03 	sts	0x03B9, r1
  twi_masterBufferLength = length;
    14c4:	40 93 b8 03 	sts	0x03B8, r20
    14c8:	fb 01       	movw	r30, r22
    14ca:	6a eb       	ldi	r22, 0xBA	; 186
    14cc:	73 e0       	ldi	r23, 0x03	; 3
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    14ce:	db 01       	movw	r26, r22
    14d0:	3a 2f       	mov	r19, r26
    14d2:	36 1b       	sub	r19, r22
    14d4:	34 17       	cp	r19, r20
    14d6:	18 f4       	brcc	.+6      	; 0x14de <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
    14d8:	31 91       	ld	r19, Z+
    14da:	3d 93       	st	X+, r19
    14dc:	f9 cf       	rjmp	.-14     	; 0x14d0 <twi_writeTo+0x30>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    14de:	10 92 e0 03 	sts	0x03E0, r1
  twi_slarw |= address << 1;
    14e2:	30 91 e0 03 	lds	r19, 0x03E0
    14e6:	88 0f       	add	r24, r24
    14e8:	83 2b       	or	r24, r19
    14ea:	80 93 e0 03 	sts	0x03E0, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    14ee:	80 91 de 03 	lds	r24, 0x03DE
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	61 f4       	brne	.+24     	; 0x150e <twi_writeTo+0x6e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    14f6:	10 92 de 03 	sts	0x03DE, r1
    do {
      TWDR = twi_slarw;				
    14fa:	80 91 e0 03 	lds	r24, 0x03E0
    14fe:	80 93 bb 00 	sts	0x00BB, r24
    } while(TWCR & _BV(TWWC));
    1502:	80 91 bc 00 	lds	r24, 0x00BC
    1506:	83 fd       	sbrc	r24, 3
    1508:	f8 cf       	rjmp	.-16     	; 0x14fa <twi_writeTo+0x5a>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    150a:	85 ec       	ldi	r24, 0xC5	; 197
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <twi_writeTo+0x70>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    150e:	85 ee       	ldi	r24, 0xE5	; 229
    1510:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    1514:	22 23       	and	r18, r18
    1516:	21 f0       	breq	.+8      	; 0x1520 <twi_writeTo+0x80>
    1518:	80 91 e1 03 	lds	r24, 0x03E1
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	d1 f3       	breq	.-12     	; 0x1514 <twi_writeTo+0x74>
    continue;
  }
  
  if (twi_error == 0xFF)
    1520:	80 91 74 03 	lds	r24, 0x0374
    1524:	8f 3f       	cpi	r24, 0xFF	; 255
    1526:	79 f0       	breq	.+30     	; 0x1546 <twi_writeTo+0xa6>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    1528:	80 91 74 03 	lds	r24, 0x0374
    152c:	80 32       	cpi	r24, 0x20	; 32
    152e:	41 f0       	breq	.+16     	; 0x1540 <twi_writeTo+0xa0>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    1530:	80 91 74 03 	lds	r24, 0x0374
    1534:	80 33       	cpi	r24, 0x30	; 48
    1536:	31 f0       	breq	.+12     	; 0x1544 <twi_writeTo+0xa4>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    1538:	94 e0       	ldi	r25, 0x04	; 4
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <twi_writeTo+0xa6>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <twi_writeTo+0xa6>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <twi_writeTo+0xa6>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    1544:	93 e0       	ldi	r25, 0x03	; 3
  else
    return 4;	// other twi error
}
    1546:	89 2f       	mov	r24, r25
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    154c:	61 32       	cpi	r22, 0x21	; 33
    154e:	98 f4       	brcc	.+38     	; 0x1576 <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1550:	20 91 e1 03 	lds	r18, 0x03E1
    1554:	24 30       	cpi	r18, 0x04	; 4
    1556:	89 f4       	brne	.+34     	; 0x157a <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    1558:	60 93 96 03 	sts	0x0396, r22
    155c:	fc 01       	movw	r30, r24
    155e:	28 e9       	ldi	r18, 0x98	; 152
    1560:	33 e0       	ldi	r19, 0x03	; 3
  for(i = 0; i < length; ++i){
    1562:	d9 01       	movw	r26, r18
    1564:	8a 2f       	mov	r24, r26
    1566:	82 1b       	sub	r24, r18
    1568:	86 17       	cp	r24, r22
    156a:	18 f4       	brcc	.+6      	; 0x1572 <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
    156c:	81 91       	ld	r24, Z+
    156e:	8d 93       	st	X+, r24
    1570:	f9 cf       	rjmp	.-14     	; 0x1564 <twi_transmit+0x18>
  }
  
  return 0;
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    157a:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    157c:	08 95       	ret

0000157e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    157e:	85 ed       	ldi	r24, 0xD5	; 213
    1580:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1584:	80 91 bc 00 	lds	r24, 0x00BC
    1588:	84 fd       	sbrc	r24, 4
    158a:	fc cf       	rjmp	.-8      	; 0x1584 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    158c:	10 92 e1 03 	sts	0x03E1, r1
    1590:	08 95       	ret

00001592 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1592:	85 ec       	ldi	r24, 0xC5	; 197
    1594:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1598:	10 92 e1 03 	sts	0x03E1, r1
    159c:	08 95       	ret

0000159e <__vector_36>:
}

ISR(TWI_vect)
{
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	4f 93       	push	r20
    15ae:	5f 93       	push	r21
    15b0:	6f 93       	push	r22
    15b2:	7f 93       	push	r23
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	ef 93       	push	r30
    15be:	ff 93       	push	r31
  switch(TW_STATUS){
    15c0:	80 91 b9 00 	lds	r24, 0x00B9
    15c4:	88 7f       	andi	r24, 0xF8	; 248
    15c6:	80 36       	cpi	r24, 0x60	; 96
    15c8:	09 f4       	brne	.+2      	; 0x15cc <__vector_36+0x2e>
    15ca:	9e c0       	rjmp	.+316    	; 0x1708 <__vector_36+0x16a>
    15cc:	78 f5       	brcc	.+94     	; 0x162c <__vector_36+0x8e>
    15ce:	88 32       	cpi	r24, 0x28	; 40
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <__vector_36+0x36>
    15d2:	5d c0       	rjmp	.+186    	; 0x168e <__vector_36+0xf0>
    15d4:	90 f4       	brcc	.+36     	; 0x15fa <__vector_36+0x5c>
    15d6:	80 31       	cpi	r24, 0x10	; 16
    15d8:	09 f4       	brne	.+2      	; 0x15dc <__vector_36+0x3e>
    15da:	56 c0       	rjmp	.+172    	; 0x1688 <__vector_36+0xea>
    15dc:	38 f4       	brcc	.+14     	; 0x15ec <__vector_36+0x4e>
    15de:	88 23       	and	r24, r24
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <__vector_36+0x46>
    15e2:	f5 c0       	rjmp	.+490    	; 0x17ce <__vector_36+0x230>
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	09 f4       	brne	.+2      	; 0x15ea <__vector_36+0x4c>
    15e8:	4f c0       	rjmp	.+158    	; 0x1688 <__vector_36+0xea>
    15ea:	f5 c0       	rjmp	.+490    	; 0x17d6 <__vector_36+0x238>
    15ec:	88 31       	cpi	r24, 0x18	; 24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <__vector_36+0x54>
    15f0:	4e c0       	rjmp	.+156    	; 0x168e <__vector_36+0xf0>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <__vector_36+0x5a>
    15f6:	5f c0       	rjmp	.+190    	; 0x16b6 <__vector_36+0x118>
    15f8:	ee c0       	rjmp	.+476    	; 0x17d6 <__vector_36+0x238>
    15fa:	80 34       	cpi	r24, 0x40	; 64
    15fc:	09 f4       	brne	.+2      	; 0x1600 <__vector_36+0x62>
    15fe:	6a c0       	rjmp	.+212    	; 0x16d4 <__vector_36+0x136>
    1600:	58 f4       	brcc	.+22     	; 0x1618 <__vector_36+0x7a>
    1602:	80 33       	cpi	r24, 0x30	; 48
    1604:	09 f4       	brne	.+2      	; 0x1608 <__vector_36+0x6a>
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <__vector_36+0x118>
    1608:	88 33       	cpi	r24, 0x38	; 56
    160a:	09 f0       	breq	.+2      	; 0x160e <__vector_36+0x70>
    160c:	e4 c0       	rjmp	.+456    	; 0x17d6 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    160e:	80 93 74 03 	sts	0x0374, r24
      twi_releaseBus();
    1612:	0e 94 c9 0a 	call	0x1592	; 0x1592 <twi_releaseBus>
      break;
    1616:	df c0       	rjmp	.+446    	; 0x17d6 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1618:	80 35       	cpi	r24, 0x50	; 80
    161a:	09 f4       	brne	.+2      	; 0x161e <__vector_36+0x80>
    161c:	4f c0       	rjmp	.+158    	; 0x16bc <__vector_36+0x11e>
    161e:	88 35       	cpi	r24, 0x58	; 88
    1620:	09 f4       	brne	.+2      	; 0x1624 <__vector_36+0x86>
    1622:	5d c0       	rjmp	.+186    	; 0x16de <__vector_36+0x140>
    1624:	88 34       	cpi	r24, 0x48	; 72
    1626:	09 f0       	breq	.+2      	; 0x162a <__vector_36+0x8c>
    1628:	d6 c0       	rjmp	.+428    	; 0x17d6 <__vector_36+0x238>
    162a:	d3 c0       	rjmp	.+422    	; 0x17d2 <__vector_36+0x234>
    162c:	88 39       	cpi	r24, 0x98	; 152
    162e:	09 f4       	brne	.+2      	; 0x1632 <__vector_36+0x94>
    1630:	c4 c0       	rjmp	.+392    	; 0x17ba <__vector_36+0x21c>
    1632:	a8 f4       	brcc	.+42     	; 0x165e <__vector_36+0xc0>
    1634:	88 37       	cpi	r24, 0x78	; 120
    1636:	09 f4       	brne	.+2      	; 0x163a <__vector_36+0x9c>
    1638:	67 c0       	rjmp	.+206    	; 0x1708 <__vector_36+0x16a>
    163a:	38 f4       	brcc	.+14     	; 0x164a <__vector_36+0xac>
    163c:	88 36       	cpi	r24, 0x68	; 104
    163e:	09 f4       	brne	.+2      	; 0x1642 <__vector_36+0xa4>
    1640:	63 c0       	rjmp	.+198    	; 0x1708 <__vector_36+0x16a>
    1642:	80 37       	cpi	r24, 0x70	; 112
    1644:	09 f4       	brne	.+2      	; 0x1648 <__vector_36+0xaa>
    1646:	60 c0       	rjmp	.+192    	; 0x1708 <__vector_36+0x16a>
    1648:	c6 c0       	rjmp	.+396    	; 0x17d6 <__vector_36+0x238>
    164a:	88 38       	cpi	r24, 0x88	; 136
    164c:	09 f4       	brne	.+2      	; 0x1650 <__vector_36+0xb2>
    164e:	b5 c0       	rjmp	.+362    	; 0x17ba <__vector_36+0x21c>
    1650:	80 39       	cpi	r24, 0x90	; 144
    1652:	09 f4       	brne	.+2      	; 0x1656 <__vector_36+0xb8>
    1654:	5f c0       	rjmp	.+190    	; 0x1714 <__vector_36+0x176>
    1656:	80 38       	cpi	r24, 0x80	; 128
    1658:	09 f0       	breq	.+2      	; 0x165c <__vector_36+0xbe>
    165a:	bd c0       	rjmp	.+378    	; 0x17d6 <__vector_36+0x238>
    165c:	5b c0       	rjmp	.+182    	; 0x1714 <__vector_36+0x176>
    165e:	80 3b       	cpi	r24, 0xB0	; 176
    1660:	09 f4       	brne	.+2      	; 0x1664 <__vector_36+0xc6>
    1662:	83 c0       	rjmp	.+262    	; 0x176a <__vector_36+0x1cc>
    1664:	38 f4       	brcc	.+14     	; 0x1674 <__vector_36+0xd6>
    1666:	80 3a       	cpi	r24, 0xA0	; 160
    1668:	09 f4       	brne	.+2      	; 0x166c <__vector_36+0xce>
    166a:	66 c0       	rjmp	.+204    	; 0x1738 <__vector_36+0x19a>
    166c:	88 3a       	cpi	r24, 0xA8	; 168
    166e:	09 f4       	brne	.+2      	; 0x1672 <__vector_36+0xd4>
    1670:	7c c0       	rjmp	.+248    	; 0x176a <__vector_36+0x1cc>
    1672:	b1 c0       	rjmp	.+354    	; 0x17d6 <__vector_36+0x238>
    1674:	80 3c       	cpi	r24, 0xC0	; 192
    1676:	09 f4       	brne	.+2      	; 0x167a <__vector_36+0xdc>
    1678:	a4 c0       	rjmp	.+328    	; 0x17c2 <__vector_36+0x224>
    167a:	88 3c       	cpi	r24, 0xC8	; 200
    167c:	09 f4       	brne	.+2      	; 0x1680 <__vector_36+0xe2>
    167e:	a1 c0       	rjmp	.+322    	; 0x17c2 <__vector_36+0x224>
    1680:	88 3b       	cpi	r24, 0xB8	; 184
    1682:	09 f4       	brne	.+2      	; 0x1686 <__vector_36+0xe8>
    1684:	87 c0       	rjmp	.+270    	; 0x1794 <__vector_36+0x1f6>
    1686:	a7 c0       	rjmp	.+334    	; 0x17d6 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1688:	80 91 e0 03 	lds	r24, 0x03E0
    168c:	10 c0       	rjmp	.+32     	; 0x16ae <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    168e:	90 91 b9 03 	lds	r25, 0x03B9
    1692:	80 91 b8 03 	lds	r24, 0x03B8
    1696:	98 17       	cp	r25, r24
    1698:	70 f5       	brcc	.+92     	; 0x16f6 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    169a:	e0 91 b9 03 	lds	r30, 0x03B9
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	8e 0f       	add	r24, r30
    16a2:	80 93 b9 03 	sts	0x03B9, r24
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	e6 54       	subi	r30, 0x46	; 70
    16aa:	fc 4f       	sbci	r31, 0xFC	; 252
    16ac:	80 81       	ld	r24, Z
    16ae:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16b2:	85 ec       	ldi	r24, 0xC5	; 197
    16b4:	83 c0       	rjmp	.+262    	; 0x17bc <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    16b6:	80 93 74 03 	sts	0x0374, r24
    16ba:	8b c0       	rjmp	.+278    	; 0x17d2 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16bc:	e0 91 b9 03 	lds	r30, 0x03B9
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	8e 0f       	add	r24, r30
    16c4:	80 93 b9 03 	sts	0x03B9, r24
    16c8:	80 91 bb 00 	lds	r24, 0x00BB
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	e6 54       	subi	r30, 0x46	; 70
    16d0:	fc 4f       	sbci	r31, 0xFC	; 252
    16d2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    16d4:	90 91 b9 03 	lds	r25, 0x03B9
    16d8:	80 91 b8 03 	lds	r24, 0x03B8
    16dc:	6b c0       	rjmp	.+214    	; 0x17b4 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16de:	e0 91 b9 03 	lds	r30, 0x03B9
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	8e 0f       	add	r24, r30
    16e6:	80 93 b9 03 	sts	0x03B9, r24
    16ea:	80 91 bb 00 	lds	r24, 0x00BB
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	e6 54       	subi	r30, 0x46	; 70
    16f2:	fc 4f       	sbci	r31, 0xFC	; 252
    16f4:	80 83       	st	Z, r24
	if (twi_sendStop)
    16f6:	80 91 df 03 	lds	r24, 0x03DF
    16fa:	81 11       	cpse	r24, r1
    16fc:	6a c0       	rjmp	.+212    	; 0x17d2 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 de 03 	sts	0x03DE, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1704:	84 ea       	ldi	r24, 0xA4	; 164
    1706:	5e c0       	rjmp	.+188    	; 0x17c4 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	80 93 e1 03 	sts	0x03E1, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    170e:	10 92 75 03 	sts	0x0375, r1
    1712:	cf cf       	rjmp	.-98     	; 0x16b2 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1714:	80 91 75 03 	lds	r24, 0x0375
    1718:	80 32       	cpi	r24, 0x20	; 32
    171a:	08 f0       	brcs	.+2      	; 0x171e <__vector_36+0x180>
    171c:	4e c0       	rjmp	.+156    	; 0x17ba <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    171e:	e0 91 75 03 	lds	r30, 0x0375
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8e 0f       	add	r24, r30
    1726:	80 93 75 03 	sts	0x0375, r24
    172a:	80 91 bb 00 	lds	r24, 0x00BB
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	ea 58       	subi	r30, 0x8A	; 138
    1732:	fc 4f       	sbci	r31, 0xFC	; 252
    1734:	80 83       	st	Z, r24
    1736:	bd cf       	rjmp	.-134    	; 0x16b2 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1738:	0e 94 c9 0a 	call	0x1592	; 0x1592 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    173c:	80 91 75 03 	lds	r24, 0x0375
    1740:	80 32       	cpi	r24, 0x20	; 32
    1742:	30 f4       	brcc	.+12     	; 0x1750 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1744:	e0 91 75 03 	lds	r30, 0x0375
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	ea 58       	subi	r30, 0x8A	; 138
    174c:	fc 4f       	sbci	r31, 0xFC	; 252
    174e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1750:	60 91 75 03 	lds	r22, 0x0375
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	e0 91 da 03 	lds	r30, 0x03DA
    175a:	f0 91 db 03 	lds	r31, 0x03DB
    175e:	86 e7       	ldi	r24, 0x76	; 118
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1764:	10 92 75 03 	sts	0x0375, r1
      break;
    1768:	36 c0       	rjmp	.+108    	; 0x17d6 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    176a:	84 e0       	ldi	r24, 0x04	; 4
    176c:	80 93 e1 03 	sts	0x03E1, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1770:	10 92 97 03 	sts	0x0397, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1774:	10 92 96 03 	sts	0x0396, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1778:	e0 91 dc 03 	lds	r30, 0x03DC
    177c:	f0 91 dd 03 	lds	r31, 0x03DD
    1780:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1782:	80 91 96 03 	lds	r24, 0x0396
    1786:	81 11       	cpse	r24, r1
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 93 96 03 	sts	0x0396, r24
        twi_txBuffer[0] = 0x00;
    1790:	10 92 98 03 	sts	0x0398, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1794:	e0 91 97 03 	lds	r30, 0x0397
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	8e 0f       	add	r24, r30
    179c:	80 93 97 03 	sts	0x0397, r24
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	e8 56       	subi	r30, 0x68	; 104
    17a4:	fc 4f       	sbci	r31, 0xFC	; 252
    17a6:	80 81       	ld	r24, Z
    17a8:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17ac:	90 91 97 03 	lds	r25, 0x0397
    17b0:	80 91 96 03 	lds	r24, 0x0396
    17b4:	98 17       	cp	r25, r24
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <__vector_36+0x21c>
    17b8:	7c cf       	rjmp	.-264    	; 0x16b2 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17ba:	85 e8       	ldi	r24, 0x85	; 133
    17bc:	80 93 bc 00 	sts	0x00BC, r24
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17c2:	85 ec       	ldi	r24, 0xC5	; 197
    17c4:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    17c8:	10 92 e1 03 	sts	0x03E1, r1
      break;
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    17ce:	10 92 74 03 	sts	0x0374, r1
      twi_stop();
    17d2:	0e 94 bf 0a 	call	0x157e	; 0x157e <twi_stop>
      break;
  }
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    17f8:	80 91 12 04 	lds	r24, 0x0412
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	20 91 13 04 	lds	r18, 0x0413
}
    1802:	82 1b       	sub	r24, r18
    1804:	91 09       	sbc	r25, r1
    1806:	08 95       	ret

00001808 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1808:	90 91 13 04 	lds	r25, 0x0413
    180c:	80 91 12 04 	lds	r24, 0x0412
    1810:	98 17       	cp	r25, r24
    1812:	50 f4       	brcc	.+20     	; 0x1828 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    1814:	e9 2f       	mov	r30, r25
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	ec 5e       	subi	r30, 0xEC	; 236
    181a:	fb 4f       	sbci	r31, 0xFB	; 251
    181c:	20 81       	ld	r18, Z
    181e:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    1820:	9f 5f       	subi	r25, 0xFF	; 255
    1822:	90 93 13 04 	sts	0x0413, r25
    1826:	02 c0       	rjmp	.+4      	; 0x182c <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1828:	2f ef       	ldi	r18, 0xFF	; 255
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    182c:	c9 01       	movw	r24, r18
    182e:	08 95       	ret

00001830 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1830:	e0 91 13 04 	lds	r30, 0x0413
    1834:	80 91 12 04 	lds	r24, 0x0412
    1838:	e8 17       	cp	r30, r24
    183a:	30 f4       	brcc	.+12     	; 0x1848 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ec 5e       	subi	r30, 0xEC	; 236
    1840:	fb 4f       	sbci	r31, 0xFB	; 251
    1842:	80 81       	ld	r24, Z
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    184c:	08 95       	ret

0000184e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    184e:	08 95       	ret

00001850 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	7c 01       	movw	r14, r24
    1862:	26 2f       	mov	r18, r22
    1864:	97 2f       	mov	r25, r23
    1866:	8a 01       	movw	r16, r20
  if(transmitting){
    1868:	80 91 ee 03 	lds	r24, 0x03EE
    186c:	88 23       	and	r24, r24
    186e:	91 f0       	breq	.+36     	; 0x1894 <_ZN7TwoWire5writeEPKhj+0x44>
    1870:	c6 2f       	mov	r28, r22
    1872:	d7 2f       	mov	r29, r23
    1874:	6e 01       	movw	r12, r28
    1876:	c4 0e       	add	r12, r20
    1878:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    187a:	cc 15       	cp	r28, r12
    187c:	dd 05       	cpc	r29, r13
    187e:	71 f0       	breq	.+28     	; 0x189c <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    1880:	69 91       	ld	r22, Y+
    1882:	d7 01       	movw	r26, r14
    1884:	ed 91       	ld	r30, X+
    1886:	fc 91       	ld	r31, X
    1888:	01 90       	ld	r0, Z+
    188a:	f0 81       	ld	r31, Z
    188c:	e0 2d       	mov	r30, r0
    188e:	c7 01       	movw	r24, r14
    1890:	09 95       	icall
    1892:	f3 cf       	rjmp	.-26     	; 0x187a <_ZN7TwoWire5writeEPKhj+0x2a>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1894:	64 2f       	mov	r22, r20
    1896:	82 2f       	mov	r24, r18
    1898:	0e 94 a6 0a 	call	0x154c	; 0x154c <twi_transmit>
  }
  return quantity;
}
    189c:	c8 01       	movw	r24, r16
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	08 95       	ret

000018b0 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	1f 92       	push	r1
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    18bc:	20 91 ee 03 	lds	r18, 0x03EE
    18c0:	22 23       	and	r18, r18
    18c2:	d1 f0       	breq	.+52     	; 0x18f8 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    18c4:	20 91 ef 03 	lds	r18, 0x03EF
    18c8:	20 32       	cpi	r18, 0x20	; 32
    18ca:	40 f0       	brcs	.+16     	; 0x18dc <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	33 83       	std	Z+3, r19	; 0x03
    18d4:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	15 c0       	rjmp	.+42     	; 0x1906 <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    18dc:	80 91 f0 03 	lds	r24, 0x03F0
    18e0:	e8 2f       	mov	r30, r24
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	ef 50       	subi	r30, 0x0F	; 15
    18e6:	fc 4f       	sbci	r31, 0xFC	; 252
    18e8:	99 81       	ldd	r25, Y+1	; 0x01
    18ea:	90 83       	st	Z, r25
    ++txBufferIndex;
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 f0 03 	sts	0x03F0, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    18f2:	80 93 ef 03 	sts	0x03EF, r24
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	ce 01       	movw	r24, r28
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	0e 94 a6 0a 	call	0x154c	; 0x154c <twi_transmit>
  }
  return 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
}
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    190e:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1910:	13 82       	std	Z+3, r1	; 0x03
    1912:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1914:	88 ee       	ldi	r24, 0xE8	; 232
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	84 83       	std	Z+4, r24	; 0x04
    191e:	95 83       	std	Z+5, r25	; 0x05
    1920:	a6 83       	std	Z+6, r26	; 0x06
    1922:	b7 83       	std	Z+7, r27	; 0x07
    1924:	8e eb       	ldi	r24, 0xBE	; 190
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	08 95       	ret

0000192e <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    192e:	10 92 13 04 	sts	0x0413, r1
  rxBufferLength = 0;
    1932:	10 92 12 04 	sts	0x0412, r1

  txBufferIndex = 0;
    1936:	10 92 f0 03 	sts	0x03F0, r1
  txBufferLength = 0;
    193a:	10 92 ef 03 	sts	0x03EF, r1

  twi_init();
    193e:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <twi_init>

00001942 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 ee 03 	sts	0x03EE, r24
  // set address of targeted slave
  txAddress = address;
    1948:	60 93 11 04 	sts	0x0411, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    194c:	10 92 f0 03 	sts	0x03F0, r1
  txBufferLength = 0;
    1950:	10 92 ef 03 	sts	0x03EF, r1
    1954:	08 95       	ret

00001956 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1956:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <_ZN7TwoWire17beginTransmissionEh>

0000195a <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    195a:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    195c:	06 2f       	mov	r16, r22
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	40 91 ef 03 	lds	r20, 0x03EF
    1964:	61 ef       	ldi	r22, 0xF1	; 241
    1966:	73 e0       	ldi	r23, 0x03	; 3
    1968:	80 91 11 04 	lds	r24, 0x0411
    196c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1970:	10 92 f0 03 	sts	0x03F0, r1
  txBufferLength = 0;
    1974:	10 92 ef 03 	sts	0x03EF, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1978:	10 92 ee 03 	sts	0x03EE, r1
  return ret;
}
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <_ZN7TwoWire11requestFromEhhmhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    1980:	4f 92       	push	r4
    1982:	5f 92       	push	r5
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	5c 01       	movw	r10, r24
    199c:	f6 2e       	mov	r15, r22
    199e:	d4 2f       	mov	r29, r20
    19a0:	28 01       	movw	r4, r16
    19a2:	39 01       	movw	r6, r18
  if (isize > 0) {
    19a4:	ee 20       	and	r14, r14
    19a6:	21 f1       	breq	.+72     	; 0x19f0 <_ZN7TwoWire11requestFromEhhmhh+0x70>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    19a8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN7TwoWire17beginTransmissionEh>
    19ac:	ce 2d       	mov	r28, r14
    19ae:	c4 30       	cpi	r28, 0x04	; 4
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    19b2:	c3 e0       	ldi	r28, 0x03	; 3
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    19b4:	c1 50       	subi	r28, 0x01	; 1
    19b6:	c0 f0       	brcs	.+48     	; 0x19e8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    write((uint8_t)(iaddress >> (isize*8)));
    19b8:	d5 01       	movw	r26, r10
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	b8 e0       	ldi	r27, 0x08	; 8
    19c0:	cb 9f       	mul	r28, r27
    19c2:	c0 01       	movw	r24, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	a3 01       	movw	r20, r6
    19c8:	92 01       	movw	r18, r4
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    19cc:	56 95       	lsr	r21
    19ce:	47 95       	ror	r20
    19d0:	37 95       	ror	r19
    19d2:	27 95       	ror	r18
    19d4:	8a 95       	dec	r24
    19d6:	d2 f7       	brpl	.-12     	; 0x19cc <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    19d8:	ca 01       	movw	r24, r20
    19da:	b9 01       	movw	r22, r18
    19dc:	01 90       	ld	r0, Z+
    19de:	f0 81       	ld	r31, Z
    19e0:	e0 2d       	mov	r30, r0
    19e2:	c5 01       	movw	r24, r10
    19e4:	09 95       	icall
    19e6:	e6 cf       	rjmp	.-52     	; 0x19b4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
  endTransmission(false);
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	c5 01       	movw	r24, r10
    19ec:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN7TwoWire15endTransmissionEh>
    19f0:	4d 2f       	mov	r20, r29
    19f2:	d1 32       	cpi	r29, 0x21	; 33
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    19f6:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    19f8:	2c 2d       	mov	r18, r12
    19fa:	64 e1       	ldi	r22, 0x14	; 20
    19fc:	74 e0       	ldi	r23, 0x04	; 4
    19fe:	8f 2d       	mov	r24, r15
    1a00:	0e 94 08 0a 	call	0x1410	; 0x1410 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1a04:	10 92 13 04 	sts	0x0413, r1
  rxBufferLength = read;
    1a08:	80 93 12 04 	sts	0x0412, r24

  return read;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	7f 90       	pop	r7
    1a20:	6f 90       	pop	r6
    1a22:	5f 90       	pop	r5
    1a24:	4f 90       	pop	r4
    1a26:	08 95       	ret

00001a28 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    1a28:	cf 92       	push	r12
    1a2a:	ef 92       	push	r14
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    1a30:	c2 2e       	mov	r12, r18
    1a32:	e1 2c       	mov	r14, r1
    1a34:	00 e0       	ldi	r16, 0x00	; 0
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	98 01       	movw	r18, r16
    1a3a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN7TwoWire11requestFromEhhmhh>
}
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ef 90       	pop	r14
    1a44:	cf 90       	pop	r12
    1a46:	08 95       	ret

00001a48 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <_ZN7TwoWire11requestFromEhhh>

00001a4e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <_ZN7TwoWire15endTransmissionEh>

00001a54 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1a54:	82 ee       	ldi	r24, 0xE2	; 226
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0c 94 87 0c 	jmp	0x190e	; 0x190e <_ZN7TwoWireC1Ev>

00001a5c <_ZN3HBT16enterCommandModeEv>:

////////

void HBT::enterCommandMode() // Enters Command Mode
{
    _serial = &Serial1;
    1a5c:	24 e8       	ldi	r18, 0x84	; 132
    1a5e:	34 e0       	ldi	r19, 0x04	; 4
    1a60:	fc 01       	movw	r30, r24
    1a62:	33 83       	std	Z+3, r19	; 0x03
    1a64:	22 83       	std	Z+2, r18	; 0x02
    _serial->print("AT");
    1a66:	6a ec       	ldi	r22, 0xCA	; 202
    1a68:	71 e0       	ldi	r23, 0x01	; 1
    1a6a:	c9 01       	movw	r24, r18
    1a6c:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    delay(Delay_Between_Commands);
    1a70:	62 e3       	ldi	r22, 0x32	; 50
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001a7c <_ZN3HBT15exitCommandModeEv>:
}


void HBT::exitCommandMode()  // Resets and exit command mode
{
    _serial = &Serial1;
    1a7c:	24 e8       	ldi	r18, 0x84	; 132
    1a7e:	34 e0       	ldi	r19, 0x04	; 4
    1a80:	fc 01       	movw	r30, r24
    1a82:	33 83       	std	Z+3, r19	; 0x03
    1a84:	22 83       	std	Z+2, r18	; 0x02
    _serial->print("AT+RESET");
    1a86:	6d ec       	ldi	r22, 0xCD	; 205
    1a88:	71 e0       	ldi	r23, 0x01	; 1
    1a8a:	c9 01       	movw	r24, r18
    1a8c:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_ZN5Print5printEPKc>

00001a90 <_ZN3HBT5beginEl>:
}


void HBT::begin(long baud)// begins HBT ble serial port at specified baud rate
{
	_serial = &Serial1;
    1a90:	24 e8       	ldi	r18, 0x84	; 132
    1a92:	34 e0       	ldi	r19, 0x04	; 4
    1a94:	fc 01       	movw	r30, r24
    1a96:	33 83       	std	Z+3, r19	; 0x03
    1a98:	22 83       	std	Z+2, r18	; 0x02
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1a9a:	26 e0       	ldi	r18, 0x06	; 6
    1a9c:	84 e8       	ldi	r24, 0x84	; 132
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_ZN14HardwareSerial5beginEmh>

00001aa4 <_ZN3HBT8parseIntEv>:
}

int HBT::parseInt() // returns parsed integer from HBT Rx pin
{
    
    _serial = &Serial1;
    1aa4:	24 e8       	ldi	r18, 0x84	; 132
    1aa6:	34 e0       	ldi	r19, 0x04	; 4
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	33 83       	std	Z+3, r19	; 0x03
    1aac:	22 83       	std	Z+2, r18	; 0x02
    return _serial->parseInt();
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	0e 94 ef 12 	call	0x25de	; 0x25de <_ZN6Stream8parseIntE13LookaheadModec>
    
}
    1ab8:	cb 01       	movw	r24, r22
    1aba:	08 95       	ret

00001abc <_ZN3HBT5printEPKc>:


// Print
size_t HBT::print(const char str[])
{
    return _serial->write(str);
    1abc:	dc 01       	movw	r26, r24
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	8d 91       	ld	r24, X+
    1ac2:	9c 91       	ld	r25, X
    1ac4:	13 97       	sbiw	r26, 0x03	; 3
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1ac6:	61 15       	cp	r22, r1
    1ac8:	71 05       	cpc	r23, r1
    1aca:	79 f0       	breq	.+30     	; 0x1aea <_ZN3HBT5printEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1acc:	fb 01       	movw	r30, r22
    1ace:	01 90       	ld	r0, Z+
    1ad0:	00 20       	and	r0, r0
    1ad2:	e9 f7       	brne	.-6      	; 0x1ace <_ZN3HBT5printEPKc+0x12>
    1ad4:	31 97       	sbiw	r30, 0x01	; 1
    1ad6:	af 01       	movw	r20, r30
    1ad8:	46 1b       	sub	r20, r22
    1ada:	57 0b       	sbc	r21, r23
    1adc:	dc 01       	movw	r26, r24
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	02 80       	ldd	r0, Z+2	; 0x02
    1ae4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	09 94       	ijmp
}
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	08 95       	ret

00001af0 <_ZN3HBT5printEhi>:
{
    return _serial->write(c);
}

size_t HBT::print(unsigned char b, int base)
{
    1af0:	9a 01       	movw	r18, r20
    return _serial->print((unsigned long) b, base);
    1af2:	46 2f       	mov	r20, r22
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	fc 01       	movw	r30, r24
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <_ZN5Print5printEmi>

00001b04 <_ZN3HBT7setNameEPc>:
///////////////////// HBT Configurate Parameters //////////////////////

// Name

void HBT::setName(char name[]) // Changes HBT Device name to desired
{
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	8b 01       	movw	r16, r22
    
    _serial = &Serial1;
    1b10:	84 e8       	ldi	r24, 0x84	; 132
    1b12:	94 e0       	ldi	r25, 0x04	; 4
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+NAME");
    1b18:	66 ed       	ldi	r22, 0xD6	; 214
    1b1a:	71 e0       	ldi	r23, 0x01	; 1
    1b1c:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    _serial->print(name);
    1b20:	b8 01       	movw	r22, r16
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	9b 81       	ldd	r25, Y+3	; 0x03
    1b26:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    
    delay(Delay_Between_Commands);
    1b2a:	62 e3       	ldi	r22, 0x32	; 50
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    
    _serial = &Serial1;
    _serial->print("AT+NAME");
    _serial->print(name);
    
    delay(Delay_Between_Commands);
    1b3a:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001b3e <_ZN3HBT14setiBeaconModeEi>:


// Sets HBT iBeacon On Off State

void HBT::setiBeaconMode(int mode)
{
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	ec 01       	movw	r28, r24
    1b48:	8b 01       	movw	r16, r22
    _serial = &Serial1;
    1b4a:	84 e8       	ldi	r24, 0x84	; 132
    1b4c:	94 e0       	ldi	r25, 0x04	; 4
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+IBEA");
    1b52:	6a e3       	ldi	r22, 0x3A	; 58
    1b54:	72 e0       	ldi	r23, 0x02	; 2
    1b56:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    
    switch (mode)
    1b5a:	01 15       	cp	r16, r1
    1b5c:	11 05       	cpc	r17, r1
    1b5e:	41 f0       	breq	.+16     	; 0x1b70 <_ZN3HBT14setiBeaconModeEi+0x32>
    1b60:	01 30       	cpi	r16, 0x01	; 1
    1b62:	11 05       	cpc	r17, r1
    1b64:	69 f4       	brne	.+26     	; 0x1b80 <_ZN3HBT14setiBeaconModeEi+0x42>
    {
        case On :
            _serial->print(On);
    1b66:	4a e0       	ldi	r20, 0x0A	; 10
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <_ZN3HBT14setiBeaconModeEi+0x3a>
            break;
            
        case Off :
            _serial->print(Off);
    1b70:	4a e0       	ldi	r20, 0x0A	; 10
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN5Print5printEii>
            break;
            
            
    }
    delay(Delay_Between_Commands);
    1b80:	62 e3       	ldi	r22, 0x32	; 50
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
            _serial->print(Off);
            break;
            
            
    }
    delay(Delay_Between_Commands);
    1b90:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001b94 <_ZN3HBT11setWorkModeEi>:


// Sets HBT ble modules Work Mode

void HBT::setWorkMode(int mode)
{
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
    1b9e:	8b 01       	movw	r16, r22
    _serial = &Serial1;
    1ba0:	84 e8       	ldi	r24, 0x84	; 132
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	9b 83       	std	Y+3, r25	; 0x03
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+MODE");
    1ba8:	65 e7       	ldi	r22, 0x75	; 117
    1baa:	72 e0       	ldi	r23, 0x02	; 2
    1bac:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    
    switch (mode)
    1bb0:	01 30       	cpi	r16, 0x01	; 1
    1bb2:	11 05       	cpc	r17, r1
    1bb4:	51 f0       	breq	.+20     	; 0x1bca <_ZN3HBT11setWorkModeEi+0x36>
    1bb6:	02 30       	cpi	r16, 0x02	; 2
    1bb8:	11 05       	cpc	r17, r1
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <_ZN3HBT11setWorkModeEi+0x40>
    1bbc:	01 2b       	or	r16, r17
    1bbe:	91 f4       	brne	.+36     	; 0x1be4 <_ZN3HBT11setWorkModeEi+0x50>
    {
        case TRANSMISSION:
            _serial->print(TRANSMISSION);
    1bc0:	4a e0       	ldi	r20, 0x0A	; 10
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <_ZN3HBT11setWorkModeEi+0x48>
            break;
            
        case IO_COLLECTION:
            _serial->print(IO_COLLECTION);
    1bca:	4a e0       	ldi	r20, 0x0A	; 10
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <_ZN3HBT11setWorkModeEi+0x48>
            break;
        
        case REMOTE_CONTROL:
            _serial->print(REMOTE_CONTROL);
    1bd4:	4a e0       	ldi	r20, 0x0A	; 10
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	62 e0       	ldi	r22, 0x02	; 2
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN5Print5printEii>
            break;
            
        
    }
      delay(Delay_Between_Commands);
    1be4:	62 e3       	ldi	r22, 0x32	; 50
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
            _serial->print(REMOTE_CONTROL);
            break;
            
        
    }
      delay(Delay_Between_Commands);
    1bf4:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001bf8 <_ZN3HBT7setAuthEi>:


// Sets device authentication type

void HBT::setAuth(int authtype)
{
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
    1c02:	8b 01       	movw	r16, r22
    _serial = &Serial1;
    1c04:	84 e8       	ldi	r24, 0x84	; 132
    1c06:	94 e0       	ldi	r25, 0x04	; 4
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+TYPE");
    1c0c:	6d e8       	ldi	r22, 0x8D	; 141
    1c0e:	72 e0       	ldi	r23, 0x02	; 2
    1c10:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    
    switch (authtype)
    1c14:	01 15       	cp	r16, r1
    1c16:	11 05       	cpc	r17, r1
    1c18:	41 f0       	breq	.+16     	; 0x1c2a <_ZN3HBT7setAuthEi+0x32>
    1c1a:	02 30       	cpi	r16, 0x02	; 2
    1c1c:	11 05       	cpc	r17, r1
    1c1e:	69 f4       	brne	.+26     	; 0x1c3a <_ZN3HBT7setAuthEi+0x42>
        case OPEN:
            _serial->print(OPEN);
            break;
            
        case SECURED:
            _serial->print(SECURED);
    1c20:	4a e0       	ldi	r20, 0x0A	; 10
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	62 e0       	ldi	r22, 0x02	; 2
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <_ZN3HBT7setAuthEi+0x3a>
    _serial->print("AT+TYPE");
    
    switch (authtype)
    {
        case OPEN:
            _serial->print(OPEN);
    1c2a:	4a e0       	ldi	r20, 0x0A	; 10
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
            break;
            
        case SECURED:
            _serial->print(SECURED);
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN5Print5printEii>
            break;
            
            
    }

    delay(Delay_Between_Commands);
    1c3a:	62 e3       	ldi	r22, 0x32	; 50
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
            break;
            
            
    }

    delay(Delay_Between_Commands);
    1c4a:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001c4e <_ZN3HBT20setTransmissionPowerEi>:


// Sets Transmission power of HBT's BLE module

void HBT::setTransmissionPower(int power)
{
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	8b 01       	movw	r16, r22
    _serial = &Serial1;
    1c5a:	84 e8       	ldi	r24, 0x84	; 132
    1c5c:	94 e0       	ldi	r25, 0x04	; 4
    1c5e:	9b 83       	std	Y+3, r25	; 0x03
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+POWE");
    1c62:	65 e9       	ldi	r22, 0x95	; 149
    1c64:	72 e0       	ldi	r23, 0x02	; 2
    1c66:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    switch (power)
    1c6a:	01 30       	cpi	r16, 0x01	; 1
    1c6c:	11 05       	cpc	r17, r1
    1c6e:	99 f0       	breq	.+38     	; 0x1c96 <_ZN3HBT20setTransmissionPowerEi+0x48>
    1c70:	3c f4       	brge	.+14     	; 0x1c80 <_ZN3HBT20setTransmissionPowerEi+0x32>
    1c72:	01 2b       	or	r16, r17
    1c74:	e9 f4       	brne	.+58     	; 0x1cb0 <_ZN3HBT20setTransmissionPowerEi+0x62>
    {
        case Minus_Twenty_Three:
            _serial->print(Minus_Twenty_Three);
    1c76:	4a e0       	ldi	r20, 0x0A	; 10
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	14 c0       	rjmp	.+40     	; 0x1ca8 <_ZN3HBT20setTransmissionPowerEi+0x5a>

void HBT::setTransmissionPower(int power)
{
    _serial = &Serial1;
    _serial->print("AT+POWE");
    switch (power)
    1c80:	02 30       	cpi	r16, 0x02	; 2
    1c82:	11 05       	cpc	r17, r1
    1c84:	69 f0       	breq	.+26     	; 0x1ca0 <_ZN3HBT20setTransmissionPowerEi+0x52>
    1c86:	03 30       	cpi	r16, 0x03	; 3
    1c88:	11 05       	cpc	r17, r1
    1c8a:	91 f4       	brne	.+36     	; 0x1cb0 <_ZN3HBT20setTransmissionPowerEi+0x62>
        case Zero:
            _serial->print(Zero);
            break;
            
        case Six:
            _serial->print(Six);
    1c8c:	4a e0       	ldi	r20, 0x0A	; 10
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <_ZN3HBT20setTransmissionPowerEi+0x5a>
        case Minus_Twenty_Three:
            _serial->print(Minus_Twenty_Three);
            break;
            
        case Minus_Six:
            _serial->print(Minus_Six);
    1c96:	4a e0       	ldi	r20, 0x0A	; 10
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <_ZN3HBT20setTransmissionPowerEi+0x5a>
            break;
            
        case Zero:
            _serial->print(Zero);
    1ca0:	4a e0       	ldi	r20, 0x0A	; 10
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
            break;
            
        case Six:
            _serial->print(Six);
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN5Print5printEii>
            break;
            
            
    }
    delay(Delay_Between_Commands);
    1cb0:	62 e3       	ldi	r22, 0x32	; 50
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0

}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
            _serial->print(Six);
            break;
            
            
    }
    delay(Delay_Between_Commands);
    1cc0:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001cc4 <_ZN3HBT11setWorkRoleEi>:


// Sets HBT's work role

void HBT::setWorkRole(int role)
{
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	ec 01       	movw	r28, r24
    1cce:	8b 01       	movw	r16, r22
    _serial = &Serial1;
    1cd0:	84 e8       	ldi	r24, 0x84	; 132
    1cd2:	94 e0       	ldi	r25, 0x04	; 4
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    _serial->print("AT+ROLE");
    1cd8:	65 e0       	ldi	r22, 0x05	; 5
    1cda:	73 e0       	ldi	r23, 0x03	; 3
    1cdc:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN5Print5printEPKc>
    
    switch (role)
    1ce0:	01 15       	cp	r16, r1
    1ce2:	11 05       	cpc	r17, r1
    1ce4:	41 f0       	breq	.+16     	; 0x1cf6 <_ZN3HBT11setWorkRoleEi+0x32>
    1ce6:	01 30       	cpi	r16, 0x01	; 1
    1ce8:	11 05       	cpc	r17, r1
    1cea:	69 f4       	brne	.+26     	; 0x1d06 <_ZN3HBT11setWorkRoleEi+0x42>
    {
        case MASTER:
            _serial->print(MASTER);
    1cec:	4a e0       	ldi	r20, 0x0A	; 10
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <_ZN3HBT11setWorkRoleEi+0x3a>
            break;
            
        case SLAVE:
            _serial->print(SLAVE);
    1cf6:	4a e0       	ldi	r20, 0x0A	; 10
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN5Print5printEii>
            break;
        
    }
    delay(Delay_Between_Commands);
    1d06:	62 e3       	ldi	r22, 0x32	; 50
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
        case SLAVE:
            _serial->print(SLAVE);
            break;
        
    }
    delay(Delay_Between_Commands);
    1d16:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <delay>

00001d1a <_ZN3HBT9availableEv>:
}


bool HBT::available() // retun bool if anything available on BLE RX Pin
{
	_serial = &Serial1;
    1d1a:	24 e8       	ldi	r18, 0x84	; 132
    1d1c:	34 e0       	ldi	r19, 0x04	; 4
    1d1e:	fc 01       	movw	r30, r24
    1d20:	33 83       	std	Z+3, r19	; 0x03
    1d22:	22 83       	std	Z+2, r18	; 0x02
    return _serial->available(); // retun bool if anything available on BLE RX Pin
    1d24:	c9 01       	movw	r24, r18
    1d26:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN14HardwareSerial9availableEv>
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	89 2b       	or	r24, r25
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <_ZN3HBT9availableEv+0x18>
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    
}
    1d32:	82 2f       	mov	r24, r18
    1d34:	08 95       	ret

00001d36 <_ZN3HBT4readEv>:
}


int HBT::read() // Reads data from HBT ble RX Pin
{
    _serial = &Serial1;
    1d36:	24 e8       	ldi	r18, 0x84	; 132
    1d38:	34 e0       	ldi	r19, 0x04	; 4
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	33 83       	std	Z+3, r19	; 0x03
    1d3e:	22 83       	std	Z+2, r18	; 0x02
    return _serial->read();
    1d40:	c9 01       	movw	r24, r18
    1d42:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <_ZN14HardwareSerial4readEv>

00001d46 <_ZN3HBT5writeEh>:
}

size_t HBT::write(uint8_t byte) // Writes data to HBT ble TX pin
{
    _serial = &Serial1;
    1d46:	24 e8       	ldi	r18, 0x84	; 132
    1d48:	34 e0       	ldi	r19, 0x04	; 4
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	33 83       	std	Z+3, r19	; 0x03
    1d4e:	22 83       	std	Z+2, r18	; 0x02
    return _serial->write(byte);
    1d50:	c9 01       	movw	r24, r18
    1d52:	0c 94 25 10 	jmp	0x204a	; 0x204a <_ZN14HardwareSerial5writeEh>

00001d56 <_ZN7Serial_5writeEh>:
{
	USB_Flush(CDC_TX);
}

size_t Serial_::write(uint8_t c)
{
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	1f 92       	push	r1
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	69 83       	std	Y+1, r22	; 0x01
	return write(&c, 1);
    1d62:	dc 01       	movw	r26, r24
    1d64:	ed 91       	ld	r30, X+
    1d66:	fc 91       	ld	r31, X
    1d68:	02 80       	ldd	r0, Z+2	; 0x02
    1d6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6c:	e0 2d       	mov	r30, r0
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	09 95       	icall
}
    1d7a:	0f 90       	pop	r0
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <_ZN7Serial_4peekEv>:
	}
	return USB_Available(CDC_RX);
}

int Serial_::peek(void)
{
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	ec 01       	movw	r28, r24
	if (peek_buffer < 0)
    1d88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d8c:	97 ff       	sbrs	r25, 7
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <_ZN7Serial_4peekEv+0x18>
		peek_buffer = USB_Recv(CDC_RX);
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	0e 94 76 14 	call	0x28ec	; 0x28ec <_Z8USB_Recvh>
    1d96:	9d 87       	std	Y+13, r25	; 0x0d
    1d98:	8c 87       	std	Y+12, r24	; 0x0c
	return peek_buffer;
}
    1d9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <_ZN7Serial_5flushEv>:
	return USB_SendSpace(CDC_TX);
}

void Serial_::flush(void)
{
	USB_Flush(CDC_TX);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <_Z9USB_Flushh>

00001daa <_ZN7Serial_9availableEv>:
{
}

int Serial_::available(void)
{
	if (peek_buffer >= 0) {
    1daa:	fc 01       	movw	r30, r24
    1dac:	84 85       	ldd	r24, Z+12	; 0x0c
    1dae:	95 85       	ldd	r25, Z+13	; 0x0d
    1db0:	97 fd       	sbrc	r25, 7
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <_ZN7Serial_9availableEv+0x16>
		return 1 + USB_Available(CDC_RX);
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	0e 94 20 14 	call	0x2840	; 0x2840 <_Z13USB_Availableh>
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	08 95       	ret
	}
	return USB_Available(CDC_RX);
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	0e 94 20 14 	call	0x2840	; 0x2840 <_Z13USB_Availableh>
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
}
    1dc8:	08 95       	ret

00001dca <_ZN7Serial_4readEv>:
		peek_buffer = USB_Recv(CDC_RX);
	return peek_buffer;
}

int Serial_::read(void)
{
    1dca:	fc 01       	movw	r30, r24
	if (peek_buffer >= 0) {
    1dcc:	84 85       	ldd	r24, Z+12	; 0x0c
    1dce:	95 85       	ldd	r25, Z+13	; 0x0d
    1dd0:	97 fd       	sbrc	r25, 7
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <_ZN7Serial_4readEv+0x14>
		int c = peek_buffer;
		peek_buffer = -1;
    1dd4:	2f ef       	ldi	r18, 0xFF	; 255
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	35 87       	std	Z+13, r19	; 0x0d
    1dda:	24 87       	std	Z+12, r18	; 0x0c
		return c;
    1ddc:	08 95       	ret
	}
	return USB_Recv(CDC_RX);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_Z8USB_Recvh>

00001de4 <_ZN7Serial_5writeEPKhj>:
{
	return write(&c, 1);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
	 the connection is closed are lost - just like with a UART. */
	
	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)	{
    1dea:	80 91 0b 01 	lds	r24, 0x010B
    1dee:	88 23       	and	r24, r24
    1df0:	31 f0       	breq	.+12     	; 0x1dfe <_ZN7Serial_5writeEPKhj+0x1a>
		int r = USB_Send(CDC_TX,buffer,size);
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	0e 94 a7 14 	call	0x294e	; 0x294e <_Z8USB_SendhPKvi>
		if (r > 0) {
    1df8:	18 16       	cp	r1, r24
    1dfa:	19 06       	cpc	r1, r25
    1dfc:	34 f0       	brlt	.+12     	; 0x1e0a <_ZN7Serial_5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9b 83       	std	Y+3, r25	; 0x03
    1e04:	8a 83       	std	Y+2, r24	; 0x02
			return r;
		} else {
			setWriteError();
			return 0;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	setWriteError();
	return 0;
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <_Z16CDC_GetInterfacePh>:
	D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT),USB_ENDPOINT_TYPE_BULK,USB_EP_SIZE,0),
	D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN ),USB_ENDPOINT_TYPE_BULK,USB_EP_SIZE,0)
};

int CDC_GetInterface(u8* interfaceNum)
{
    1e10:	fc 01       	movw	r30, r24
	interfaceNum[0] += 2;	// uses 2
    1e12:	90 81       	ld	r25, Z
    1e14:	9e 5f       	subi	r25, 0xFE	; 254
    1e16:	90 83       	st	Z, r25
	return USB_SendControl(TRANSFER_PGM,&_cdcInterface,sizeof(_cdcInterface));
    1e18:	42 e4       	ldi	r20, 0x42	; 66
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	61 eb       	ldi	r22, 0xB1	; 177
    1e1e:	71 e0       	ldi	r23, 0x01	; 1
    1e20:	80 e8       	ldi	r24, 0x80	; 128
    1e22:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <_Z15USB_SendControlhPKvi>

00001e26 <_Z9CDC_SetupR8USBSetup>:
}

bool CDC_Setup(USBSetup& setup)
{
    1e26:	fc 01       	movw	r30, r24
	u8 r = setup.bRequest;
    1e28:	81 81       	ldd	r24, Z+1	; 0x01
	u8 requestType = setup.bmRequestType;
    1e2a:	90 81       	ld	r25, Z

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
    1e2c:	91 3a       	cpi	r25, 0xA1	; 161
    1e2e:	59 f4       	brne	.+22     	; 0x1e46 <_Z9CDC_SetupR8USBSetup+0x20>
	{
		if (CDC_GET_LINE_CODING == r)
    1e30:	81 32       	cpi	r24, 0x21	; 33
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <_Z9CDC_SetupR8USBSetup+0x10>
    1e34:	58 c0       	rjmp	.+176    	; 0x1ee6 <_Z9CDC_SetupR8USBSetup+0xc0>
		{
			USB_SendControl(0,(void*)&_usbLineInfo,7);
    1e36:	47 e0       	ldi	r20, 0x07	; 7
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	64 e0       	ldi	r22, 0x04	; 4
    1e3c:	71 e0       	ldi	r23, 0x01	; 1
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_Z15USB_SendControlhPKvi>
    1e44:	66 c0       	rjmp	.+204    	; 0x1f12 <_Z9CDC_SetupR8USBSetup+0xec>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
    1e46:	91 32       	cpi	r25, 0x21	; 33
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <_Z9CDC_SetupR8USBSetup+0x26>
    1e4a:	4d c0       	rjmp	.+154    	; 0x1ee6 <_Z9CDC_SetupR8USBSetup+0xc0>
	{
		if (CDC_SEND_BREAK == r)
    1e4c:	83 32       	cpi	r24, 0x23	; 35
    1e4e:	91 f4       	brne	.+36     	; 0x1e74 <_Z9CDC_SetupR8USBSetup+0x4e>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	89 2f       	mov	r24, r25
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	98 2f       	mov	r25, r24
    1e58:	88 27       	eor	r24, r24
    1e5a:	22 81       	ldd	r18, Z+2	; 0x02
    1e5c:	82 2b       	or	r24, r18
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	80 93 00 01 	sts	0x0100, r24
    1e66:	90 93 01 01 	sts	0x0101, r25
    1e6a:	a0 93 02 01 	sts	0x0102, r26
    1e6e:	b0 93 03 01 	sts	0x0103, r27
    1e72:	4f c0       	rjmp	.+158    	; 0x1f12 <_Z9CDC_SetupR8USBSetup+0xec>
		}

		if (CDC_SET_LINE_CODING == r)
    1e74:	80 32       	cpi	r24, 0x20	; 32
    1e76:	39 f4       	brne	.+14     	; 0x1e86 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USB_RecvControl((void*)&_usbLineInfo,7);
    1e78:	67 e0       	ldi	r22, 0x07	; 7
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	0e 94 66 15 	call	0x2acc	; 0x2acc <_Z15USB_RecvControlPvi>
    1e84:	06 c0       	rjmp	.+12     	; 0x1e92 <_Z9CDC_SetupR8USBSetup+0x6c>
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
    1e86:	82 32       	cpi	r24, 0x22	; 34
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <_Z9CDC_SetupR8USBSetup+0x66>
    1e8a:	43 c0       	rjmp	.+134    	; 0x1f12 <_Z9CDC_SetupR8USBSetup+0xec>
		{
			_usbLineInfo.lineState = setup.wValueL;
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	80 93 0b 01 	sts	0x010B, r24
#ifndef MAGIC_KEY_POS
#define MAGIC_KEY_POS 0x0800
#endif

			// We check DTR state to determine if host port is open (bit 0 of lineState).
			if (1200 == _usbLineInfo.dwDTERate && (_usbLineInfo.lineState & 0x01) == 0)
    1e92:	80 91 04 01 	lds	r24, 0x0104
    1e96:	90 91 05 01 	lds	r25, 0x0105
    1e9a:	a0 91 06 01 	lds	r26, 0x0106
    1e9e:	b0 91 07 01 	lds	r27, 0x0107
    1ea2:	80 3b       	cpi	r24, 0xB0	; 176
    1ea4:	94 40       	sbci	r25, 0x04	; 4
    1ea6:	a1 05       	cpc	r26, r1
    1ea8:	b1 05       	cpc	r27, r1
    1eaa:	f9 f4       	brne	.+62     	; 0x1eea <_Z9CDC_SetupR8USBSetup+0xc4>
    1eac:	80 91 0b 01 	lds	r24, 0x010B
    1eb0:	80 fd       	sbrc	r24, 0
    1eb2:	1b c0       	rjmp	.+54     	; 0x1eea <_Z9CDC_SetupR8USBSetup+0xc4>
			{
#if MAGIC_KEY_POS != (RAMEND-1)
				*(uint16_t *)(RAMEND-1) = *(uint16_t *)MAGIC_KEY_POS;
    1eb4:	80 91 00 08 	lds	r24, 0x0800
    1eb8:	90 91 01 08 	lds	r25, 0x0801
    1ebc:	90 93 ff 0a 	sts	0x0AFF, r25
    1ec0:	80 93 fe 0a 	sts	0x0AFE, r24
				*(uint16_t *)MAGIC_KEY_POS = MAGIC_KEY;
    1ec4:	87 e7       	ldi	r24, 0x77	; 119
    1ec6:	97 e7       	ldi	r25, 0x77	; 119
    1ec8:	90 93 01 08 	sts	0x0801, r25
    1ecc:	80 93 00 08 	sts	0x0800, r24
    1ed0:	9b e0       	ldi	r25, 0x0B	; 11
    1ed2:	88 e1       	ldi	r24, 0x18	; 24
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	a8 95       	wdr
    1eda:	80 93 60 00 	sts	0x0060, r24
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	90 93 60 00 	sts	0x0060, r25
    1ee4:	16 c0       	rjmp	.+44     	; 0x1f12 <_Z9CDC_SetupR8USBSetup+0xec>
#endif
			}
		}
		return true;
	}
	return false;
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	08 95       	ret
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	a8 95       	wdr
    1ef0:	80 91 60 00 	lds	r24, 0x0060
    1ef4:	88 61       	ori	r24, 0x18	; 24
    1ef6:	80 93 60 00 	sts	0x0060, r24
    1efa:	10 92 60 00 	sts	0x0060, r1
    1efe:	0f be       	out	0x3f, r0	; 63
				// twiggle more than once before stabilizing.
				// To avoid spurious resets we set the watchdog to 250ms and eventually
				// cancel if DTR goes back high.

				wdt_disable();
				wdt_reset();
    1f00:	a8 95       	wdr
#if MAGIC_KEY_POS != (RAMEND-1)
				*(uint16_t *)MAGIC_KEY_POS = *(uint16_t *)(RAMEND-1);
    1f02:	80 91 fe 0a 	lds	r24, 0x0AFE
    1f06:	90 91 ff 0a 	lds	r25, 0x0AFF
    1f0a:	90 93 01 08 	sts	0x0801, r25
    1f0e:	80 93 00 08 	sts	0x0800, r24
#else
				*(uint16_t *)MAGIC_KEY_POS = 0x0000;
#endif
			}
		}
		return true;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
    1f14:	08 95       	ret

00001f16 <_ZN7Serial_5beginEm>:


void Serial_::begin(unsigned long /* baud_count */)
{
	peek_buffer = -1;
    1f16:	2f ef       	ldi	r18, 0xFF	; 255
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	35 87       	std	Z+13, r19	; 0x0d
    1f1e:	24 87       	std	Z+12, r18	; 0x0c
    1f20:	08 95       	ret

00001f22 <_GLOBAL__sub_I__cdcInterface>:
  public:
    Print() : write_error(0) {}
    1f22:	e4 e3       	ldi	r30, 0x34	; 52
    1f24:	f4 e0       	ldi	r31, 0x04	; 4
    1f26:	13 82       	std	Z+3, r1	; 0x03
    1f28:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1f2a:	88 ee       	ldi	r24, 0xE8	; 232
    1f2c:	93 e0       	ldi	r25, 0x03	; 3
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	84 83       	std	Z+4, r24	; 0x04
    1f34:	95 83       	std	Z+5, r25	; 0x05
    1f36:	a6 83       	std	Z+6, r26	; 0x06
    1f38:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    1f3a:	87 e1       	ldi	r24, 0x17	; 23
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	95 87       	std	Z+13, r25	; 0x0d
    1f48:	84 87       	std	Z+12, r24	; 0x0c
    1f4a:	08 95       	ret

00001f4c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1f4c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1f4e:	91 8d       	ldd	r25, Z+25	; 0x19
    1f50:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f52:	89 2f       	mov	r24, r25
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	80 5c       	subi	r24, 0xC0	; 192
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	82 1b       	sub	r24, r18
    1f5c:	91 09       	sbc	r25, r1
}
    1f5e:	8f 73       	andi	r24, 0x3F	; 63
    1f60:	99 27       	eor	r25, r25
    1f62:	08 95       	ret

00001f64 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1f64:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1f66:	91 8d       	ldd	r25, Z+25	; 0x19
    1f68:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f6a:	98 17       	cp	r25, r24
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1f6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f70:	e8 0f       	add	r30, r24
    1f72:	f1 1d       	adc	r31, r1
    1f74:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1f7e:	08 95       	ret

00001f80 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1f80:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1f82:	91 8d       	ldd	r25, Z+25	; 0x19
    1f84:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f86:	98 17       	cp	r25, r24
    1f88:	61 f0       	breq	.+24     	; 0x1fa2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f8c:	df 01       	movw	r26, r30
    1f8e:	a8 0f       	add	r26, r24
    1f90:	b1 1d       	adc	r27, r1
    1f92:	5d 96       	adiw	r26, 0x1d	; 29
    1f94:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1f96:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f98:	9f 5f       	subi	r25, 0xFF	; 255
    1f9a:	9f 73       	andi	r25, 0x3F	; 63
    1f9c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1fa6:	08 95       	ret

00001fa8 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1fa8:	89 e2       	ldi	r24, 0x29	; 41
    1faa:	91 e1       	ldi	r25, 0x11	; 17
    1fac:	89 2b       	or	r24, r25
    1fae:	49 f0       	breq	.+18     	; 0x1fc2 <_Z14serialEventRunv+0x1a>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	89 2b       	or	r24, r25
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <_Z14serialEventRunv+0x1a>
    1fb8:	0e 94 29 11 	call	0x2252	; 0x2252 <_Z17Serial1_availablev>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1fc2:	08 95       	ret

00001fc4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1fc4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1fc6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fc8:	df 01       	movw	r26, r30
    1fca:	a8 0f       	add	r26, r24
    1fcc:	b1 1d       	adc	r27, r1
    1fce:	a3 5a       	subi	r26, 0xA3	; 163
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1fd4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	8f 73       	andi	r24, 0x3F	; 63
    1fdc:	99 27       	eor	r25, r25
    1fde:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1fe0:	a6 89       	ldd	r26, Z+22	; 0x16
    1fe2:	b7 89       	ldd	r27, Z+23	; 0x17
    1fe4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1fe6:	a0 89       	ldd	r26, Z+16	; 0x10
    1fe8:	b1 89       	ldd	r27, Z+17	; 0x11
    1fea:	8c 91       	ld	r24, X
    1fec:	80 64       	ori	r24, 0x40	; 64
    1fee:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1ff0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ff2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ff4:	98 13       	cpse	r25, r24
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1ff8:	02 88       	ldd	r0, Z+18	; 0x12
    1ffa:	f3 89       	ldd	r31, Z+19	; 0x13
    1ffc:	e0 2d       	mov	r30, r0
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 7d       	andi	r24, 0xDF	; 223
    2002:	80 83       	st	Z, r24
    2004:	08 95       	ret

00002006 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    200c:	88 8d       	ldd	r24, Y+24	; 0x18
    200e:	88 23       	and	r24, r24
    2010:	c9 f0       	breq	.+50     	; 0x2044 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2012:	ea 89       	ldd	r30, Y+18	; 0x12
    2014:	fb 89       	ldd	r31, Y+19	; 0x13
    2016:	80 81       	ld	r24, Z
    2018:	85 fd       	sbrc	r24, 5
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <_ZN14HardwareSerial5flushEv+0x20>
    201c:	a8 89       	ldd	r26, Y+16	; 0x10
    201e:	b9 89       	ldd	r27, Y+17	; 0x11
    2020:	8c 91       	ld	r24, X
    2022:	86 fd       	sbrc	r24, 6
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	07 fc       	sbrc	r0, 7
    202a:	f5 cf       	rjmp	.-22     	; 0x2016 <_ZN14HardwareSerial5flushEv+0x10>
    202c:	80 81       	ld	r24, Z
    202e:	85 ff       	sbrs	r24, 5
    2030:	f2 cf       	rjmp	.-28     	; 0x2016 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2032:	a8 89       	ldd	r26, Y+16	; 0x10
    2034:	b9 89       	ldd	r27, Y+17	; 0x11
    2036:	8c 91       	ld	r24, X
    2038:	85 ff       	sbrs	r24, 5
    203a:	ed cf       	rjmp	.-38     	; 0x2016 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    203c:	ce 01       	movw	r24, r28
    203e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2042:	e7 cf       	rjmp	.-50     	; 0x2012 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ec 01       	movw	r28, r24
  _written = true;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    205c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    205e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2060:	98 13       	cpse	r25, r24
    2062:	05 c0       	rjmp	.+10     	; 0x206e <_ZN14HardwareSerial5writeEh+0x24>
    2064:	e8 89       	ldd	r30, Y+16	; 0x10
    2066:	f9 89       	ldd	r31, Y+17	; 0x11
    2068:	80 81       	ld	r24, Z
    206a:	85 fd       	sbrc	r24, 5
    206c:	24 c0       	rjmp	.+72     	; 0x20b6 <_ZN14HardwareSerial5writeEh+0x6c>
    206e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2070:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	0f 5f       	subi	r16, 0xFF	; 255
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	0f 73       	andi	r16, 0x3F	; 63
    207a:	11 27       	eor	r17, r17
    207c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    207e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2080:	e8 12       	cpse	r14, r24
    2082:	0c c0       	rjmp	.+24     	; 0x209c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	07 fc       	sbrc	r0, 7
    2088:	fa cf       	rjmp	.-12     	; 0x207e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    208a:	e8 89       	ldd	r30, Y+16	; 0x10
    208c:	f9 89       	ldd	r31, Y+17	; 0x11
    208e:	80 81       	ld	r24, Z
    2090:	85 ff       	sbrs	r24, 5
    2092:	f5 cf       	rjmp	.-22     	; 0x207e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2094:	ce 01       	movw	r24, r28
    2096:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    209a:	f1 cf       	rjmp	.-30     	; 0x207e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    209c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209e:	fe 01       	movw	r30, r28
    20a0:	e8 0f       	add	r30, r24
    20a2:	f1 1d       	adc	r31, r1
    20a4:	e3 5a       	subi	r30, 0xA3	; 163
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    20aa:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    20ac:	ea 89       	ldd	r30, Y+18	; 0x12
    20ae:	fb 89       	ldd	r31, Y+19	; 0x13
    20b0:	80 81       	ld	r24, Z
    20b2:	80 62       	ori	r24, 0x20	; 32
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    20b6:	ee 89       	ldd	r30, Y+22	; 0x16
    20b8:	ff 89       	ldd	r31, Y+23	; 0x17
    20ba:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    20bc:	e8 89       	ldd	r30, Y+16	; 0x10
    20be:	f9 89       	ldd	r31, Y+17	; 0x11
    20c0:	80 81       	ld	r24, Z
    20c2:	80 64       	ori	r24, 0x40	; 64
    20c4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	08 95       	ret

000020d8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	ec 01       	movw	r28, r24
    20e8:	6a 01       	movw	r12, r20
    20ea:	7b 01       	movw	r14, r22
    20ec:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    20ee:	e8 89       	ldd	r30, Y+16	; 0x10
    20f0:	f9 89       	ldd	r31, Y+17	; 0x11
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    20f6:	41 15       	cp	r20, r1
    20f8:	51 4e       	sbci	r21, 0xE1	; 225
    20fa:	61 05       	cpc	r22, r1
    20fc:	71 05       	cpc	r23, r1
    20fe:	b1 f0       	breq	.+44     	; 0x212c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	79 e0       	ldi	r23, 0x09	; 9
    2104:	8d e3       	ldi	r24, 0x3D	; 61
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a7 01       	movw	r20, r14
    210a:	96 01       	movw	r18, r12
    210c:	0e 94 25 1a 	call	0x344a	; 0x344a <__udivmodsi4>
    2110:	da 01       	movw	r26, r20
    2112:	c9 01       	movw	r24, r18
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	a1 09       	sbc	r26, r1
    2118:	b1 09       	sbc	r27, r1
    211a:	b6 95       	lsr	r27
    211c:	a7 95       	ror	r26
    211e:	97 95       	ror	r25
    2120:	87 95       	ror	r24
    2122:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2124:	41 15       	cp	r20, r1
    2126:	80 e1       	ldi	r24, 0x10	; 16
    2128:	58 07       	cpc	r21, r24
    212a:	a8 f0       	brcs	.+42     	; 0x2156 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    212c:	e8 89       	ldd	r30, Y+16	; 0x10
    212e:	f9 89       	ldd	r31, Y+17	; 0x11
    2130:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2132:	60 e8       	ldi	r22, 0x80	; 128
    2134:	74 e8       	ldi	r23, 0x84	; 132
    2136:	8e e1       	ldi	r24, 0x1E	; 30
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a7 01       	movw	r20, r14
    213c:	96 01       	movw	r18, r12
    213e:	0e 94 25 1a 	call	0x344a	; 0x344a <__udivmodsi4>
    2142:	ba 01       	movw	r22, r20
    2144:	a9 01       	movw	r20, r18
    2146:	41 50       	subi	r20, 0x01	; 1
    2148:	51 09       	sbc	r21, r1
    214a:	61 09       	sbc	r22, r1
    214c:	71 09       	sbc	r23, r1
    214e:	76 95       	lsr	r23
    2150:	67 95       	ror	r22
    2152:	57 95       	ror	r21
    2154:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2156:	ec 85       	ldd	r30, Y+12	; 0x0c
    2158:	fd 85       	ldd	r31, Y+13	; 0x0d
    215a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    215c:	ee 85       	ldd	r30, Y+14	; 0x0e
    215e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2160:	40 83       	st	Z, r20

  _written = false;
    2162:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2164:	ec 89       	ldd	r30, Y+20	; 0x14
    2166:	fd 89       	ldd	r31, Y+21	; 0x15
    2168:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    216a:	ea 89       	ldd	r30, Y+18	; 0x12
    216c:	fb 89       	ldd	r31, Y+19	; 0x13
    216e:	80 81       	ld	r24, Z
    2170:	80 61       	ori	r24, 0x10	; 16
    2172:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2174:	ea 89       	ldd	r30, Y+18	; 0x12
    2176:	fb 89       	ldd	r31, Y+19	; 0x13
    2178:	80 81       	ld	r24, Z
    217a:	88 60       	ori	r24, 0x08	; 8
    217c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    217e:	ea 89       	ldd	r30, Y+18	; 0x12
    2180:	fb 89       	ldd	r31, Y+19	; 0x13
    2182:	80 81       	ld	r24, Z
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2188:	ea 89       	ldd	r30, Y+18	; 0x12
    218a:	fb 89       	ldd	r31, Y+19	; 0x13
    218c:	80 81       	ld	r24, Z
    218e:	8f 7d       	andi	r24, 0xDF	; 223
    2190:	80 83       	st	Z, r24
}
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	ff 90       	pop	r15
    219a:	ef 90       	pop	r14
    219c:	df 90       	pop	r13
    219e:	cf 90       	pop	r12
    21a0:	08 95       	ret

000021a2 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	2f 93       	push	r18
    21ae:	8f 93       	push	r24
    21b0:	9f 93       	push	r25
    21b2:	ef 93       	push	r30
    21b4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    21b6:	e0 91 94 04 	lds	r30, 0x0494
    21ba:	f0 91 95 04 	lds	r31, 0x0495
    21be:	80 81       	ld	r24, Z
    21c0:	e0 91 9a 04 	lds	r30, 0x049A
    21c4:	f0 91 9b 04 	lds	r31, 0x049B
    21c8:	82 fd       	sbrc	r24, 2
    21ca:	12 c0       	rjmp	.+36     	; 0x21f0 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    21cc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    21ce:	80 91 9d 04 	lds	r24, 0x049D
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    21d6:	20 91 9e 04 	lds	r18, 0x049E
    21da:	82 17       	cp	r24, r18
    21dc:	51 f0       	breq	.+20     	; 0x21f2 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    21de:	e0 91 9d 04 	lds	r30, 0x049D
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	ec 57       	subi	r30, 0x7C	; 124
    21e6:	fb 4f       	sbci	r31, 0xFB	; 251
    21e8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    21ea:	80 93 9d 04 	sts	0x049D, r24
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    21f0:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	9f 91       	pop	r25
    21f8:	8f 91       	pop	r24
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	ef 93       	push	r30
    2226:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2228:	84 e8       	ldi	r24, 0x84	; 132
    222a:	94 e0       	ldi	r25, 0x04	; 4
    222c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2230:	ff 91       	pop	r31
    2232:	ef 91       	pop	r30
    2234:	bf 91       	pop	r27
    2236:	af 91       	pop	r26
    2238:	9f 91       	pop	r25
    223a:	8f 91       	pop	r24
    223c:	7f 91       	pop	r23
    223e:	6f 91       	pop	r22
    2240:	5f 91       	pop	r21
    2242:	4f 91       	pop	r20
    2244:	3f 91       	pop	r19
    2246:	2f 91       	pop	r18
    2248:	0f 90       	pop	r0
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	0f 90       	pop	r0
    224e:	1f 90       	pop	r1
    2250:	18 95       	reti

00002252 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2252:	84 e8       	ldi	r24, 0x84	; 132
    2254:	94 e0       	ldi	r25, 0x04	; 4
    2256:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN14HardwareSerial9availableEv>
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	89 2b       	or	r24, r25
    225e:	09 f4       	brne	.+2      	; 0x2262 <_Z17Serial1_availablev+0x10>
    2260:	20 e0       	ldi	r18, 0x00	; 0
}
    2262:	82 2f       	mov	r24, r18
    2264:	08 95       	ret

00002266 <_GLOBAL__sub_I___vector_25>:
    2266:	e4 e8       	ldi	r30, 0x84	; 132
    2268:	f4 e0       	ldi	r31, 0x04	; 4
    226a:	13 82       	std	Z+3, r1	; 0x03
    226c:	12 82       	std	Z+2, r1	; 0x02
    226e:	88 ee       	ldi	r24, 0xE8	; 232
    2270:	93 e0       	ldi	r25, 0x03	; 3
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	84 83       	std	Z+4, r24	; 0x04
    2278:	95 83       	std	Z+5, r25	; 0x05
    227a:	a6 83       	std	Z+6, r26	; 0x06
    227c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    227e:	87 e2       	ldi	r24, 0x27	; 39
    2280:	93 e0       	ldi	r25, 0x03	; 3
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
    2286:	8d ec       	ldi	r24, 0xCD	; 205
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	95 87       	std	Z+13, r25	; 0x0d
    228c:	84 87       	std	Z+12, r24	; 0x0c
    228e:	8c ec       	ldi	r24, 0xCC	; 204
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	97 87       	std	Z+15, r25	; 0x0f
    2294:	86 87       	std	Z+14, r24	; 0x0e
    2296:	88 ec       	ldi	r24, 0xC8	; 200
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	91 8b       	std	Z+17, r25	; 0x11
    229c:	80 8b       	std	Z+16, r24	; 0x10
    229e:	89 ec       	ldi	r24, 0xC9	; 201
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	93 8b       	std	Z+19, r25	; 0x13
    22a4:	82 8b       	std	Z+18, r24	; 0x12
    22a6:	8a ec       	ldi	r24, 0xCA	; 202
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	95 8b       	std	Z+21, r25	; 0x15
    22ac:	84 8b       	std	Z+20, r24	; 0x14
    22ae:	8e ec       	ldi	r24, 0xCE	; 206
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	97 8b       	std	Z+23, r25	; 0x17
    22b4:	86 8b       	std	Z+22, r24	; 0x16
    22b6:	11 8e       	std	Z+25, r1	; 0x19
    22b8:	12 8e       	std	Z+26, r1	; 0x1a
    22ba:	13 8e       	std	Z+27, r1	; 0x1b
    22bc:	14 8e       	std	Z+28, r1	; 0x1c
    22be:	08 95       	ret

000022c0 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    22c0:	08 95       	ret

000022c2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    22c2:	0e 94 57 18 	call	0x30ae	; 0x30ae <init>

	initVariant();
    22c6:	0e 94 60 11 	call	0x22c0	; 0x22c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    22ca:	81 e2       	ldi	r24, 0x21	; 33
    22cc:	95 e0       	ldi	r25, 0x05	; 5
    22ce:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    22d2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    22d6:	c4 ed       	ldi	r28, 0xD4	; 212
    22d8:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    22da:	0e 94 15 06 	call	0xc2a	; 0xc2a <loop>
		if (serialEventRun) serialEventRun();
    22de:	20 97       	sbiw	r28, 0x00	; 0
    22e0:	e1 f3       	breq	.-8      	; 0x22da <main+0x18>
    22e2:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_Z14serialEventRunv>
    22e6:	f9 cf       	rjmp	.-14     	; 0x22da <main+0x18>

000022e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    22e8:	cf 92       	push	r12
    22ea:	df 92       	push	r13
    22ec:	ef 92       	push	r14
    22ee:	ff 92       	push	r15
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	6c 01       	movw	r12, r24
    22fa:	7a 01       	movw	r14, r20
    22fc:	8b 01       	movw	r16, r22
  size_t n = 0;
    22fe:	c0 e0       	ldi	r28, 0x00	; 0
    2300:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    2302:	ce 15       	cp	r28, r14
    2304:	df 05       	cpc	r29, r15
    2306:	89 f0       	breq	.+34     	; 0x232a <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    2308:	d8 01       	movw	r26, r16
    230a:	6d 91       	ld	r22, X+
    230c:	8d 01       	movw	r16, r26
    230e:	d6 01       	movw	r26, r12
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	01 90       	ld	r0, Z+
    2316:	f0 81       	ld	r31, Z
    2318:	e0 2d       	mov	r30, r0
    231a:	c6 01       	movw	r24, r12
    231c:	09 95       	icall
    231e:	89 2b       	or	r24, r25
    2320:	11 f4       	brne	.+4      	; 0x2326 <_ZN5Print5writeEPKhj+0x3e>
    2322:	7e 01       	movw	r14, r28
    2324:	02 c0       	rjmp	.+4      	; 0x232a <_ZN5Print5writeEPKhj+0x42>
    2326:	21 96       	adiw	r28, 0x01	; 1
    2328:	ec cf       	rjmp	.-40     	; 0x2302 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    232a:	c7 01       	movw	r24, r14
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	08 95       	ret

0000233e <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    233e:	61 15       	cp	r22, r1
    2340:	71 05       	cpc	r23, r1
    2342:	79 f0       	breq	.+30     	; 0x2362 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
    2344:	fb 01       	movw	r30, r22
    2346:	01 90       	ld	r0, Z+
    2348:	00 20       	and	r0, r0
    234a:	e9 f7       	brne	.-6      	; 0x2346 <_ZN5Print5writeEPKc+0x8>
    234c:	31 97       	sbiw	r30, 0x01	; 1
    234e:	af 01       	movw	r20, r30
    2350:	46 1b       	sub	r20, r22
    2352:	57 0b       	sbc	r21, r23
    2354:	dc 01       	movw	r26, r24
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	02 80       	ldd	r0, Z+2	; 0x02
    235c:	f3 81       	ldd	r31, Z+3	; 0x03
    235e:	e0 2d       	mov	r30, r0
    2360:	09 94       	ijmp
    }
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	08 95       	ret

00002368 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2368:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_ZN5Print5writeEPKc>

0000236c <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
    236c:	dc 01       	movw	r26, r24
    236e:	ed 91       	ld	r30, X+
    2370:	fc 91       	ld	r31, X
    2372:	01 90       	ld	r0, Z+
    2374:	f0 81       	ld	r31, Z
    2376:	e0 2d       	mov	r30, r0
    2378:	09 94       	ijmp

0000237a <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    237a:	63 e3       	ldi	r22, 0x33	; 51
    237c:	73 e0       	ldi	r23, 0x03	; 3
    237e:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_ZN5Print5writeEPKc>

00002382 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    238c:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN5Print5writeEPKc>
    2390:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN5Print7printlnEv>
  return n;
}
    2398:	80 0f       	add	r24, r16
    239a:	91 1f       	adc	r25, r17
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	08 95       	ret

000023a6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	a1 97       	sbiw	r28, 0x21	; 33
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	7c 01       	movw	r14, r24
    23d0:	d4 2e       	mov	r13, r20
    23d2:	c5 2e       	mov	r12, r21
    23d4:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    23d6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    23d8:	22 30       	cpi	r18, 0x02	; 2
    23da:	08 f4       	brcc	.+2      	; 0x23de <_ZN5Print11printNumberEmh+0x38>
    23dc:	2a e0       	ldi	r18, 0x0A	; 10
    23de:	8e 01       	movw	r16, r28
    23e0:	0f 5d       	subi	r16, 0xDF	; 223
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    23e4:	82 2e       	mov	r8, r18
    23e6:	91 2c       	mov	r9, r1
    23e8:	a1 2c       	mov	r10, r1
    23ea:	b1 2c       	mov	r11, r1
    23ec:	6d 2d       	mov	r22, r13
    23ee:	7c 2d       	mov	r23, r12
    23f0:	cd 01       	movw	r24, r26
    23f2:	a5 01       	movw	r20, r10
    23f4:	94 01       	movw	r18, r8
    23f6:	0e 94 25 1a 	call	0x344a	; 0x344a <__udivmodsi4>
    n /= base;
    23fa:	d2 2e       	mov	r13, r18
    23fc:	c3 2e       	mov	r12, r19
    23fe:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2400:	01 50       	subi	r16, 0x01	; 1
    2402:	11 09       	sbc	r17, r1
    2404:	6a 30       	cpi	r22, 0x0A	; 10
    2406:	71 05       	cpc	r23, r1
    2408:	81 05       	cpc	r24, r1
    240a:	91 05       	cpc	r25, r1
    240c:	10 f4       	brcc	.+4      	; 0x2412 <_ZN5Print11printNumberEmh+0x6c>
    240e:	60 5d       	subi	r22, 0xD0	; 208
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <_ZN5Print11printNumberEmh+0x6e>
    2412:	69 5c       	subi	r22, 0xC9	; 201
    2414:	f8 01       	movw	r30, r16
    2416:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2418:	23 2b       	or	r18, r19
    241a:	24 2b       	or	r18, r20
    241c:	25 2b       	or	r18, r21
    241e:	31 f7       	brne	.-52     	; 0x23ec <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2420:	b8 01       	movw	r22, r16
    2422:	c7 01       	movw	r24, r14
    2424:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN5Print5writeEPKc>
}
    2428:	a1 96       	adiw	r28, 0x21	; 33
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	08 95       	ret

0000244e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	ec 01       	movw	r28, r24
    2460:	6a 01       	movw	r12, r20
    2462:	7b 01       	movw	r14, r22
  if (base == 0) {
    2464:	21 15       	cp	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	79 f4       	brne	.+30     	; 0x2488 <_ZN5Print5printEli+0x3a>
    return write(n);
    246a:	e8 81       	ld	r30, Y
    246c:	f9 81       	ldd	r31, Y+1	; 0x01
    246e:	01 90       	ld	r0, Z+
    2470:	f0 81       	ld	r31, Z
    2472:	e0 2d       	mov	r30, r0
    2474:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	df 90       	pop	r13
    2484:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2486:	09 94       	ijmp
  } else if (base == 10) {
    2488:	2a 30       	cpi	r18, 0x0A	; 10
    248a:	31 05       	cpc	r19, r1
    248c:	e9 f4       	brne	.+58     	; 0x24c8 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
    248e:	77 ff       	sbrs	r23, 7
    2490:	1a c0       	rjmp	.+52     	; 0x24c6 <_ZN5Print5printEli+0x78>
      int t = print('-');
    2492:	6d e2       	ldi	r22, 0x2D	; 45
    2494:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN5Print5printEc>
    2498:	8c 01       	movw	r16, r24
      n = -n;
    249a:	44 27       	eor	r20, r20
    249c:	55 27       	eor	r21, r21
    249e:	ba 01       	movw	r22, r20
    24a0:	4c 19       	sub	r20, r12
    24a2:	5d 09       	sbc	r21, r13
    24a4:	6e 09       	sbc	r22, r14
    24a6:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	ce 01       	movw	r24, r28
    24ac:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print11printNumberEmh>
    24b0:	80 0f       	add	r24, r16
    24b2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    24c6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    24c8:	b7 01       	movw	r22, r14
    24ca:	a6 01       	movw	r20, r12
    24cc:	ce 01       	movw	r24, r28
  }
}
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	df 90       	pop	r13
    24dc:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    24de:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <_ZN5Print11printNumberEmh>

000024e2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    24e2:	9a 01       	movw	r18, r20
  return print((long) n, base);
    24e4:	ab 01       	movw	r20, r22
    24e6:	77 0f       	add	r23, r23
    24e8:	66 0b       	sbc	r22, r22
    24ea:	77 0b       	sbc	r23, r23
    24ec:	0c 94 27 12 	jmp	0x244e	; 0x244e <_ZN5Print5printEli>

000024f0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    24f0:	21 15       	cp	r18, r1
    24f2:	31 05       	cpc	r19, r1
    24f4:	41 f4       	brne	.+16     	; 0x2506 <_ZN5Print5printEmi+0x16>
    24f6:	dc 01       	movw	r26, r24
    24f8:	ed 91       	ld	r30, X+
    24fa:	fc 91       	ld	r31, X
    24fc:	01 90       	ld	r0, Z+
    24fe:	f0 81       	ld	r31, Z
    2500:	e0 2d       	mov	r30, r0
    2502:	64 2f       	mov	r22, r20
    2504:	09 94       	ijmp
  else return printNumber(n, base);
    2506:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <_ZN5Print11printNumberEmh>

0000250a <_ZN6Stream9timedPeekEv>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    2514:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <millis>
    2518:	68 87       	std	Y+8, r22	; 0x08
    251a:	79 87       	std	Y+9, r23	; 0x09
    251c:	8a 87       	std	Y+10, r24	; 0x0a
    251e:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = peek();
    2520:	e8 81       	ld	r30, Y
    2522:	f9 81       	ldd	r31, Y+1	; 0x01
    2524:	00 84       	ldd	r0, Z+8	; 0x08
    2526:	f1 85       	ldd	r31, Z+9	; 0x09
    2528:	e0 2d       	mov	r30, r0
    252a:	ce 01       	movw	r24, r28
    252c:	09 95       	icall
    if (c >= 0) return c;
    252e:	97 ff       	sbrs	r25, 7
    2530:	17 c0       	rjmp	.+46     	; 0x2560 <_ZN6Stream9timedPeekEv+0x56>
  } while(millis() - _startMillis < _timeout);
    2532:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <millis>
    2536:	08 85       	ldd	r16, Y+8	; 0x08
    2538:	19 85       	ldd	r17, Y+9	; 0x09
    253a:	2a 85       	ldd	r18, Y+10	; 0x0a
    253c:	3b 85       	ldd	r19, Y+11	; 0x0b
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	80 1b       	sub	r24, r16
    2544:	91 0b       	sbc	r25, r17
    2546:	a2 0b       	sbc	r26, r18
    2548:	b3 0b       	sbc	r27, r19
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
    254a:	0c 81       	ldd	r16, Y+4	; 0x04
    254c:	1d 81       	ldd	r17, Y+5	; 0x05
    254e:	2e 81       	ldd	r18, Y+6	; 0x06
    2550:	3f 81       	ldd	r19, Y+7	; 0x07
    2552:	80 17       	cp	r24, r16
    2554:	91 07       	cpc	r25, r17
    2556:	a2 07       	cpc	r26, r18
    2558:	b3 07       	cpc	r27, r19
    255a:	10 f3       	brcs	.-60     	; 0x2520 <_ZN6Stream9timedPeekEv+0x16>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	9f ef       	ldi	r25, 0xFF	; 255
}
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <_ZN6Stream13peekNextDigitE13LookaheadModeb>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)
{
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	ec 01       	movw	r28, r24
    2574:	16 2f       	mov	r17, r22
    2576:	04 2f       	mov	r16, r20
  int c;
  while (1) {
    c = timedPeek();
    2578:	ce 01       	movw	r24, r28
    257a:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN6Stream9timedPeekEv>
    257e:	9c 01       	movw	r18, r24

    if( c < 0 ||
    2580:	97 fd       	sbrc	r25, 7
    2582:	0b c0       	rjmp	.+22     	; 0x259a <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x30>
    2584:	8d 32       	cpi	r24, 0x2D	; 45
    2586:	91 05       	cpc	r25, r1
    2588:	41 f0       	breq	.+16     	; 0x259a <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x30>
        c == '-' ||
        (c >= '0' && c <= '9') ||
    258a:	c0 97       	sbiw	r24, 0x30	; 48
  int c;
  while (1) {
    c = timedPeek();

    if( c < 0 ||
        c == '-' ||
    258c:	0a 97       	sbiw	r24, 0x0a	; 10
    258e:	28 f0       	brcs	.+10     	; 0x259a <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x30>
        (c >= '0' && c <= '9') ||
    2590:	00 23       	and	r16, r16
    2592:	29 f0       	breq	.+10     	; 0x259e <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x34>
        (detectDecimal && c == '.')) return c;
    2594:	2e 32       	cpi	r18, 0x2E	; 46
    2596:	31 05       	cpc	r19, r1
    2598:	11 f4       	brne	.+4      	; 0x259e <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x34>
    259a:	c9 01       	movw	r24, r18
    259c:	1b c0       	rjmp	.+54     	; 0x25d4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>

    switch( lookahead ){
    259e:	11 30       	cpi	r17, 0x01	; 1
    25a0:	b9 f0       	breq	.+46     	; 0x25d0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
    25a2:	12 30       	cpi	r17, 0x02	; 2
    25a4:	69 f4       	brne	.+26     	; 0x25c0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x56>
        case SKIP_NONE: return -1; // Fail code.
        case SKIP_WHITESPACE:
            switch( c ){
    25a6:	2d 30       	cpi	r18, 0x0D	; 13
    25a8:	31 05       	cpc	r19, r1
    25aa:	51 f0       	breq	.+20     	; 0x25c0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x56>
    25ac:	34 f4       	brge	.+12     	; 0x25ba <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    25ae:	29 50       	subi	r18, 0x09	; 9
    25b0:	31 09       	sbc	r19, r1
    25b2:	22 30       	cpi	r18, 0x02	; 2
    25b4:	31 05       	cpc	r19, r1
    25b6:	20 f0       	brcs	.+8      	; 0x25c0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x56>
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
    25ba:	20 32       	cpi	r18, 0x20	; 32
    25bc:	31 05       	cpc	r19, r1
    25be:	41 f4       	brne	.+16     	; 0x25d0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
                default: return -1; // Fail code.
            }
        case SKIP_ALL:
            break;
    }
    read();  // discard non-numeric
    25c0:	e8 81       	ld	r30, Y
    25c2:	f9 81       	ldd	r31, Y+1	; 0x01
    25c4:	06 80       	ldd	r0, Z+6	; 0x06
    25c6:	f7 81       	ldd	r31, Z+7	; 0x07
    25c8:	e0 2d       	mov	r30, r0
    25ca:	ce 01       	movw	r24, r28
    25cc:	09 95       	icall
  }
    25ce:	d4 cf       	rjmp	.-88     	; 0x2578 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xe>
            switch( c ){
                case ' ':
                case '\t':
                case '\r':
                case '\n': break;
                default: return -1; // Fail code.
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
        case SKIP_ALL:
            break;
    }
    read();  // discard non-numeric
  }
}
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	08 95       	ret

000025de <_ZN6Stream8parseIntE13LookaheadModec>:
// lookahead determines how parseInt looks ahead in the stream.
// See LookaheadMode enumeration at the top of the file.
// Lookahead is terminated by the first character that is not a valid part of an integer.
// Once parsing commences, 'ignore' will be skipped in the stream.
long Stream::parseInt(LookaheadMode lookahead, char ignore)
{
    25de:	8f 92       	push	r8
    25e0:	9f 92       	push	r9
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	df 92       	push	r13
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <_ZN6Stream8parseIntE13LookaheadModec+0x18>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <_ZN6Stream8parseIntE13LookaheadModec+0x1a>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	8c 01       	movw	r16, r24
    25fe:	b4 2e       	mov	r11, r20
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit(lookahead, false);
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN6Stream13peekNextDigitE13LookaheadModeb>
    2606:	fc 01       	movw	r30, r24
  // ignore non numeric leading characters
  if(c < 0)
    2608:	97 fd       	sbrc	r25, 7
    260a:	4b c0       	rjmp	.+150    	; 0x26a2 <_ZN6Stream8parseIntE13LookaheadModec+0xc4>
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	a9 01       	movw	r20, r18
    2612:	f1 2c       	mov	r15, r1
    return 0; // zero returned if timeout

  do{
    if(c == ignore)
    2614:	cb 2c       	mov	r12, r11
    2616:	d1 2c       	mov	r13, r1
    2618:	ec 15       	cp	r30, r12
    261a:	fd 05       	cpc	r31, r13
    261c:	f1 f0       	breq	.+60     	; 0x265a <_ZN6Stream8parseIntE13LookaheadModec+0x7c>
      ; // ignore this character
    else if(c == '-')
    261e:	ed 32       	cpi	r30, 0x2D	; 45
    2620:	f1 05       	cpc	r31, r1
    2622:	c9 f0       	breq	.+50     	; 0x2656 <_ZN6Stream8parseIntE13LookaheadModec+0x78>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    2624:	cf 01       	movw	r24, r30
    2626:	c0 97       	sbiw	r24, 0x30	; 48
    2628:	0a 97       	sbiw	r24, 0x0a	; 10
    262a:	b8 f4       	brcc	.+46     	; 0x265a <_ZN6Stream8parseIntE13LookaheadModec+0x7c>
      value = value * 10 + c - '0';
    262c:	aa e0       	ldi	r26, 0x0A	; 10
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__muluhisi3>
    2634:	4f 01       	movw	r8, r30
    2636:	ff 0f       	add	r31, r31
    2638:	aa 08       	sbc	r10, r10
    263a:	bb 08       	sbc	r11, r11
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	88 0d       	add	r24, r8
    2642:	99 1d       	adc	r25, r9
    2644:	aa 1d       	adc	r26, r10
    2646:	bb 1d       	adc	r27, r11
    2648:	9c 01       	movw	r18, r24
    264a:	ad 01       	movw	r20, r26
    264c:	20 53       	subi	r18, 0x30	; 48
    264e:	31 09       	sbc	r19, r1
    2650:	41 09       	sbc	r20, r1
    2652:	51 09       	sbc	r21, r1
    2654:	02 c0       	rjmp	.+4      	; 0x265a <_ZN6Stream8parseIntE13LookaheadModec+0x7c>

  do{
    if(c == ignore)
      ; // ignore this character
    else if(c == '-')
      isNegative = true;
    2656:	ff 24       	eor	r15, r15
    2658:	f3 94       	inc	r15
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    265a:	d8 01       	movw	r26, r16
    265c:	ed 91       	ld	r30, X+
    265e:	fc 91       	ld	r31, X
    2660:	06 80       	ldd	r0, Z+6	; 0x06
    2662:	f7 81       	ldd	r31, Z+7	; 0x07
    2664:	e0 2d       	mov	r30, r0
    2666:	c8 01       	movw	r24, r16
    2668:	29 83       	std	Y+1, r18	; 0x01
    266a:	3a 83       	std	Y+2, r19	; 0x02
    266c:	4b 83       	std	Y+3, r20	; 0x03
    266e:	5c 83       	std	Y+4, r21	; 0x04
    2670:	09 95       	icall
    c = timedPeek();
    2672:	c8 01       	movw	r24, r16
    2674:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN6Stream9timedPeekEv>
    2678:	fc 01       	movw	r30, r24
  }
  while( (c >= '0' && c <= '9') || c == ignore );
    267a:	c0 97       	sbiw	r24, 0x30	; 48
  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	3a 81       	ldd	r19, Y+2	; 0x02
    2680:	4b 81       	ldd	r20, Y+3	; 0x03
    2682:	5c 81       	ldd	r21, Y+4	; 0x04
    2684:	0a 97       	sbiw	r24, 0x0a	; 10
    2686:	40 f2       	brcs	.-112    	; 0x2618 <_ZN6Stream8parseIntE13LookaheadModec+0x3a>
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == ignore );
    2688:	ec 15       	cp	r30, r12
    268a:	fd 05       	cpc	r31, r13
    268c:	29 f2       	breq	.-118    	; 0x2618 <_ZN6Stream8parseIntE13LookaheadModec+0x3a>

  if(isNegative)
    268e:	ff 20       	and	r15, r15
    2690:	61 f0       	breq	.+24     	; 0x26aa <_ZN6Stream8parseIntE13LookaheadModec+0xcc>
    value = -value;
    2692:	66 27       	eor	r22, r22
    2694:	77 27       	eor	r23, r23
    2696:	cb 01       	movw	r24, r22
    2698:	62 1b       	sub	r22, r18
    269a:	73 0b       	sbc	r23, r19
    269c:	84 0b       	sbc	r24, r20
    269e:	95 0b       	sbc	r25, r21
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <_ZN6Stream8parseIntE13LookaheadModec+0xd0>
  int c;

  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	cb 01       	movw	r24, r22
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <_ZN6Stream8parseIntE13LookaheadModec+0xd0>
    26aa:	ca 01       	movw	r24, r20
    26ac:	b9 01       	movw	r22, r18
  while( (c >= '0' && c <= '9') || c == ignore );

  if(isNegative)
    value = -value;
  return value;
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	08 95       	ret

000026ce <_ZL4RecvPVhh>:
	UEINTX = ~(1<<RXOUTI);
}

static inline void Recv(volatile u8* data, u8 count)
{
	while (count--)
    26ce:	61 50       	subi	r22, 0x01	; 1
    26d0:	30 f0       	brcs	.+12     	; 0x26de <_ZL4RecvPVhh+0x10>
		*data++ = UEDATX;
    26d2:	20 91 f1 00 	lds	r18, 0x00F1
    26d6:	fc 01       	movw	r30, r24
    26d8:	20 83       	st	Z, r18
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	f8 cf       	rjmp	.-16     	; 0x26ce <_ZL4RecvPVhh>
	
	RXLED1;					// light the RX LED
    26de:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
    26e0:	84 e6       	ldi	r24, 0x64	; 100
    26e2:	80 93 2a 05 	sts	0x052A, r24
    26e6:	08 95       	ret

000026e8 <_ZL11SendControlh>:
}

static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
    26e8:	40 91 25 05 	lds	r20, 0x0525
    26ec:	50 91 26 05 	lds	r21, 0x0526
    26f0:	20 91 23 05 	lds	r18, 0x0523
    26f4:	30 91 24 05 	lds	r19, 0x0524
    26f8:	42 17       	cp	r20, r18
    26fa:	53 07       	cpc	r21, r19
    26fc:	b4 f4       	brge	.+44     	; 0x272a <_ZL11SendControlh+0x42>
		;
}

static inline u8 WaitForINOrOUT()
{
	while (!(UEINTX & ((1<<TXINI)|(1<<RXOUTI))))
    26fe:	90 91 e8 00 	lds	r25, 0x00E8
    2702:	95 70       	andi	r25, 0x05	; 5
    2704:	e1 f3       	breq	.-8      	; 0x26fe <_ZL11SendControlh+0x16>
		;
	return (UEINTX & (1<<RXOUTI)) == 0;
    2706:	90 91 e8 00 	lds	r25, 0x00E8
static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
    270a:	92 fd       	sbrc	r25, 2
    270c:	19 c0       	rjmp	.+50     	; 0x2740 <_ZL11SendControlh+0x58>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    270e:	80 93 f1 00 	sts	0x00F1, r24
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
    2712:	80 91 25 05 	lds	r24, 0x0525
    2716:	90 91 26 05 	lds	r25, 0x0526
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	8f 73       	andi	r24, 0x3F	; 63
    271e:	99 27       	eor	r25, r25
    2720:	89 2b       	or	r24, r25
    2722:	19 f4       	brne	.+6      	; 0x272a <_ZL11SendControlh+0x42>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    2724:	8e ef       	ldi	r24, 0xFE	; 254
    2726:	80 93 e8 00 	sts	0x00E8, r24
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
			ClearIN();	// Fifo is full, release this packet
	}
	_cmark++;
    272a:	80 91 25 05 	lds	r24, 0x0525
    272e:	90 91 26 05 	lds	r25, 0x0526
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	90 93 26 05 	sts	0x0526, r25
    2738:	80 93 25 05 	sts	0x0525, r24
	return true;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	08 95       	ret
bool SendControl(u8 d)
{
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
			return false;
    2740:	80 e0       	ldi	r24, 0x00	; 0
		if (!((_cmark + 1) & 0x3F))
			ClearIN();	// Fifo is full, release this packet
	}
	_cmark++;
	return true;
};
    2742:	08 95       	ret

00002744 <_ZL24USB_SendStringDescriptorPKhhh>:
}

// Send a USB descriptor string. The string is stored in PROGMEM as a
// plain ASCII string but is sent out as UTF-16 with the correct 2-byte
// prefix
static bool USB_SendStringDescriptor(const u8*string_P, u8 string_len, uint8_t flags) {
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	1f 92       	push	r1
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	18 2f       	mov	r17, r24
    275c:	06 2f       	mov	r16, r22
    275e:	e4 2e       	mov	r14, r20
        SendControl(2 + string_len * 2);
    2760:	86 2f       	mov	r24, r22
    2762:	88 0f       	add	r24, r24
    2764:	8e 5f       	subi	r24, 0xFE	; 254
    2766:	99 83       	std	Y+1, r25	; 0x01
    2768:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZL11SendControlh>
        SendControl(3);
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZL11SendControlh>
    2772:	f1 2e       	mov	r15, r17
        bool pgm = flags & TRANSFER_PGM;
        for(u8 i = 0; i < string_len; i++) {
    2774:	c1 2e       	mov	r12, r17
    2776:	99 81       	ldd	r25, Y+1	; 0x01
    2778:	d9 2e       	mov	r13, r25
    277a:	8c 2d       	mov	r24, r12
    277c:	8f 19       	sub	r24, r15
    277e:	80 17       	cp	r24, r16
    2780:	98 f4       	brcc	.+38     	; 0x27a8 <_ZL24USB_SendStringDescriptorPKhhh+0x64>
                bool r = SendControl(pgm ? pgm_read_byte(&string_P[i]) : string_P[i]);
    2782:	f6 01       	movw	r30, r12
    2784:	e7 fe       	sbrs	r14, 7
    2786:	02 c0       	rjmp	.+4      	; 0x278c <_ZL24USB_SendStringDescriptorPKhhh+0x48>
    2788:	84 91       	lpm	r24, Z
    278a:	01 c0       	rjmp	.+2      	; 0x278e <_ZL24USB_SendStringDescriptorPKhhh+0x4a>
    278c:	80 81       	ld	r24, Z
    278e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZL11SendControlh>
    2792:	18 2f       	mov	r17, r24
                r &= SendControl(0); // high byte
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZL11SendControlh>
    279a:	81 23       	and	r24, r17
    279c:	ff ef       	ldi	r31, 0xFF	; 255
    279e:	cf 1a       	sub	r12, r31
    27a0:	df 0a       	sbc	r13, r31
                if(!r) {
    27a2:	81 11       	cpse	r24, r1
    27a4:	ea cf       	rjmp	.-44     	; 0x277a <_ZL24USB_SendStringDescriptorPKhhh+0x36>
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <_ZL24USB_SendStringDescriptorPKhhh+0x66>
                        return false;
                }
        }
        return true;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
}
    27aa:	0f 90       	pop	r0
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	08 95       	ret

000027be <_ZL15USB_ClockEnablev>:
}

static inline void USB_ClockEnable()
{
#if defined(UHWCON)
	UHWCON |= (1<<UVREGE);			// power internal reg
    27be:	80 91 d7 00 	lds	r24, 0x00D7
    27c2:	81 60       	ori	r24, 0x01	; 1
    27c4:	80 93 d7 00 	sts	0x00D7, r24
#endif
	USBCON = (1<<USBE) | (1<<FRZCLK);	// clock frozen, usb enabled
    27c8:	80 ea       	ldi	r24, 0xA0	; 160
    27ca:	80 93 d8 00 	sts	0x00D8, r24

// ATmega32U4
#if defined(PINDIV)
#if F_CPU == 16000000UL
	PLLCSR |= (1<<PINDIV);                   // Need 16 MHz xtal
    27ce:	89 b5       	in	r24, 0x29	; 41
    27d0:	80 61       	ori	r24, 0x10	; 16
    27d2:	89 bd       	out	0x29, r24	; 41
#endif
#else
#error "USB Chip not supported, please defined method of USB PLL initialization"
#endif

	PLLCSR |= (1<<PLLE);
    27d4:	89 b5       	in	r24, 0x29	; 41
    27d6:	82 60       	ori	r24, 0x02	; 2
    27d8:	89 bd       	out	0x29, r24	; 41
	while (!(PLLCSR & (1<<PLOCK)))		// wait for lock pll
    27da:	09 b4       	in	r0, 0x29	; 41
    27dc:	00 fe       	sbrs	r0, 0
    27de:	fd cf       	rjmp	.-6      	; 0x27da <_ZL15USB_ClockEnablev+0x1c>
	}

	// Some tests on specific versions of macosx (10.7.3), reported some
	// strange behaviors when the board is reset using the serial
	// port touch at 1200 bps. This delay fixes this behavior.
	delay(1);
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 1b 18 	call	0x3036	; 0x3036 <delay>
#if defined(OTGPADE)
	USBCON = (USBCON & ~(1<<FRZCLK)) | (1<<OTGPADE);	// start USB clock, enable VBUS Pad
    27ec:	80 91 d8 00 	lds	r24, 0x00D8
    27f0:	8f 7c       	andi	r24, 0xCF	; 207
    27f2:	80 61       	ori	r24, 0x10	; 16
    27f4:	80 93 d8 00 	sts	0x00D8, r24
	USBCON &= ~(1 << FRZCLK);	// start USB clock
#endif

#if defined(RSTCPU)
#if defined(LSM)
	UDCON &= ~((1<<RSTCPU) | (1<<LSM) | (1<<RMWKUP) | (1<<DETACH));	// enable attach resistor, set full speed mode
    27f8:	80 91 e0 00 	lds	r24, 0x00E0
    27fc:	80 7f       	andi	r24, 0xF0	; 240
    27fe:	80 93 e0 00 	sts	0x00E0, r24
    2802:	08 95       	ret

00002804 <_ZL14SendInterfacesv>:
	}
	return len;
}

static u8 SendInterfaces()
{
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	1f 92       	push	r1
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	u8 interfaces = 0;
    280e:	19 82       	std	Y+1, r1	; 0x01

	CDC_GetInterface(&interfaces);
    2810:	ce 01       	movw	r24, r28
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_Z16CDC_GetInterfacePh>

#ifdef PLUGGABLE_USB_ENABLED
	PluggableUSB().getInterface(&interfaces);
    2818:	0e 94 05 1a 	call	0x340a	; 0x340a <_Z12PluggableUSBv>
    281c:	be 01       	movw	r22, r28
    281e:	6f 5f       	subi	r22, 0xFF	; 255
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	0e 94 80 19 	call	0x3300	; 0x3300 <_ZN13PluggableUSB_12getInterfaceEPh>
#endif

	return interfaces;
}
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	0f 90       	pop	r0
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <_ZN6LockEPC1Eh>:
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    2830:	2f b7       	in	r18, 0x3f	; 63
    2832:	fc 01       	movw	r30, r24
    2834:	20 83       	st	Z, r18
	{
		cli();
    2836:	f8 94       	cli
		SetEP(ep & 7);
    2838:	67 70       	andi	r22, 0x07	; 7
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    283a:	60 93 e9 00 	sts	0x00E9, r22
    283e:	08 95       	ret

00002840 <_Z13USB_Availableh>:
	}
};

//	Number of bytes, assumes a rx endpoint
u8 USB_Available(u8 ep)
{
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	1f 92       	push	r1
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
	LockEP lock(ep);
    284a:	68 2f       	mov	r22, r24
    284c:	ce 01       	movw	r24, r28
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN6LockEPC1Eh>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    2854:	80 91 f2 00 	lds	r24, 0x00F2
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    2858:	99 81       	ldd	r25, Y+1	; 0x01
    285a:	9f bf       	out	0x3f, r25	; 63
//	Number of bytes, assumes a rx endpoint
u8 USB_Available(u8 ep)
{
	LockEP lock(ep);
	return FifoByteCount();
}
    285c:	0f 90       	pop	r0
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <_Z8USB_RecvhPvi>:

//	Non Blocking receive
//	Return number of bytes read
int USB_Recv(u8 ep, void* d, int len)
{
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	1f 92       	push	r1
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	if (!_usbConfiguration || len < 0)
    2876:	90 91 29 05 	lds	r25, 0x0529
    287a:	99 23       	and	r25, r25
    287c:	11 f0       	breq	.+4      	; 0x2882 <_Z8USB_RecvhPvi+0x1e>
    287e:	57 ff       	sbrs	r21, 7
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <_Z8USB_RecvhPvi+0x24>
		return -1;
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	9f ef       	ldi	r25, 0xFF	; 255
    2886:	2a c0       	rjmp	.+84     	; 0x28dc <_Z8USB_RecvhPvi+0x78>
    2888:	8a 01       	movw	r16, r20
    288a:	7b 01       	movw	r14, r22
    288c:	68 2f       	mov	r22, r24
	
	LockEP lock(ep);
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN6LockEPC1Eh>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    2896:	80 91 f2 00 	lds	r24, 0x00F2
	if (!_usbConfiguration || len < 0)
		return -1;
	
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a8 01       	movw	r20, r16
    289e:	80 17       	cp	r24, r16
    28a0:	91 07       	cpc	r25, r17
    28a2:	0c f4       	brge	.+2      	; 0x28a6 <_Z8USB_RecvhPvi+0x42>
    28a4:	ac 01       	movw	r20, r24
	n = len;
    28a6:	84 2f       	mov	r24, r20
    28a8:	f7 01       	movw	r30, r14
}

static inline u8 Recv8()
{
	RXLED1;					// light the RX LED
	RxLEDPulse = TX_RX_LED_PULSE_MS;
    28aa:	94 e6       	ldi	r25, 0x64	; 100
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	38 f0       	brcs	.+14     	; 0x28be <_Z8USB_RecvhPvi+0x5a>
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
}

static inline u8 Recv8()
{
	RXLED1;					// light the RX LED
    28b0:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;
    28b2:	90 93 2a 05 	sts	0x052A, r25

	return UEDATX;	
    28b6:	20 91 f1 00 	lds	r18, 0x00F1
	u8 n = FifoByteCount();
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
		*dst++ = Recv8();
    28ba:	21 93       	st	Z+, r18
    28bc:	f7 cf       	rjmp	.-18     	; 0x28ac <_Z8USB_RecvhPvi+0x48>
	if (len && !FifoByteCount())	// release empty buffer
    28be:	41 15       	cp	r20, r1
    28c0:	51 05       	cpc	r21, r1
    28c2:	21 f0       	breq	.+8      	; 0x28cc <_Z8USB_RecvhPvi+0x68>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    28c4:	80 91 f2 00 	lds	r24, 0x00F2
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
		*dst++ = Recv8();
	if (len && !FifoByteCount())	// release empty buffer
    28c8:	88 23       	and	r24, r24
    28ca:	21 f0       	breq	.+8      	; 0x28d4 <_Z8USB_RecvhPvi+0x70>
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	8f bf       	out	0x3f, r24	; 63
	if (!_usbConfiguration || len < 0)
		return -1;
	
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
    28d0:	ca 01       	movw	r24, r20
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <_Z8USB_RecvhPvi+0x78>
	return UEINTX & (1<<FIFOCON);
}

static inline void ReleaseRX()
{
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
    28d4:	8b e6       	ldi	r24, 0x6B	; 107
    28d6:	80 93 e8 00 	sts	0x00E8, r24
    28da:	f8 cf       	rjmp	.-16     	; 0x28cc <_Z8USB_RecvhPvi+0x68>
		*dst++ = Recv8();
	if (len && !FifoByteCount())	// release empty buffer
		ReleaseRX();
	
	return len;
}
    28dc:	0f 90       	pop	r0
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	08 95       	ret

000028ec <_Z8USB_Recvh>:

//	Recv 1 byte if ready
int USB_Recv(u8 ep)
{
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	1f 92       	push	r1
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
	u8 c;
	if (USB_Recv(ep,&c,1) != 1)
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	be 01       	movw	r22, r28
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z8USB_RecvhPvi>
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	19 f4       	brne	.+6      	; 0x290e <_Z8USB_Recvh+0x22>
		return -1;
	return c;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <_Z8USB_Recvh+0x26>
//	Recv 1 byte if ready
int USB_Recv(u8 ep)
{
	u8 c;
	if (USB_Recv(ep,&c,1) != 1)
		return -1;
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	9f ef       	ldi	r25, 0xFF	; 255
	return c;
}
    2912:	0f 90       	pop	r0
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	08 95       	ret

0000291a <_Z13USB_SendSpaceh>:

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	1f 92       	push	r1
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	LockEP lock(ep);
    2924:	68 2f       	mov	r22, r24
    2926:	ce 01       	movw	r24, r28
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN6LockEPC1Eh>
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    292e:	90 91 e8 00 	lds	r25, 0x00E8

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
    2932:	89 2f       	mov	r24, r25
    2934:	80 72       	andi	r24, 0x20	; 32
    2936:	95 ff       	sbrs	r25, 5
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <_Z13USB_SendSpaceh+0x28>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    293a:	90 91 f2 00 	lds	r25, 0x00F2
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return USB_EP_SIZE - FifoByteCount();
    293e:	80 e4       	ldi	r24, 0x40	; 64
    2940:	89 1b       	sub	r24, r25
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    2942:	99 81       	ldd	r25, Y+1	; 0x01
    2944:	9f bf       	out	0x3f, r25	; 63
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return USB_EP_SIZE - FifoByteCount();
}
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	08 95       	ret

0000294e <_Z8USB_SendhPKvi>:

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	1f 92       	push	r1
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	a8 2e       	mov	r10, r24
    2972:	6b 01       	movw	r12, r22
    2974:	b4 2e       	mov	r11, r20
    2976:	05 2f       	mov	r16, r21
	if (!_usbConfiguration)
    2978:	80 91 29 05 	lds	r24, 0x0529
    297c:	88 23       	and	r24, r24
    297e:	69 f0       	breq	.+26     	; 0x299a <_Z8USB_SendhPKvi+0x4c>
    2980:	e4 2e       	mov	r14, r20
    2982:	f5 2e       	mov	r15, r21
    2984:	8a ef       	ldi	r24, 0xFA	; 250
    2986:	98 2e       	mov	r9, r24
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
				continue;
			len -= n;
			if (ep & TRANSFER_ZERO)
    2988:	8a 2d       	mov	r24, r10
    298a:	80 72       	andi	r24, 0x20	; 32
    298c:	78 2e       	mov	r7, r24
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    298e:	9a e3       	ldi	r25, 0x3A	; 58
    2990:	89 2e       	mov	r8, r25
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    2992:	8a 2d       	mov	r24, r10
    2994:	80 74       	andi	r24, 0x40	; 64
    2996:	68 2e       	mov	r6, r24
    2998:	12 c0       	rjmp	.+36     	; 0x29be <_Z8USB_SendhPKvi+0x70>

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
	if (!_usbConfiguration)
		return -1;
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	9f ef       	ldi	r25, 0xFF	; 255
    299e:	54 c0       	rjmp	.+168    	; 0x2a48 <_Z8USB_SendhPKvi+0xfa>
	int r = len;
	const u8* data = (const u8*)d;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
	{
		u8 n = USB_SendSpace(ep);
    29a0:	8a 2d       	mov	r24, r10
    29a2:	0e 94 8d 14 	call	0x291a	; 0x291a <_Z13USB_SendSpaceh>
    29a6:	18 2f       	mov	r17, r24
		if (n == 0)
    29a8:	81 11       	cpse	r24, r1
    29aa:	0d c0       	rjmp	.+26     	; 0x29c6 <_Z8USB_SendhPKvi+0x78>
		{
			if (!(--timeout))
    29ac:	9a 94       	dec	r9
    29ae:	99 20       	and	r9, r9
    29b0:	a1 f3       	breq	.-24     	; 0x299a <_Z8USB_SendhPKvi+0x4c>
				return -1;
			delay(1);
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 1b 18 	call	0x3036	; 0x3036 <delay>
		return -1;

	int r = len;
	const u8* data = (const u8*)d;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
    29be:	e1 14       	cp	r14, r1
    29c0:	f1 04       	cpc	r15, r1
    29c2:	71 f7       	brne	.-36     	; 0x29a0 <_Z8USB_SendhPKvi+0x52>
    29c4:	37 c0       	rjmp	.+110    	; 0x2a34 <_Z8USB_SendhPKvi+0xe6>
				return -1;
			delay(1);
			continue;
		}

		if (n > len)
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	e8 16       	cp	r14, r24
    29ca:	f9 06       	cpc	r15, r25
    29cc:	0c f4       	brge	.+2      	; 0x29d0 <_Z8USB_SendhPKvi+0x82>
			n = len;
    29ce:	1e 2d       	mov	r17, r14
		{
			LockEP lock(ep);
    29d0:	6a 2d       	mov	r22, r10
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN6LockEPC1Eh>
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    29da:	80 91 e8 00 	lds	r24, 0x00E8
		if (n > len)
			n = len;
		{
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
    29de:	85 ff       	sbrs	r24, 5
    29e0:	26 c0       	rjmp	.+76     	; 0x2a2e <_Z8USB_SendhPKvi+0xe0>
				continue;
			len -= n;
    29e2:	81 2f       	mov	r24, r17
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	e8 1a       	sub	r14, r24
    29e8:	f9 0a       	sbc	r15, r25
			if (ep & TRANSFER_ZERO)
    29ea:	77 20       	and	r7, r7
    29ec:	29 f0       	breq	.+10     	; 0x29f8 <_Z8USB_SendhPKvi+0xaa>
			{
				while (n--)
    29ee:	11 50       	subi	r17, 0x01	; 1
    29f0:	a8 f0       	brcs	.+42     	; 0x2a1c <_Z8USB_SendhPKvi+0xce>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    29f2:	10 92 f1 00 	sts	0x00F1, r1
    29f6:	fb cf       	rjmp	.-10     	; 0x29ee <_Z8USB_SendhPKvi+0xa0>
			if (ep & TRANSFER_ZERO)
			{
				while (n--)
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
    29f8:	f6 01       	movw	r30, r12
    29fa:	a7 fe       	sbrs	r10, 7
    29fc:	07 c0       	rjmp	.+14     	; 0x2a0c <_Z8USB_SendhPKvi+0xbe>
			{
				while (n--)
    29fe:	11 50       	subi	r17, 0x01	; 1
    2a00:	58 f0       	brcs	.+22     	; 0x2a18 <_Z8USB_SendhPKvi+0xca>
					Send8(pgm_read_byte(data++));
    2a02:	24 91       	lpm	r18, Z
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    2a04:	20 93 f1 00 	sts	0x00F1, r18
    2a08:	31 96       	adiw	r30, 0x01	; 1
    2a0a:	f9 cf       	rjmp	.-14     	; 0x29fe <_Z8USB_SendhPKvi+0xb0>
				while (n--)
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    2a0c:	11 50       	subi	r17, 0x01	; 1
    2a0e:	20 f0       	brcs	.+8      	; 0x2a18 <_Z8USB_SendhPKvi+0xca>
					Send8(*data++);
    2a10:	21 91       	ld	r18, Z+
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    2a12:	20 93 f1 00 	sts	0x00F1, r18
    2a16:	fa cf       	rjmp	.-12     	; 0x2a0c <_Z8USB_SendhPKvi+0xbe>
    2a18:	c8 0e       	add	r12, r24
    2a1a:	d9 1e       	adc	r13, r25
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    2a1c:	80 91 e8 00 	lds	r24, 0x00E8
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    2a20:	85 ff       	sbrs	r24, 5
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <_Z8USB_SendhPKvi+0xf4>
    2a24:	e1 14       	cp	r14, r1
    2a26:	f1 04       	cpc	r15, r1
    2a28:	11 f4       	brne	.+4      	; 0x2a2e <_Z8USB_SendhPKvi+0xe0>
    2a2a:	61 10       	cpse	r6, r1
    2a2c:	0a c0       	rjmp	.+20     	; 0x2a42 <_Z8USB_SendhPKvi+0xf4>
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	8f bf       	out	0x3f, r24	; 63
    2a32:	c5 cf       	rjmp	.-118    	; 0x29be <_Z8USB_SendhPKvi+0x70>
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
				ReleaseTX();
		}
	}
	TXLED1;					// light the TX LED
    2a34:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_MS;
    2a36:	84 e6       	ldi	r24, 0x64	; 100
    2a38:	80 93 2b 05 	sts	0x052B, r24
	return r;
    2a3c:	8b 2d       	mov	r24, r11
    2a3e:	90 2f       	mov	r25, r16
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <_Z8USB_SendhPKvi+0xfa>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    2a42:	80 92 e8 00 	sts	0x00E8, r8
    2a46:	f3 cf       	rjmp	.-26     	; 0x2a2e <_Z8USB_SendhPKvi+0xe0>
		}
	}
	TXLED1;					// light the TX LED
	TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
    2a48:	0f 90       	pop	r0
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	bf 90       	pop	r11
    2a5c:	af 90       	pop	r10
    2a5e:	9f 90       	pop	r9
    2a60:	8f 90       	pop	r8
    2a62:	7f 90       	pop	r7
    2a64:	6f 90       	pop	r6
    2a66:	08 95       	ret

00002a68 <_Z11InitControli>:
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    2a68:	10 92 e9 00 	sts	0x00E9, r1
static int _cmark;
static int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    2a6c:	10 92 26 05 	sts	0x0526, r1
    2a70:	10 92 25 05 	sts	0x0525, r1
	_cend = end;
    2a74:	90 93 24 05 	sts	0x0524, r25
    2a78:	80 93 23 05 	sts	0x0523, r24
    2a7c:	08 95       	ret

00002a7e <_Z15USB_SendControlhPKvi>:
	return true;
};

//	Clipped by _cmark/_cend
int USB_SendControl(u8 flags, const void* d, int len)
{
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	d8 2e       	mov	r13, r24
    2a8e:	8a 01       	movw	r16, r20
    2a90:	7b 01       	movw	r14, r22
    2a92:	e4 0e       	add	r14, r20
    2a94:	f5 1e       	adc	r15, r21
	int sent = len;
	const u8* data = (const u8*)d;
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
    2a96:	eb 01       	movw	r28, r22
    2a98:	ce 15       	cp	r28, r14
    2a9a:	df 05       	cpc	r29, r15
    2a9c:	71 f0       	breq	.+28     	; 0x2aba <_Z15USB_SendControlhPKvi+0x3c>
	{
		u8 c = pgm ? pgm_read_byte(data++) : *data++;
    2a9e:	d7 fe       	sbrs	r13, 7
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <_Z15USB_SendControlhPKvi+0x2a>
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	84 91       	lpm	r24, Z
    2aa6:	01 c0       	rjmp	.+2      	; 0x2aaa <_Z15USB_SendControlhPKvi+0x2c>
    2aa8:	88 81       	ld	r24, Y
		if (!SendControl(c))
    2aaa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZL11SendControlh>
    2aae:	21 96       	adiw	r28, 0x01	; 1
    2ab0:	81 11       	cpse	r24, r1
    2ab2:	f2 cf       	rjmp	.-28     	; 0x2a98 <_Z15USB_SendControlhPKvi+0x1a>
			return -1;
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	9f ef       	ldi	r25, 0xFF	; 255
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <_Z15USB_SendControlhPKvi+0x3e>
	}
	return sent;
    2aba:	c8 01       	movw	r24, r16
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	08 95       	ret

00002acc <_Z15USB_RecvControlPvi>:
        return true;
}

//	Does not timeout or cross fifo boundaries
int USB_RecvControl(void* d, int len)
{
    2acc:	bf 92       	push	r11
    2ace:	cf 92       	push	r12
    2ad0:	df 92       	push	r13
    2ad2:	ef 92       	push	r14
    2ad4:	ff 92       	push	r15
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	6c 01       	movw	r12, r24
    2ae0:	8b 01       	movw	r16, r22
	auto int length = len;
    2ae2:	eb 01       	movw	r28, r22
	return (UEINTX & (1<<RXOUTI)) == 0;
}

static inline void ClearOUT(void)
{
	UEINTX = ~(1<<RXOUTI);
    2ae4:	9b ef       	ldi	r25, 0xFB	; 251
    2ae6:	b9 2e       	mov	r11, r25

//	Does not timeout or cross fifo boundaries
int USB_RecvControl(void* d, int len)
{
	auto int length = len;
	while(length)
    2ae8:	20 97       	sbiw	r28, 0x00	; 0
    2aea:	c1 f0       	breq	.+48     	; 0x2b1c <_Z15USB_RecvControlPvi+0x50>
    2aec:	7e 01       	movw	r14, r28
    2aee:	c1 34       	cpi	r28, 0x41	; 65
    2af0:	d1 05       	cpc	r29, r1
    2af2:	1c f0       	brlt	.+6      	; 0x2afa <_Z15USB_RecvControlPvi+0x2e>
    2af4:	80 e4       	ldi	r24, 0x40	; 64
    2af6:	e8 2e       	mov	r14, r24
    2af8:	f1 2c       	mov	r15, r1
	UEINTX = ~(1<<TXINI);
}

static inline void WaitOUT(void)
{
	while (!(UEINTX & (1<<RXOUTI)))
    2afa:	80 91 e8 00 	lds	r24, 0x00E8
    2afe:	82 ff       	sbrs	r24, 2
    2b00:	fc cf       	rjmp	.-8      	; 0x2afa <_Z15USB_RecvControlPvi+0x2e>
			recvLength = 64;
		}

		// Write data to fit to the end (not the beginning) of the array
		WaitOUT();
		Recv((u8*)d + len - length, recvLength);
    2b02:	c8 01       	movw	r24, r16
    2b04:	8c 1b       	sub	r24, r28
    2b06:	9d 0b       	sbc	r25, r29
    2b08:	6e 2d       	mov	r22, r14
    2b0a:	8c 0d       	add	r24, r12
    2b0c:	9d 1d       	adc	r25, r13
    2b0e:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZL4RecvPVhh>
	return (UEINTX & (1<<RXOUTI)) == 0;
}

static inline void ClearOUT(void)
{
	UEINTX = ~(1<<RXOUTI);
    2b12:	b0 92 e8 00 	sts	0x00E8, r11

		// Write data to fit to the end (not the beginning) of the array
		WaitOUT();
		Recv((u8*)d + len - length, recvLength);
		ClearOUT();
		length -= recvLength;
    2b16:	ce 19       	sub	r28, r14
    2b18:	df 09       	sbc	r29, r15
    2b1a:	e6 cf       	rjmp	.-52     	; 0x2ae8 <_Z15USB_RecvControlPvi+0x1c>
	}
	return len;
}
    2b1c:	c8 01       	movw	r24, r16
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	cf 90       	pop	r12
    2b2e:	bf 90       	pop	r11
    2b30:	08 95       	ret

00002b32 <__vector_11>:
	return true;
}

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    2b32:	1f 92       	push	r1
    2b34:	0f 92       	push	r0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	0f 92       	push	r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	cf 92       	push	r12
    2b3e:	df 92       	push	r13
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	2f 93       	push	r18
    2b4a:	3f 93       	push	r19
    2b4c:	4f 93       	push	r20
    2b4e:	5f 93       	push	r21
    2b50:	6f 93       	push	r22
    2b52:	7f 93       	push	r23
    2b54:	8f 93       	push	r24
    2b56:	9f 93       	push	r25
    2b58:	af 93       	push	r26
    2b5a:	bf 93       	push	r27
    2b5c:	ef 93       	push	r30
    2b5e:	ff 93       	push	r31
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	6c 97       	sbiw	r28, 0x1c	; 28
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	cd bf       	out	0x3d, r28	; 61
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    2b6e:	10 92 e9 00 	sts	0x00E9, r1
	return UEBCLX;
}

static inline u8 ReceivedSetupInt()
{
	return UEINTX & (1<<RXSTPI);
    2b72:	80 91 e8 00 	lds	r24, 0x00E8

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    SetEP(0);
	if (!ReceivedSetupInt())
    2b76:	83 ff       	sbrs	r24, 3
    2b78:	24 c1       	rjmp	.+584    	; 0x2dc2 <__vector_11+0x290>
		return;

	USBSetup setup;
	Recv((u8*)&setup,8);
    2b7a:	68 e0       	ldi	r22, 0x08	; 8
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	45 96       	adiw	r24, 0x15	; 21
    2b80:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZL4RecvPVhh>
	return UEINTX & (1<<RXSTPI);
}

static inline void ClearSetupInt()
{
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2b84:	82 ef       	ldi	r24, 0xF2	; 242
    2b86:	80 93 e8 00 	sts	0x00E8, r24

	USBSetup setup;
	Recv((u8*)&setup,8);
	ClearSetupInt();

	u8 requestType = setup.bmRequestType;
    2b8a:	8d 89       	ldd	r24, Y+21	; 0x15
	if (requestType & REQUEST_DEVICETOHOST)
    2b8c:	87 ff       	sbrs	r24, 7
    2b8e:	05 c0       	rjmp	.+10     	; 0x2b9a <__vector_11+0x68>
volatile u8 _usbCurrentStatus = 0; // meaning of bits see usb_20.pdf, Figure 9-4. Information Returned by a GetStatus() Request to a Device
volatile u8 _usbSuspendState = 0; // copy of UDINT to check SUSPI and WAKEUPI bits

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)))
    2b90:	90 91 e8 00 	lds	r25, 0x00E8
    2b94:	90 ff       	sbrs	r25, 0
    2b96:	fc cf       	rjmp	.-8      	; 0x2b90 <__vector_11+0x5e>
    2b98:	03 c0       	rjmp	.+6      	; 0x2ba0 <__vector_11+0x6e>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    2b9a:	9e ef       	ldi	r25, 0xFE	; 254
    2b9c:	90 93 e8 00 	sts	0x00E8, r25
		WaitIN();
	else
		ClearIN();

    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	90 76       	andi	r25, 0x60	; 96
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <__vector_11+0x76>
    2ba6:	f1 c0       	rjmp	.+482    	; 0x2d8a <__vector_11+0x258>
	{
		//	Standard Requests
		u8 r = setup.bRequest;
    2ba8:	9e 89       	ldd	r25, Y+22	; 0x16
		u16 wValue = setup.wValueL | (setup.wValueH << 8);
    2baa:	2f 89       	ldd	r18, Y+23	; 0x17
    2bac:	18 8d       	ldd	r17, Y+24	; 0x18
		if (GET_STATUS == r)
    2bae:	91 11       	cpse	r25, r1
    2bb0:	0c c0       	rjmp	.+24     	; 0x2bca <__vector_11+0x98>
		{
			if (requestType == (REQUEST_DEVICETOHOST | REQUEST_STANDARD | REQUEST_DEVICE))
    2bb2:	80 38       	cpi	r24, 0x80	; 128
    2bb4:	29 f4       	brne	.+10     	; 0x2bc0 <__vector_11+0x8e>
			{
				Send8(_usbCurrentStatus);
    2bb6:	80 91 28 05 	lds	r24, 0x0528
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    2bba:	80 93 f1 00 	sts	0x00F1, r24
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <__vector_11+0x92>
    2bc0:	10 92 f1 00 	sts	0x00F1, r1
    2bc4:	10 92 f1 00 	sts	0x00F1, r1
    2bc8:	f5 c0       	rjmp	.+490    	; 0x2db4 <__vector_11+0x282>
    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
	{
		//	Standard Requests
		u8 r = setup.bRequest;
		u16 wValue = setup.wValueL | (setup.wValueH << 8);
    2bca:	42 2f       	mov	r20, r18
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	51 2b       	or	r21, r17
				// see "Figure 9-6. Information Returned by a GetStatus() Request to an Endpoint" in usb_20.pdf for more information
				Send8(0);
				Send8(0);
			}
		}
		else if (CLEAR_FEATURE == r)
    2bd0:	91 30       	cpi	r25, 0x01	; 1
    2bd2:	51 f4       	brne	.+20     	; 0x2be8 <__vector_11+0xb6>
		{
			if((requestType == (REQUEST_HOSTTODEVICE | REQUEST_STANDARD | REQUEST_DEVICE))
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	ee c0       	rjmp	.+476    	; 0x2db4 <__vector_11+0x282>
				&& (wValue == DEVICE_REMOTE_WAKEUP))
    2bd8:	41 30       	cpi	r20, 0x01	; 1
    2bda:	51 05       	cpc	r21, r1
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <__vector_11+0xae>
    2bde:	ea c0       	rjmp	.+468    	; 0x2db4 <__vector_11+0x282>
			{
				_usbCurrentStatus &= ~FEATURE_REMOTE_WAKEUP_ENABLED;
    2be0:	80 91 28 05 	lds	r24, 0x0528
    2be4:	8d 7f       	andi	r24, 0xFD	; 253
    2be6:	0b c0       	rjmp	.+22     	; 0x2bfe <__vector_11+0xcc>
			}
		}
		else if (SET_FEATURE == r)
    2be8:	93 30       	cpi	r25, 0x03	; 3
    2bea:	61 f4       	brne	.+24     	; 0x2c04 <__vector_11+0xd2>
		{
			if((requestType == (REQUEST_HOSTTODEVICE | REQUEST_STANDARD | REQUEST_DEVICE))
    2bec:	81 11       	cpse	r24, r1
    2bee:	e2 c0       	rjmp	.+452    	; 0x2db4 <__vector_11+0x282>
				&& (wValue == DEVICE_REMOTE_WAKEUP))
    2bf0:	41 30       	cpi	r20, 0x01	; 1
    2bf2:	51 05       	cpc	r21, r1
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <__vector_11+0xc6>
    2bf6:	de c0       	rjmp	.+444    	; 0x2db4 <__vector_11+0x282>
			{
				_usbCurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2bf8:	80 91 28 05 	lds	r24, 0x0528
    2bfc:	82 60       	ori	r24, 0x02	; 2
    2bfe:	80 93 28 05 	sts	0x0528, r24
    2c02:	d8 c0       	rjmp	.+432    	; 0x2db4 <__vector_11+0x282>
			}
		}
		else if (SET_ADDRESS == r)
    2c04:	95 30       	cpi	r25, 0x05	; 5
    2c06:	41 f4       	brne	.+16     	; 0x2c18 <__vector_11+0xe6>
volatile u8 _usbCurrentStatus = 0; // meaning of bits see usb_20.pdf, Figure 9-4. Information Returned by a GetStatus() Request to a Device
volatile u8 _usbSuspendState = 0; // copy of UDINT to check SUSPI and WAKEUPI bits

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)))
    2c08:	80 91 e8 00 	lds	r24, 0x00E8
    2c0c:	80 ff       	sbrs	r24, 0
    2c0e:	fc cf       	rjmp	.-8      	; 0x2c08 <__vector_11+0xd6>
			}
		}
		else if (SET_ADDRESS == r)
		{
			WaitIN();
			UDADDR = setup.wValueL | (1<<ADDEN);
    2c10:	20 68       	ori	r18, 0x80	; 128
    2c12:	20 93 e3 00 	sts	0x00E3, r18
    2c16:	ce c0       	rjmp	.+412    	; 0x2db4 <__vector_11+0x282>
		}
		else if (GET_DESCRIPTOR == r)
    2c18:	96 30       	cpi	r25, 0x06	; 6
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <__vector_11+0xec>
    2c1c:	8c c0       	rjmp	.+280    	; 0x2d36 <__vector_11+0x204>
    2c1e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2c20:	fc 8c       	ldd	r15, Y+28	; 0x1c
static
bool SendDescriptor(USBSetup& setup)
{
	int ret;
	u8 t = setup.wValueH;
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
    2c22:	12 30       	cpi	r17, 0x02	; 2
    2c24:	69 f5       	brne	.+90     	; 0x2c80 <__vector_11+0x14e>
//	TODO
static
bool SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	InitControl(0);	
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z11InitControli>
	u8 interfaces = SendInterfaces();
    2c2e:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZL14SendInterfacesv>
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
    2c32:	99 e0       	ldi	r25, 0x09	; 9
    2c34:	9e 01       	movw	r18, r28
    2c36:	2f 5f       	subi	r18, 0xFF	; 255
    2c38:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3a:	69 01       	movw	r12, r18
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	29 2f       	mov	r18, r25
    2c40:	11 92       	st	Z+, r1
    2c42:	2a 95       	dec	r18
    2c44:	e9 f7       	brne	.-6      	; 0x2c40 <__vector_11+0x10e>
    2c46:	99 83       	std	Y+1, r25	; 0x01
    2c48:	1a 83       	std	Y+2, r17	; 0x02
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	90 ea       	ldi	r25, 0xA0	; 160
    2c50:	98 87       	std	Y+8, r25	; 0x08
    2c52:	9a ef       	ldi	r25, 0xFA	; 250
    2c54:	99 87       	std	Y+9, r25	; 0x09
    2c56:	20 91 25 05 	lds	r18, 0x0525
    2c5a:	30 91 26 05 	lds	r19, 0x0526
    2c5e:	27 5f       	subi	r18, 0xF7	; 247
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	3c 83       	std	Y+4, r19	; 0x04
    2c64:	2b 83       	std	Y+3, r18	; 0x03
    2c66:	8d 83       	std	Y+5, r24	; 0x05

	//	Now send them
	InitControl(maxlen);
    2c68:	c7 01       	movw	r24, r14
    2c6a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z11InitControli>
	USB_SendControl(0,&config,sizeof(ConfigDescriptor));
    2c6e:	49 e0       	ldi	r20, 0x09	; 9
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	b6 01       	movw	r22, r12
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_Z15USB_SendControlhPKvi>
	SendInterfaces();
    2c7a:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZL14SendInterfacesv>
    2c7e:	9a c0       	rjmp	.+308    	; 0x2db4 <__vector_11+0x282>
	int ret;
	u8 t = setup.wValueH;
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
		return SendConfiguration(setup.wLength);

	InitControl(setup.wLength);
    2c80:	c7 01       	movw	r24, r14
    2c82:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z11InitControli>
#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    2c86:	0e 94 05 1a 	call	0x340a	; 0x340a <_Z12PluggableUSBv>
    2c8a:	be 01       	movw	r22, r28
    2c8c:	6b 5e       	subi	r22, 0xEB	; 235
    2c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c90:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	19 f0       	breq	.+6      	; 0x2c9e <__vector_11+0x16c>
		return (ret > 0 ? true : false);
    2c98:	0c f0       	brlt	.+2      	; 0x2c9c <__vector_11+0x16a>
    2c9a:	8c c0       	rjmp	.+280    	; 0x2db4 <__vector_11+0x282>
    2c9c:	8f c0       	rjmp	.+286    	; 0x2dbc <__vector_11+0x28a>
	}
#endif

	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
    2c9e:	11 30       	cpi	r17, 0x01	; 1
    2ca0:	71 f4       	brne	.+28     	; 0x2cbe <__vector_11+0x18c>
	{
		if (setup.wLength == 8)
    2ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca6:	08 97       	sbiw	r24, 0x08	; 8
    2ca8:	19 f4       	brne	.+6      	; 0x2cb0 <__vector_11+0x17e>
			_cdcComposite = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 22 05 	sts	0x0522, r24
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorB : (const u8*)&USB_DeviceDescriptor;
    2cb0:	80 91 22 05 	lds	r24, 0x0522
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	2f c0       	rjmp	.+94     	; 0x2d16 <__vector_11+0x1e4>
    2cb8:	65 e0       	ldi	r22, 0x05	; 5
    2cba:	72 e0       	ldi	r23, 0x02	; 2
    2cbc:	31 c0       	rjmp	.+98     	; 0x2d20 <__vector_11+0x1ee>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    2cbe:	13 30       	cpi	r17, 0x03	; 3
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <__vector_11+0x192>
    2cc2:	7c c0       	rjmp	.+248    	; 0x2dbc <__vector_11+0x28a>
	{
		if (setup.wValueL == 0) {
    2cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc6:	88 23       	and	r24, r24
    2cc8:	49 f1       	breq	.+82     	; 0x2d1c <__vector_11+0x1ea>
			desc_addr = (const u8*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	29 f4       	brne	.+10     	; 0x2cd8 <__vector_11+0x1a6>
			return USB_SendStringDescriptor(STRING_PRODUCT, strlen(USB_PRODUCT), TRANSFER_PGM);
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	60 e1       	ldi	r22, 0x10	; 16
    2cd2:	83 e2       	ldi	r24, 0x23	; 35
    2cd4:	92 e0       	ldi	r25, 0x02	; 2
    2cd6:	06 c0       	rjmp	.+12     	; 0x2ce4 <__vector_11+0x1b2>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	39 f4       	brne	.+14     	; 0x2cea <__vector_11+0x1b8>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, strlen(USB_MANUFACTURER), TRANSFER_PGM);
    2cdc:	40 e8       	ldi	r20, 0x80	; 128
    2cde:	6b e0       	ldi	r22, 0x0B	; 11
    2ce0:	87 e1       	ldi	r24, 0x17	; 23
    2ce2:	92 e0       	ldi	r25, 0x02	; 2
    2ce4:	0e 94 a2 13 	call	0x2744	; 0x2744 <_ZL24USB_SendStringDescriptorPKhhh>
    2ce8:	63 c0       	rjmp	.+198    	; 0x2db0 <__vector_11+0x27e>
		}
		else if (setup.wValueL == ISERIAL) {
    2cea:	83 30       	cpi	r24, 0x03	; 3
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <__vector_11+0x1be>
    2cee:	66 c0       	rjmp	.+204    	; 0x2dbc <__vector_11+0x28a>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    2cf0:	0e 94 05 1a 	call	0x340a	; 0x340a <_Z12PluggableUSBv>
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	0f 5f       	subi	r16, 0xFF	; 255
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	b8 01       	movw	r22, r16
    2cfc:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN13PluggableUSB_12getShortNameEPc>
			return USB_SendStringDescriptor((uint8_t*)name, strlen(name), 0);
    2d00:	f8 01       	movw	r30, r16
    2d02:	01 90       	ld	r0, Z+
    2d04:	00 20       	and	r0, r0
    2d06:	e9 f7       	brne	.-6      	; 0x2d02 <__vector_11+0x1d0>
    2d08:	31 97       	sbiw	r30, 0x01	; 1
    2d0a:	bf 01       	movw	r22, r30
    2d0c:	60 1b       	sub	r22, r16
    2d0e:	71 0b       	sbc	r23, r17
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	c8 01       	movw	r24, r16
    2d14:	e7 cf       	rjmp	.-50     	; 0x2ce4 <__vector_11+0x1b2>
	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
	{
		if (setup.wLength == 8)
			_cdcComposite = 1;
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorB : (const u8*)&USB_DeviceDescriptor;
    2d16:	63 ef       	ldi	r22, 0xF3	; 243
    2d18:	71 e0       	ldi	r23, 0x01	; 1
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <__vector_11+0x1ee>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const u8*)&STRING_LANGUAGE;
    2d1c:	64 e3       	ldi	r22, 0x34	; 52
    2d1e:	72 e0       	ldi	r23, 0x02	; 2
		}
		else
			return false;
	}

	if (desc_addr == 0)
    2d20:	61 15       	cp	r22, r1
    2d22:	71 05       	cpc	r23, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <__vector_11+0x1f6>
    2d26:	4a c0       	rjmp	.+148    	; 0x2dbc <__vector_11+0x28a>
		return false;
	u8 desc_length = pgm_read_byte(desc_addr);
    2d28:	fb 01       	movw	r30, r22
    2d2a:	44 91       	lpm	r20, Z

	USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	80 e8       	ldi	r24, 0x80	; 128
    2d30:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_Z15USB_SendControlhPKvi>
    2d34:	3f c0       	rjmp	.+126    	; 0x2db4 <__vector_11+0x282>
		}
		else if (GET_DESCRIPTOR == r)
		{
			ok = SendDescriptor(setup);
		}
		else if (SET_DESCRIPTOR == r)
    2d36:	97 30       	cpi	r25, 0x07	; 7
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <__vector_11+0x20a>
    2d3a:	40 c0       	rjmp	.+128    	; 0x2dbc <__vector_11+0x28a>
		{
			ok = false;
		}
		else if (GET_CONFIGURATION == r)
    2d3c:	98 30       	cpi	r25, 0x08	; 8
    2d3e:	21 f4       	brne	.+8      	; 0x2d48 <__vector_11+0x216>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	80 93 f1 00 	sts	0x00F1, r24
    2d46:	36 c0       	rjmp	.+108    	; 0x2db4 <__vector_11+0x282>
		}
		else if (GET_CONFIGURATION == r)
		{
			Send8(1);
		}
		else if (SET_CONFIGURATION == r)
    2d48:	99 30       	cpi	r25, 0x09	; 9
    2d4a:	a1 f5       	brne	.+104    	; 0x2db4 <__vector_11+0x282>
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
    2d4c:	83 70       	andi	r24, 0x03	; 3
    2d4e:	b1 f5       	brne	.+108    	; 0x2dbc <__vector_11+0x28a>
    2d50:	ed e0       	ldi	r30, 0x0D	; 13
    2d52:	f1 e0       	ldi	r31, 0x01	; 1
    2d54:	81 e0       	ldi	r24, 0x01	; 1
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
	{
		UENUM = i;
		UECONX = (1<<EPEN);
    2d56:	21 e0       	ldi	r18, 0x01	; 1
		UECFG0X = _initEndpoints[i];
#if USB_EP_SIZE == 16
		UECFG1X = EP_SINGLE_16;
#elif USB_EP_SIZE == 64
		UECFG1X = EP_DOUBLE_64;
    2d58:	36 e3       	ldi	r19, 0x36	; 54
}

static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
    2d5a:	90 81       	ld	r25, Z
    2d5c:	99 23       	and	r25, r25
    2d5e:	61 f0       	breq	.+24     	; 0x2d78 <__vector_11+0x246>
	{
		UENUM = i;
    2d60:	80 93 e9 00 	sts	0x00E9, r24
		UECONX = (1<<EPEN);
    2d64:	20 93 eb 00 	sts	0x00EB, r18
		UECFG0X = _initEndpoints[i];
    2d68:	91 91       	ld	r25, Z+
    2d6a:	90 93 ec 00 	sts	0x00EC, r25
#if USB_EP_SIZE == 16
		UECFG1X = EP_SINGLE_16;
#elif USB_EP_SIZE == 64
		UECFG1X = EP_DOUBLE_64;
    2d6e:	30 93 ed 00 	sts	0x00ED, r19
}

static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
    2d72:	8f 5f       	subi	r24, 0xFF	; 255
    2d74:	87 30       	cpi	r24, 0x07	; 7
    2d76:	89 f7       	brne	.-30     	; 0x2d5a <__vector_11+0x228>
		UECFG1X = EP_DOUBLE_64;
#else
#error Unsupported value for USB_EP_SIZE
#endif
	}
	UERST = 0x7E;	// And reset them
    2d78:	8e e7       	ldi	r24, 0x7E	; 126
    2d7a:	80 93 ea 00 	sts	0x00EA, r24
	UERST = 0;
    2d7e:	10 92 ea 00 	sts	0x00EA, r1
		else if (SET_CONFIGURATION == r)
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
			{
				InitEndpoints();
				_usbConfiguration = setup.wValueL;
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	80 93 29 05 	sts	0x0529, r24
    2d88:	15 c0       	rjmp	.+42     	; 0x2db4 <__vector_11+0x282>
		{
		}
	}
	else
	{
		InitControl(setup.wLength);		//	Max length of transfer
    2d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d8e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z11InitControli>
static
bool ClassInterfaceRequest(USBSetup& setup)
{
	u8 i = setup.wIndex;

	if (CDC_ACM_INTERFACE == i)
    2d92:	89 8d       	ldd	r24, Y+25	; 0x19
    2d94:	81 11       	cpse	r24, r1
    2d96:	05 c0       	rjmp	.+10     	; 0x2da2 <__vector_11+0x270>
		return CDC_Setup(setup);
    2d98:	ce 01       	movw	r24, r28
    2d9a:	45 96       	adiw	r24, 0x15	; 21
    2d9c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z9CDC_SetupR8USBSetup>
    2da0:	07 c0       	rjmp	.+14     	; 0x2db0 <__vector_11+0x27e>

#ifdef PLUGGABLE_USB_ENABLED
	return PluggableUSB().setup(setup);
    2da2:	0e 94 05 1a 	call	0x340a	; 0x340a <_Z12PluggableUSBv>
    2da6:	be 01       	movw	r22, r28
    2da8:	6b 5e       	subi	r22, 0xEB	; 235
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN13PluggableUSB_5setupER8USBSetup>
	{
		InitControl(setup.wLength);		//	Max length of transfer
		ok = ClassInterfaceRequest(setup);
	}

	if (ok)
    2db0:	88 23       	and	r24, r24
    2db2:	21 f0       	breq	.+8      	; 0x2dbc <__vector_11+0x28a>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    2db4:	8e ef       	ldi	r24, 0xFE	; 254
    2db6:	80 93 e8 00 	sts	0x00E8, r24
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <__vector_11+0x290>
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
}

static inline void Stall()
{
	UECONX = (1<<STALLRQ) | (1<<EPEN);
    2dbc:	81 e2       	ldi	r24, 0x21	; 33
    2dbe:	80 93 eb 00 	sts	0x00EB, r24
		ClearIN();
	else
	{
		Stall();
	}
}
    2dc2:	6c 96       	adiw	r28, 0x1c	; 28
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	ff 91       	pop	r31
    2dd4:	ef 91       	pop	r30
    2dd6:	bf 91       	pop	r27
    2dd8:	af 91       	pop	r26
    2dda:	9f 91       	pop	r25
    2ddc:	8f 91       	pop	r24
    2dde:	7f 91       	pop	r23
    2de0:	6f 91       	pop	r22
    2de2:	5f 91       	pop	r21
    2de4:	4f 91       	pop	r20
    2de6:	3f 91       	pop	r19
    2de8:	2f 91       	pop	r18
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	ff 90       	pop	r15
    2df0:	ef 90       	pop	r14
    2df2:	df 90       	pop	r13
    2df4:	cf 90       	pop	r12
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	0f 90       	pop	r0
    2dfc:	1f 90       	pop	r1
    2dfe:	18 95       	reti

00002e00 <_Z9USB_Flushh>:
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    2e00:	80 93 e9 00 	sts	0x00E9, r24
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    2e04:	80 91 f2 00 	lds	r24, 0x00F2
}

void USB_Flush(u8 ep)
{
	SetEP(ep);
	if (FifoByteCount())
    2e08:	88 23       	and	r24, r24
    2e0a:	19 f0       	breq	.+6      	; 0x2e12 <_Z9USB_Flushh+0x12>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    2e0c:	8a e3       	ldi	r24, 0x3A	; 58
    2e0e:	80 93 e8 00 	sts	0x00E8, r24
    2e12:	08 95       	ret

00002e14 <__vector_10>:
#endif
}

//	General interrupt
ISR(USB_GEN_vect)
{
    2e14:	1f 92       	push	r1
    2e16:	0f 92       	push	r0
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	0f 92       	push	r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	2f 93       	push	r18
    2e20:	3f 93       	push	r19
    2e22:	4f 93       	push	r20
    2e24:	5f 93       	push	r21
    2e26:	6f 93       	push	r22
    2e28:	7f 93       	push	r23
    2e2a:	8f 93       	push	r24
    2e2c:	9f 93       	push	r25
    2e2e:	af 93       	push	r26
    2e30:	bf 93       	push	r27
    2e32:	cf 93       	push	r28
    2e34:	ef 93       	push	r30
    2e36:	ff 93       	push	r31
	u8 udint = UDINT;
    2e38:	c0 91 e1 00 	lds	r28, 0x00E1
	UDINT = UDINT &= ~((1<<EORSTI) | (1<<SOFI)); // clear the IRQ flags for the IRQs which are handled here, except WAKEUPI and SUSPI (see below)
    2e3c:	80 91 e1 00 	lds	r24, 0x00E1
    2e40:	83 7f       	andi	r24, 0xF3	; 243
    2e42:	80 93 e1 00 	sts	0x00E1, r24
    2e46:	80 93 e1 00 	sts	0x00E1, r24

	//	End of Reset
	if (udint & (1<<EORSTI))
    2e4a:	c3 ff       	sbrs	r28, 3
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <__vector_10+0x58>
#define EP_SINGLE_16 0x12

static
void InitEP(u8 index, u8 type, u8 size)
{
	UENUM = index;
    2e4e:	10 92 e9 00 	sts	0x00E9, r1
	UECONX = (1<<EPEN);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	80 93 eb 00 	sts	0x00EB, r24
	UECFG0X = type;
    2e58:	10 92 ec 00 	sts	0x00EC, r1
	UECFG1X = size;
    2e5c:	82 e3       	ldi	r24, 0x32	; 50
    2e5e:	80 93 ed 00 	sts	0x00ED, r24

	//	End of Reset
	if (udint & (1<<EORSTI))
	{
		InitEP(0,EP_TYPE_CONTROL,EP_SINGLE_64);	// init ep0
		_usbConfiguration = 0;			// not configured yet
    2e62:	10 92 29 05 	sts	0x0529, r1
		UEIENX = 1 << RXSTPE;			// Enable interrupts for ep0
    2e66:	88 e0       	ldi	r24, 0x08	; 8
    2e68:	80 93 f0 00 	sts	0x00F0, r24
	}

	//	Start of Frame - happens every millisecond so we use it for TX and RX LED one-shot timing, too
	if (udint & (1<<SOFI))
    2e6c:	c2 ff       	sbrs	r28, 2
    2e6e:	19 c0       	rjmp	.+50     	; 0x2ea2 <__vector_10+0x8e>
	{
		USB_Flush(CDC_TX);				// Send a tx frame if found
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_Z9USB_Flushh>
		
		// check whether the one-shot period has elapsed.  if so, turn off the LED
		if (TxLEDPulse && !(--TxLEDPulse))
    2e76:	80 91 2b 05 	lds	r24, 0x052B
    2e7a:	88 23       	and	r24, r24
    2e7c:	39 f0       	breq	.+14     	; 0x2e8c <__vector_10+0x78>
    2e7e:	80 91 2b 05 	lds	r24, 0x052B
    2e82:	81 50       	subi	r24, 0x01	; 1
    2e84:	80 93 2b 05 	sts	0x052B, r24
    2e88:	88 23       	and	r24, r24
    2e8a:	89 f1       	breq	.+98     	; 0x2eee <__vector_10+0xda>
			TXLED0;
		if (RxLEDPulse && !(--RxLEDPulse))
    2e8c:	80 91 2a 05 	lds	r24, 0x052A
    2e90:	88 23       	and	r24, r24
    2e92:	39 f0       	breq	.+14     	; 0x2ea2 <__vector_10+0x8e>
    2e94:	80 91 2a 05 	lds	r24, 0x052A
    2e98:	81 50       	subi	r24, 0x01	; 1
    2e9a:	80 93 2a 05 	sts	0x052A, r24
    2e9e:	88 23       	and	r24, r24
    2ea0:	41 f1       	breq	.+80     	; 0x2ef2 <__vector_10+0xde>
	}

	// the WAKEUPI interrupt is triggered as soon as there are non-idle patterns on the data
	// lines. Thus, the WAKEUPI interrupt can occur even if the controller is not in the "suspend" mode.
	// Therefore the we enable it only when USB is suspended
	if (udint & (1<<WAKEUPI))
    2ea2:	c4 ff       	sbrs	r28, 4
    2ea4:	10 c0       	rjmp	.+32     	; 0x2ec6 <__vector_10+0xb2>
	{
		UDIEN = (UDIEN & ~(1<<WAKEUPE)) | (1<<SUSPE); // Disable interrupts for WAKEUP and enable interrupts for SUSPEND
    2ea6:	80 91 e2 00 	lds	r24, 0x00E2
    2eaa:	8e 7e       	andi	r24, 0xEE	; 238
    2eac:	81 60       	ori	r24, 0x01	; 1
    2eae:	80 93 e2 00 	sts	0x00E2, r24

		//TODO
		// WAKEUPI shall be cleared by software (USB clock inputs must be enabled before).
		//USB_ClockEnable();
		UDINT &= ~(1<<WAKEUPI);
    2eb2:	80 91 e1 00 	lds	r24, 0x00E1
    2eb6:	8f 7e       	andi	r24, 0xEF	; 239
    2eb8:	80 93 e1 00 	sts	0x00E1, r24
		_usbSuspendState = (_usbSuspendState & ~(1<<SUSPI)) | (1<<WAKEUPI);
    2ebc:	80 91 27 05 	lds	r24, 0x0527
    2ec0:	8e 7e       	andi	r24, 0xEE	; 238
    2ec2:	80 61       	ori	r24, 0x10	; 16
    2ec4:	11 c0       	rjmp	.+34     	; 0x2ee8 <__vector_10+0xd4>
	}
	else if (udint & (1<<SUSPI)) // only one of the WAKEUPI / SUSPI bits can be active at time
    2ec6:	c0 ff       	sbrs	r28, 0
    2ec8:	16 c0       	rjmp	.+44     	; 0x2ef6 <__vector_10+0xe2>
	{
		UDIEN = (UDIEN & ~(1<<SUSPE)) | (1<<WAKEUPE); // Disable interrupts for SUSPEND and enable interrupts for WAKEUP
    2eca:	80 91 e2 00 	lds	r24, 0x00E2
    2ece:	8e 7e       	andi	r24, 0xEE	; 238
    2ed0:	80 61       	ori	r24, 0x10	; 16
    2ed2:	80 93 e2 00 	sts	0x00E2, r24

		//TODO
		//USB_ClockDisable();

		UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear any already pending WAKEUP IRQs and the SUSPI request
    2ed6:	80 91 e1 00 	lds	r24, 0x00E1
    2eda:	8e 7e       	andi	r24, 0xEE	; 238
    2edc:	80 93 e1 00 	sts	0x00E1, r24
		_usbSuspendState = (_usbSuspendState & ~(1<<WAKEUPI)) | (1<<SUSPI);
    2ee0:	80 91 27 05 	lds	r24, 0x0527
    2ee4:	8e 7e       	andi	r24, 0xEE	; 238
    2ee6:	81 60       	ori	r24, 0x01	; 1
    2ee8:	80 93 27 05 	sts	0x0527, r24
    2eec:	04 c0       	rjmp	.+8      	; 0x2ef6 <__vector_10+0xe2>
	{
		USB_Flush(CDC_TX);				// Send a tx frame if found
		
		// check whether the one-shot period has elapsed.  if so, turn off the LED
		if (TxLEDPulse && !(--TxLEDPulse))
			TXLED0;
    2eee:	5d 9a       	sbi	0x0b, 5	; 11
    2ef0:	cd cf       	rjmp	.-102    	; 0x2e8c <__vector_10+0x78>
		if (RxLEDPulse && !(--RxLEDPulse))
			RXLED0;
    2ef2:	28 9a       	sbi	0x05, 0	; 5
    2ef4:	d6 cf       	rjmp	.-84     	; 0x2ea2 <__vector_10+0x8e>
		//USB_ClockDisable();

		UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear any already pending WAKEUP IRQs and the SUSPI request
		_usbSuspendState = (_usbSuspendState & ~(1<<WAKEUPI)) | (1<<SUSPI);
	}
}
    2ef6:	ff 91       	pop	r31
    2ef8:	ef 91       	pop	r30
    2efa:	cf 91       	pop	r28
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	7f 91       	pop	r23
    2f06:	6f 91       	pop	r22
    2f08:	5f 91       	pop	r21
    2f0a:	4f 91       	pop	r20
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2f1a:	10 92 29 05 	sts	0x0529, r1
	_usbCurrentStatus = 0;
    2f1e:	10 92 28 05 	sts	0x0528, r1
	_usbSuspendState = 0;
    2f22:	10 92 27 05 	sts	0x0527, r1
	USB_ClockEnable();
    2f26:	0e 94 df 13 	call	0x27be	; 0x27be <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2f2a:	e1 ee       	ldi	r30, 0xE1	; 225
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	8e 7e       	andi	r24, 0xEE	; 238
    2f32:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2f34:	8d e0       	ldi	r24, 0x0D	; 13
    2f36:	80 93 e2 00 	sts	0x00E2, r24
	
	TX_RX_LED_INIT;
    2f3a:	55 9a       	sbi	0x0a, 5	; 10
    2f3c:	20 9a       	sbi	0x04, 0	; 4
    2f3e:	08 95       	ret

00002f40 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2f40:	1f 92       	push	r1
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	2f 93       	push	r18
    2f4c:	3f 93       	push	r19
    2f4e:	8f 93       	push	r24
    2f50:	9f 93       	push	r25
    2f52:	af 93       	push	r26
    2f54:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2f56:	80 91 2d 05 	lds	r24, 0x052D
    2f5a:	90 91 2e 05 	lds	r25, 0x052E
    2f5e:	a0 91 2f 05 	lds	r26, 0x052F
    2f62:	b0 91 30 05 	lds	r27, 0x0530
	unsigned char f = timer0_fract;
    2f66:	30 91 2c 05 	lds	r19, 0x052C

	m += MILLIS_INC;
	f += FRACT_INC;
    2f6a:	23 e0       	ldi	r18, 0x03	; 3
    2f6c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2f6e:	2d 37       	cpi	r18, 0x7D	; 125
    2f70:	20 f4       	brcc	.+8      	; 0x2f7a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	a1 1d       	adc	r26, r1
    2f76:	b1 1d       	adc	r27, r1
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2f7a:	26 e8       	ldi	r18, 0x86	; 134
    2f7c:	23 0f       	add	r18, r19
		m += 1;
    2f7e:	02 96       	adiw	r24, 0x02	; 2
    2f80:	a1 1d       	adc	r26, r1
    2f82:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f84:	20 93 2c 05 	sts	0x052C, r18
	timer0_millis = m;
    2f88:	80 93 2d 05 	sts	0x052D, r24
    2f8c:	90 93 2e 05 	sts	0x052E, r25
    2f90:	a0 93 2f 05 	sts	0x052F, r26
    2f94:	b0 93 30 05 	sts	0x0530, r27
	timer0_overflow_count++;
    2f98:	80 91 31 05 	lds	r24, 0x0531
    2f9c:	90 91 32 05 	lds	r25, 0x0532
    2fa0:	a0 91 33 05 	lds	r26, 0x0533
    2fa4:	b0 91 34 05 	lds	r27, 0x0534
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	a1 1d       	adc	r26, r1
    2fac:	b1 1d       	adc	r27, r1
    2fae:	80 93 31 05 	sts	0x0531, r24
    2fb2:	90 93 32 05 	sts	0x0532, r25
    2fb6:	a0 93 33 05 	sts	0x0533, r26
    2fba:	b0 93 34 05 	sts	0x0534, r27
}
    2fbe:	bf 91       	pop	r27
    2fc0:	af 91       	pop	r26
    2fc2:	9f 91       	pop	r25
    2fc4:	8f 91       	pop	r24
    2fc6:	3f 91       	pop	r19
    2fc8:	2f 91       	pop	r18
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0
    2fd0:	1f 90       	pop	r1
    2fd2:	18 95       	reti

00002fd4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2fd4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2fd6:	f8 94       	cli
	m = timer0_millis;
    2fd8:	60 91 2d 05 	lds	r22, 0x052D
    2fdc:	70 91 2e 05 	lds	r23, 0x052E
    2fe0:	80 91 2f 05 	lds	r24, 0x052F
    2fe4:	90 91 30 05 	lds	r25, 0x0530
	SREG = oldSREG;
    2fe8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2fea:	08 95       	ret

00002fec <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2fec:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2fee:	f8 94       	cli
	m = timer0_overflow_count;
    2ff0:	80 91 31 05 	lds	r24, 0x0531
    2ff4:	90 91 32 05 	lds	r25, 0x0532
    2ff8:	a0 91 33 05 	lds	r26, 0x0533
    2ffc:	b0 91 34 05 	lds	r27, 0x0534
#if defined(TCNT0)
	t = TCNT0;
    3000:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3002:	a8 9b       	sbis	0x15, 0	; 21
    3004:	05 c0       	rjmp	.+10     	; 0x3010 <micros+0x24>
    3006:	2f 3f       	cpi	r18, 0xFF	; 255
    3008:	19 f0       	breq	.+6      	; 0x3010 <micros+0x24>
		m++;
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	a1 1d       	adc	r26, r1
    300e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3010:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3012:	ba 2f       	mov	r27, r26
    3014:	a9 2f       	mov	r26, r25
    3016:	98 2f       	mov	r25, r24
    3018:	88 27       	eor	r24, r24
    301a:	82 0f       	add	r24, r18
    301c:	91 1d       	adc	r25, r1
    301e:	a1 1d       	adc	r26, r1
    3020:	b1 1d       	adc	r27, r1
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	42 e0       	ldi	r20, 0x02	; 2
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	88 1f       	adc	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	4a 95       	dec	r20
    3032:	d1 f7       	brne	.-12     	; 0x3028 <micros+0x3c>
}
    3034:	08 95       	ret

00003036 <delay>:

void delay(unsigned long ms)
{
    3036:	8f 92       	push	r8
    3038:	9f 92       	push	r9
    303a:	af 92       	push	r10
    303c:	bf 92       	push	r11
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	6b 01       	movw	r12, r22
    3048:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    304a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <micros>
    304e:	4b 01       	movw	r8, r22
    3050:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3052:	c1 14       	cp	r12, r1
    3054:	d1 04       	cpc	r13, r1
    3056:	e1 04       	cpc	r14, r1
    3058:	f1 04       	cpc	r15, r1
    305a:	01 f1       	breq	.+64     	; 0x309c <delay+0x66>
		yield();
    305c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3060:	0e 94 f6 17 	call	0x2fec	; 0x2fec <micros>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	88 19       	sub	r24, r8
    306a:	99 09       	sbc	r25, r9
    306c:	aa 09       	sbc	r26, r10
    306e:	bb 09       	sbc	r27, r11
    3070:	88 3e       	cpi	r24, 0xE8	; 232
    3072:	93 40       	sbci	r25, 0x03	; 3
    3074:	a1 05       	cpc	r26, r1
    3076:	b1 05       	cpc	r27, r1
    3078:	60 f3       	brcs	.-40     	; 0x3052 <delay+0x1c>
			ms--;
    307a:	21 e0       	ldi	r18, 0x01	; 1
    307c:	c2 1a       	sub	r12, r18
    307e:	d1 08       	sbc	r13, r1
    3080:	e1 08       	sbc	r14, r1
    3082:	f1 08       	sbc	r15, r1
			start += 1000;
    3084:	88 ee       	ldi	r24, 0xE8	; 232
    3086:	88 0e       	add	r8, r24
    3088:	83 e0       	ldi	r24, 0x03	; 3
    308a:	98 1e       	adc	r9, r24
    308c:	a1 1c       	adc	r10, r1
    308e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3090:	c1 14       	cp	r12, r1
    3092:	d1 04       	cpc	r13, r1
    3094:	e1 04       	cpc	r14, r1
    3096:	f1 04       	cpc	r15, r1
    3098:	19 f7       	brne	.-58     	; 0x3060 <delay+0x2a>
    309a:	db cf       	rjmp	.-74     	; 0x3052 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    309c:	ff 90       	pop	r15
    309e:	ef 90       	pop	r14
    30a0:	df 90       	pop	r13
    30a2:	cf 90       	pop	r12
    30a4:	bf 90       	pop	r11
    30a6:	af 90       	pop	r10
    30a8:	9f 90       	pop	r9
    30aa:	8f 90       	pop	r8
    30ac:	08 95       	ret

000030ae <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    30ae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    30b0:	84 b5       	in	r24, 0x24	; 36
    30b2:	82 60       	ori	r24, 0x02	; 2
    30b4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    30b6:	84 b5       	in	r24, 0x24	; 36
    30b8:	81 60       	ori	r24, 0x01	; 1
    30ba:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    30bc:	85 b5       	in	r24, 0x25	; 37
    30be:	82 60       	ori	r24, 0x02	; 2
    30c0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    30c2:	85 b5       	in	r24, 0x25	; 37
    30c4:	81 60       	ori	r24, 0x01	; 1
    30c6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    30c8:	ee e6       	ldi	r30, 0x6E	; 110
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	81 60       	ori	r24, 0x01	; 1
    30d0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    30d2:	e1 e8       	ldi	r30, 0x81	; 129
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    30d8:	80 81       	ld	r24, Z
    30da:	82 60       	ori	r24, 0x02	; 2
    30dc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    30de:	80 81       	ld	r24, Z
    30e0:	81 60       	ori	r24, 0x01	; 1
    30e2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    30e4:	e0 e8       	ldi	r30, 0x80	; 128
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	81 60       	ori	r24, 0x01	; 1
    30ec:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    30ee:	e1 e9       	ldi	r30, 0x91	; 145
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	82 60       	ori	r24, 0x02	; 2
    30f6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    30f8:	80 81       	ld	r24, Z
    30fa:	81 60       	ori	r24, 0x01	; 1
    30fc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    30fe:	e0 e9       	ldi	r30, 0x90	; 144
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	81 60       	ori	r24, 0x01	; 1
    3106:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3108:	e1 ec       	ldi	r30, 0xC1	; 193
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	84 60       	ori	r24, 0x04	; 4
    3110:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    3112:	80 81       	ld	r24, Z
    3114:	82 60       	ori	r24, 0x02	; 2
    3116:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3118:	80 81       	ld	r24, Z
    311a:	81 60       	ori	r24, 0x01	; 1
    311c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    311e:	e3 ec       	ldi	r30, 0xC3	; 195
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	81 60       	ori	r24, 0x01	; 1
    3126:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    3128:	e0 ec       	ldi	r30, 0xC0	; 192
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	82 60       	ori	r24, 0x02	; 2
    3130:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    3132:	e2 ec       	ldi	r30, 0xC2	; 194
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	81 60       	ori	r24, 0x01	; 1
    313a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    313c:	ea e7       	ldi	r30, 0x7A	; 122
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	84 60       	ori	r24, 0x04	; 4
    3144:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3146:	80 81       	ld	r24, Z
    3148:	82 60       	ori	r24, 0x02	; 2
    314a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    314c:	80 81       	ld	r24, Z
    314e:	81 60       	ori	r24, 0x01	; 1
    3150:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3152:	80 81       	ld	r24, Z
    3154:	80 68       	ori	r24, 0x80	; 128
    3156:	80 83       	st	Z, r24
    3158:	08 95       	ret

0000315a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	fc 01       	movw	r30, r24
    315e:	31 97       	sbiw	r30, 0x01	; 1
    3160:	ef 30       	cpi	r30, 0x0F	; 15
    3162:	f1 05       	cpc	r31, r1
    3164:	b0 f5       	brcc	.+108    	; 0x31d2 <turnOffPWM+0x78>
    3166:	e7 54       	subi	r30, 0x47	; 71
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    316e:	80 91 80 00 	lds	r24, 0x0080
    3172:	8f 77       	andi	r24, 0x7F	; 127
    3174:	03 c0       	rjmp	.+6      	; 0x317c <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3176:	80 91 80 00 	lds	r24, 0x0080
    317a:	8f 7d       	andi	r24, 0xDF	; 223
    317c:	80 93 80 00 	sts	0x0080, r24
    3180:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3182:	80 91 80 00 	lds	r24, 0x0080
    3186:	87 7f       	andi	r24, 0xF7	; 247
    3188:	f9 cf       	rjmp	.-14     	; 0x317c <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    318a:	84 b5       	in	r24, 0x24	; 36
    318c:	8f 77       	andi	r24, 0x7F	; 127
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3190:	84 b5       	in	r24, 0x24	; 36
    3192:	8f 7d       	andi	r24, 0xDF	; 223
    3194:	84 bd       	out	0x24, r24	; 36
    3196:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3198:	80 91 90 00 	lds	r24, 0x0090
    319c:	8f 77       	andi	r24, 0x7F	; 127
    319e:	07 c0       	rjmp	.+14     	; 0x31ae <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    31a0:	80 91 90 00 	lds	r24, 0x0090
    31a4:	8f 7d       	andi	r24, 0xDF	; 223
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    31a8:	80 91 90 00 	lds	r24, 0x0090
    31ac:	87 7f       	andi	r24, 0xF7	; 247
    31ae:	80 93 90 00 	sts	0x0090, r24
    31b2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    31b4:	80 91 c0 00 	lds	r24, 0x00C0
    31b8:	8f 77       	andi	r24, 0x7F	; 127
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    31bc:	80 91 c0 00 	lds	r24, 0x00C0
    31c0:	8f 7d       	andi	r24, 0xDF	; 223
    31c2:	80 93 c0 00 	sts	0x00C0, r24
    31c6:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    31c8:	80 91 c2 00 	lds	r24, 0x00C2
    31cc:	87 7f       	andi	r24, 0xF7	; 247
    31ce:	80 93 c2 00 	sts	0x00C2, r24
    31d2:	08 95       	ret

000031d4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	fc 01       	movw	r30, r24
    31dc:	e9 5a       	subi	r30, 0xA9	; 169
    31de:	fd 4f       	sbci	r31, 0xFD	; 253
    31e0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    31e2:	fc 01       	movw	r30, r24
    31e4:	ea 58       	subi	r30, 0x8A	; 138
    31e6:	fd 4f       	sbci	r31, 0xFD	; 253
    31e8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    31ea:	88 23       	and	r24, r24
    31ec:	61 f1       	breq	.+88     	; 0x3246 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	fc 01       	movw	r30, r24
    31f6:	ef 54       	subi	r30, 0x4F	; 79
    31f8:	fd 4f       	sbci	r31, 0xFD	; 253
    31fa:	c5 91       	lpm	r28, Z+
    31fc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    31fe:	fc 01       	movw	r30, r24
    3200:	ed 55       	subi	r30, 0x5D	; 93
    3202:	fd 4f       	sbci	r31, 0xFD	; 253
    3204:	a5 91       	lpm	r26, Z+
    3206:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3208:	61 11       	cpse	r22, r1
    320a:	09 c0       	rjmp	.+18     	; 0x321e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    320c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    320e:	f8 94       	cli
		*reg &= ~bit;
    3210:	88 81       	ld	r24, Y
    3212:	20 95       	com	r18
    3214:	82 23       	and	r24, r18
    3216:	88 83       	st	Y, r24
		*out &= ~bit;
    3218:	ec 91       	ld	r30, X
    321a:	2e 23       	and	r18, r30
    321c:	0b c0       	rjmp	.+22     	; 0x3234 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    321e:	62 30       	cpi	r22, 0x02	; 2
    3220:	61 f4       	brne	.+24     	; 0x323a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3222:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3224:	f8 94       	cli
		*reg &= ~bit;
    3226:	38 81       	ld	r19, Y
    3228:	82 2f       	mov	r24, r18
    322a:	80 95       	com	r24
    322c:	83 23       	and	r24, r19
    322e:	88 83       	st	Y, r24
		*out |= bit;
    3230:	ec 91       	ld	r30, X
    3232:	2e 2b       	or	r18, r30
    3234:	2c 93       	st	X, r18
		SREG = oldSREG;
    3236:	9f bf       	out	0x3f, r25	; 63
    3238:	06 c0       	rjmp	.+12     	; 0x3246 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    323a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    323c:	f8 94       	cli
		*reg |= bit;
    323e:	e8 81       	ld	r30, Y
    3240:	2e 2b       	or	r18, r30
    3242:	28 83       	st	Y, r18
		SREG = oldSREG;
    3244:	8f bf       	out	0x3f, r24	; 63
	}
}
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	08 95       	ret

0000324c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	f9 01       	movw	r30, r18
    3258:	e8 5c       	subi	r30, 0xC8	; 200
    325a:	fd 4f       	sbci	r31, 0xFD	; 253
    325c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    325e:	f9 01       	movw	r30, r18
    3260:	e9 5a       	subi	r30, 0xA9	; 169
    3262:	fd 4f       	sbci	r31, 0xFD	; 253
    3264:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3266:	f9 01       	movw	r30, r18
    3268:	ea 58       	subi	r30, 0x8A	; 138
    326a:	fd 4f       	sbci	r31, 0xFD	; 253
    326c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    326e:	cc 23       	and	r28, r28
    3270:	c9 f0       	breq	.+50     	; 0x32a4 <digitalWrite+0x58>
    3272:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3274:	81 11       	cpse	r24, r1
    3276:	0e 94 ad 18 	call	0x315a	; 0x315a <turnOffPWM>

	out = portOutputRegister(port);
    327a:	ec 2f       	mov	r30, r28
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	ee 0f       	add	r30, r30
    3280:	ff 1f       	adc	r31, r31
    3282:	ed 55       	subi	r30, 0x5D	; 93
    3284:	fd 4f       	sbci	r31, 0xFD	; 253
    3286:	a5 91       	lpm	r26, Z+
    3288:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    328a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    328c:	f8 94       	cli

	if (val == LOW) {
    328e:	11 11       	cpse	r17, r1
    3290:	05 c0       	rjmp	.+10     	; 0x329c <digitalWrite+0x50>
		*out &= ~bit;
    3292:	9c 91       	ld	r25, X
    3294:	ed 2f       	mov	r30, r29
    3296:	e0 95       	com	r30
    3298:	e9 23       	and	r30, r25
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <digitalWrite+0x54>
	} else {
		*out |= bit;
    329c:	ec 91       	ld	r30, X
    329e:	ed 2b       	or	r30, r29
    32a0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    32a2:	8f bf       	out	0x3f, r24	; 63
}
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	08 95       	ret

000032ac <digitalRead>:

int digitalRead(uint8_t pin)
{
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	f9 01       	movw	r30, r18
    32b6:	e8 5c       	subi	r30, 0xC8	; 200
    32b8:	fd 4f       	sbci	r31, 0xFD	; 253
    32ba:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    32bc:	f9 01       	movw	r30, r18
    32be:	e9 5a       	subi	r30, 0xA9	; 169
    32c0:	fd 4f       	sbci	r31, 0xFD	; 253
    32c2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    32c4:	f9 01       	movw	r30, r18
    32c6:	ea 58       	subi	r30, 0x8A	; 138
    32c8:	fd 4f       	sbci	r31, 0xFD	; 253
    32ca:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    32cc:	cc 23       	and	r28, r28
    32ce:	91 f0       	breq	.+36     	; 0x32f4 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    32d0:	81 11       	cpse	r24, r1
    32d2:	0e 94 ad 18 	call	0x315a	; 0x315a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    32d6:	ec 2f       	mov	r30, r28
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	ee 0f       	add	r30, r30
    32dc:	ff 1f       	adc	r31, r31
    32de:	eb 56       	subi	r30, 0x6B	; 107
    32e0:	fd 4f       	sbci	r31, 0xFD	; 253
    32e2:	a5 91       	lpm	r26, Z+
    32e4:	b4 91       	lpm	r27, Z
    32e6:	ec 91       	ld	r30, X
    32e8:	ed 23       	and	r30, r29
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	21 f4       	brne	.+8      	; 0x32f8 <digitalRead+0x4c>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    32fe:	08 95       	ret

00003300 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	7b 01       	movw	r14, r22
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    330e:	fc 01       	movw	r30, r24
    3310:	c2 81       	ldd	r28, Z+2	; 0x02
    3312:	d3 81       	ldd	r29, Z+3	; 0x03

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
    3314:	00 e0       	ldi	r16, 0x00	; 0
    3316:	10 e0       	ldi	r17, 0x00	; 0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    3318:	20 97       	sbiw	r28, 0x00	; 0
    331a:	81 f0       	breq	.+32     	; 0x333c <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
		int res = node->getInterface(interfaceCount);
    331c:	e8 81       	ld	r30, Y
    331e:	f9 81       	ldd	r31, Y+1	; 0x01
    3320:	02 80       	ldd	r0, Z+2	; 0x02
    3322:	f3 81       	ldd	r31, Z+3	; 0x03
    3324:	e0 2d       	mov	r30, r0
    3326:	b7 01       	movw	r22, r14
    3328:	ce 01       	movw	r24, r28
    332a:	09 95       	icall
		if (res < 0)
    332c:	97 fd       	sbrc	r25, 7
    332e:	08 c0       	rjmp	.+16     	; 0x3340 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
			return -1;
		sent += res;
    3330:	08 0f       	add	r16, r24
    3332:	19 1f       	adc	r17, r25

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    3334:	08 84       	ldd	r0, Y+8	; 0x08
    3336:	d9 85       	ldd	r29, Y+9	; 0x09
    3338:	c0 2d       	mov	r28, r0
    333a:	ee cf       	rjmp	.-36     	; 0x3318 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
		sent += res;
	}
	return sent;
    333c:	c8 01       	movw	r24, r16
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    3340:	8f ef       	ldi	r24, 0xFF	; 255
    3342:	9f ef       	ldi	r25, 0xFF	; 255
		sent += res;
	}
	return sent;
}
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	08 95       	ret

00003352 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    335c:	fc 01       	movw	r30, r24
    335e:	c2 81       	ldd	r28, Z+2	; 0x02
    3360:	d3 81       	ldd	r29, Z+3	; 0x03
    3362:	20 97       	sbiw	r28, 0x00	; 0
    3364:	71 f0       	breq	.+28     	; 0x3382 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
		int ret = node->getDescriptor(setup);
    3366:	e8 81       	ld	r30, Y
    3368:	f9 81       	ldd	r31, Y+1	; 0x01
    336a:	04 80       	ldd	r0, Z+4	; 0x04
    336c:	f5 81       	ldd	r31, Z+5	; 0x05
    336e:	e0 2d       	mov	r30, r0
    3370:	b8 01       	movw	r22, r16
    3372:	ce 01       	movw	r24, r28
    3374:	09 95       	icall
		// ret!=0 -> request has been processed
		if (ret)
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	31 f4       	brne	.+12     	; 0x3386 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    337a:	08 84       	ldd	r0, Y+8	; 0x08
    337c:	d9 85       	ldd	r29, Y+9	; 0x09
    337e:	c0 2d       	mov	r28, r0
    3380:	f0 cf       	rjmp	.-32     	; 0x3362 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
}
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	08 95       	ret

00003390 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    339a:	fc 01       	movw	r30, r24
    339c:	c2 81       	ldd	r28, Z+2	; 0x02
    339e:	d3 81       	ldd	r29, Z+3	; 0x03
    33a0:	20 97       	sbiw	r28, 0x00	; 0
    33a2:	71 f0       	breq	.+28     	; 0x33c0 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
		iSerialNum += node->getShortName(iSerialNum);
    33a4:	e8 81       	ld	r30, Y
    33a6:	f9 81       	ldd	r31, Y+1	; 0x01
    33a8:	06 80       	ldd	r0, Z+6	; 0x06
    33aa:	f7 81       	ldd	r31, Z+7	; 0x07
    33ac:	e0 2d       	mov	r30, r0
    33ae:	b8 01       	movw	r22, r16
    33b0:	ce 01       	movw	r24, r28
    33b2:	09 95       	icall
    33b4:	08 0f       	add	r16, r24
    33b6:	11 1d       	adc	r17, r1
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    33b8:	08 84       	ldd	r0, Y+8	; 0x08
    33ba:	d9 85       	ldd	r29, Y+9	; 0x09
    33bc:	c0 2d       	mov	r28, r0
    33be:	f0 cf       	rjmp	.-32     	; 0x33a0 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
		iSerialNum += node->getShortName(iSerialNum);
	}
	*iSerialNum = 0;
    33c0:	f8 01       	movw	r30, r16
    33c2:	10 82       	st	Z, r1
}
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	08 95       	ret

000033ce <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    33ce:	0f 93       	push	r16
    33d0:	1f 93       	push	r17
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    33d8:	fc 01       	movw	r30, r24
    33da:	c2 81       	ldd	r28, Z+2	; 0x02
    33dc:	d3 81       	ldd	r29, Z+3	; 0x03
    33de:	20 97       	sbiw	r28, 0x00	; 0
    33e0:	71 f0       	breq	.+28     	; 0x33fe <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
		if (node->setup(setup)) {
    33e2:	e8 81       	ld	r30, Y
    33e4:	f9 81       	ldd	r31, Y+1	; 0x01
    33e6:	01 90       	ld	r0, Z+
    33e8:	f0 81       	ld	r31, Z
    33ea:	e0 2d       	mov	r30, r0
    33ec:	b8 01       	movw	r22, r16
    33ee:	ce 01       	movw	r24, r28
    33f0:	09 95       	icall
    33f2:	81 11       	cpse	r24, r1
    33f4:	05 c0       	rjmp	.+10     	; 0x3400 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    33f6:	08 84       	ldd	r0, Y+8	; 0x08
    33f8:	d9 85       	ldd	r29, Y+9	; 0x09
    33fa:	c0 2d       	mov	r28, r0
    33fc:	f0 cf       	rjmp	.-32     	; 0x33de <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    33fe:	80 e0       	ldi	r24, 0x00	; 0
}
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	08 95       	ret

0000340a <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    340a:	80 91 39 05 	lds	r24, 0x0539
    340e:	81 11       	cpse	r24, r1
    3410:	0d c0       	rjmp	.+26     	; 0x342c <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	80 93 35 05 	sts	0x0535, r24
    3418:	84 e0       	ldi	r24, 0x04	; 4
    341a:	80 93 36 05 	sts	0x0536, r24
    341e:	10 92 38 05 	sts	0x0538, r1
    3422:	10 92 37 05 	sts	0x0537, r1
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	80 93 39 05 	sts	0x0539, r24
	return obj;
}
    342c:	85 e3       	ldi	r24, 0x35	; 53
    342e:	95 e0       	ldi	r25, 0x05	; 5
    3430:	08 95       	ret

00003432 <__udivmodqi4>:
    3432:	99 1b       	sub	r25, r25
    3434:	79 e0       	ldi	r23, 0x09	; 9
    3436:	04 c0       	rjmp	.+8      	; 0x3440 <__udivmodqi4_ep>

00003438 <__udivmodqi4_loop>:
    3438:	99 1f       	adc	r25, r25
    343a:	96 17       	cp	r25, r22
    343c:	08 f0       	brcs	.+2      	; 0x3440 <__udivmodqi4_ep>
    343e:	96 1b       	sub	r25, r22

00003440 <__udivmodqi4_ep>:
    3440:	88 1f       	adc	r24, r24
    3442:	7a 95       	dec	r23
    3444:	c9 f7       	brne	.-14     	; 0x3438 <__udivmodqi4_loop>
    3446:	80 95       	com	r24
    3448:	08 95       	ret

0000344a <__udivmodsi4>:
    344a:	a1 e2       	ldi	r26, 0x21	; 33
    344c:	1a 2e       	mov	r1, r26
    344e:	aa 1b       	sub	r26, r26
    3450:	bb 1b       	sub	r27, r27
    3452:	fd 01       	movw	r30, r26
    3454:	0d c0       	rjmp	.+26     	; 0x3470 <__udivmodsi4_ep>

00003456 <__udivmodsi4_loop>:
    3456:	aa 1f       	adc	r26, r26
    3458:	bb 1f       	adc	r27, r27
    345a:	ee 1f       	adc	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	a2 17       	cp	r26, r18
    3460:	b3 07       	cpc	r27, r19
    3462:	e4 07       	cpc	r30, r20
    3464:	f5 07       	cpc	r31, r21
    3466:	20 f0       	brcs	.+8      	; 0x3470 <__udivmodsi4_ep>
    3468:	a2 1b       	sub	r26, r18
    346a:	b3 0b       	sbc	r27, r19
    346c:	e4 0b       	sbc	r30, r20
    346e:	f5 0b       	sbc	r31, r21

00003470 <__udivmodsi4_ep>:
    3470:	66 1f       	adc	r22, r22
    3472:	77 1f       	adc	r23, r23
    3474:	88 1f       	adc	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	1a 94       	dec	r1
    347a:	69 f7       	brne	.-38     	; 0x3456 <__udivmodsi4_loop>
    347c:	60 95       	com	r22
    347e:	70 95       	com	r23
    3480:	80 95       	com	r24
    3482:	90 95       	com	r25
    3484:	9b 01       	movw	r18, r22
    3486:	ac 01       	movw	r20, r24
    3488:	bd 01       	movw	r22, r26
    348a:	cf 01       	movw	r24, r30
    348c:	08 95       	ret

0000348e <__tablejump2__>:
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	05 90       	lpm	r0, Z+
    3494:	f4 91       	lpm	r31, Z
    3496:	e0 2d       	mov	r30, r0
    3498:	09 94       	ijmp

0000349a <__umulhisi3>:
    349a:	a2 9f       	mul	r26, r18
    349c:	b0 01       	movw	r22, r0
    349e:	b3 9f       	mul	r27, r19
    34a0:	c0 01       	movw	r24, r0
    34a2:	a3 9f       	mul	r26, r19
    34a4:	70 0d       	add	r23, r0
    34a6:	81 1d       	adc	r24, r1
    34a8:	11 24       	eor	r1, r1
    34aa:	91 1d       	adc	r25, r1
    34ac:	b2 9f       	mul	r27, r18
    34ae:	70 0d       	add	r23, r0
    34b0:	81 1d       	adc	r24, r1
    34b2:	11 24       	eor	r1, r1
    34b4:	91 1d       	adc	r25, r1
    34b6:	08 95       	ret

000034b8 <__muluhisi3>:
    34b8:	0e 94 4d 1a 	call	0x349a	; 0x349a <__umulhisi3>
    34bc:	a5 9f       	mul	r26, r21
    34be:	90 0d       	add	r25, r0
    34c0:	b4 9f       	mul	r27, r20
    34c2:	90 0d       	add	r25, r0
    34c4:	a4 9f       	mul	r26, r20
    34c6:	80 0d       	add	r24, r0
    34c8:	91 1d       	adc	r25, r1
    34ca:	11 24       	eor	r1, r1
    34cc:	08 95       	ret

000034ce <memcpy_P>:
    34ce:	fb 01       	movw	r30, r22
    34d0:	dc 01       	movw	r26, r24
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <memcpy_P+0xa>
    34d4:	05 90       	lpm	r0, Z+
    34d6:	0d 92       	st	X+, r0
    34d8:	41 50       	subi	r20, 0x01	; 1
    34da:	50 40       	sbci	r21, 0x00	; 0
    34dc:	d8 f7       	brcc	.-10     	; 0x34d4 <memcpy_P+0x6>
    34de:	08 95       	ret

000034e0 <eeprom_read_byte>:
    34e0:	f9 99       	sbic	0x1f, 1	; 31
    34e2:	fe cf       	rjmp	.-4      	; 0x34e0 <eeprom_read_byte>
    34e4:	92 bd       	out	0x22, r25	; 34
    34e6:	81 bd       	out	0x21, r24	; 33
    34e8:	f8 9a       	sbi	0x1f, 0	; 31
    34ea:	99 27       	eor	r25, r25
    34ec:	80 b5       	in	r24, 0x20	; 32
    34ee:	08 95       	ret

000034f0 <eeprom_write_byte>:
    34f0:	26 2f       	mov	r18, r22

000034f2 <eeprom_write_r18>:
    34f2:	f9 99       	sbic	0x1f, 1	; 31
    34f4:	fe cf       	rjmp	.-4      	; 0x34f2 <eeprom_write_r18>
    34f6:	1f ba       	out	0x1f, r1	; 31
    34f8:	92 bd       	out	0x22, r25	; 34
    34fa:	81 bd       	out	0x21, r24	; 33
    34fc:	20 bd       	out	0x20, r18	; 32
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	fa 9a       	sbi	0x1f, 2	; 31
    3504:	f9 9a       	sbi	0x1f, 1	; 31
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	08 95       	ret

0000350c <_exit>:
    350c:	f8 94       	cli

0000350e <__stop_program>:
    350e:	ff cf       	rjmp	.-2      	; 0x350e <__stop_program>
